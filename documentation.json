{
    "pipes": [],
    "interfaces": [
        {
            "name": "Comment",
            "id": "interface-Comment-a54970756c6e8faac7be3d1232757579",
            "file": "src/app/core/types/task.ts",
            "type": "interface",
            "sourceCode": "interface MentionedFlag {\r\n    type: 'file' | 'task' | 'collaborator';\r\n    id: string;\r\n    label: string;\r\n}\r\n\r\nexport interface TaskGroup {\r\n    id: string;\r\n    groupName: string;\r\n}\r\n\r\nexport interface TaskStack {\r\n    id: string;\r\n    stackName: string;\r\n    projectId: string;\r\n    creatorId: string;\r\n    createTime: Date;\r\n    nextId?: string;\r\n    sortBy?: number;\r\n}\r\n\r\nexport interface Task {\r\n    id: string;\r\n    stackId: string;\r\n    isComplete: boolean;\r\n    description: string;\r\n    nextId?: string;\r\n    priority?: number;\r\n    principalUserId?: string;\r\n    endTime?: number;\r\n    remark?: string;\r\n    tags?: number[];\r\n    createdTime?: number;\r\n    completedTime?: number;\r\n    collaboratorsId?: string[];\r\n}\r\n\r\nexport enum TaskRepeat {\r\n\r\n}\r\n\r\nexport interface Tag {\r\n    id: number;\r\n    name: string;\r\n    color: string;\r\n}\r\n\r\nexport interface Comment {\r\n    id: string;\r\n    taskId: string;\r\n    creatorId: string;\r\n    content: string;\r\n    createdTime: number;\r\n    mentionedFlags: MentionedFlag[];\r\n}\r\n",
            "properties": [
                {
                    "name": "content",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 52
                },
                {
                    "name": "createdTime",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 53
                },
                {
                    "name": "creatorId",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 51
                },
                {
                    "name": "id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "mentionedFlags",
                    "type": "MentionedFlag[]",
                    "optional": false,
                    "description": "",
                    "line": 54
                },
                {
                    "name": "taskId",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 50
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "DocsSiteTheme",
            "id": "interface-DocsSiteTheme-bd861e397ec8c4da7cb902daf2487fbe",
            "file": "src/app/core/services/localstorage.service.ts",
            "type": "interface",
            "sourceCode": "import { Injectable, EventEmitter } from '@angular/core';\r\n\r\nexport interface DocsSiteTheme {\r\n  name: string;\r\n  displayName?: string;\r\n  accent: string;\r\n  primary: string;\r\n  isDark?: boolean;\r\n  isDefault?: boolean;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class LocalStorageService {\r\n\r\n  storeValue(key: string, value: any) {\r\n    try {\r\n      window.localStorage[key] = value;\r\n    } catch { }\r\n  }\r\n\r\n  getValue(key: string): any {\r\n    try {\r\n      return window.localStorage[key] || null;\r\n    } catch {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  remove(key: string) {\r\n    try {\r\n      window.localStorage.removeItem(key);\r\n    } catch { }\r\n  }\r\n\r\n}\r\n",
            "properties": [
                {
                    "name": "accent",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "displayName",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "isDark",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "isDefault",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "primary",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "LinkedListElement",
            "id": "interface-LinkedListElement-8f544ec6fa082136032c2a3bb51c30c9",
            "file": "src/app/core/types/common.ts",
            "type": "interface",
            "sourceCode": "export interface LinkedListElement {\r\n    nextId?: string;\r\n    id: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "nextId",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "MentionedFlag",
            "id": "interface-MentionedFlag-a54970756c6e8faac7be3d1232757579",
            "file": "src/app/core/types/task.ts",
            "type": "interface",
            "sourceCode": "interface MentionedFlag {\r\n    type: 'file' | 'task' | 'collaborator';\r\n    id: string;\r\n    label: string;\r\n}\r\n\r\nexport interface TaskGroup {\r\n    id: string;\r\n    groupName: string;\r\n}\r\n\r\nexport interface TaskStack {\r\n    id: string;\r\n    stackName: string;\r\n    projectId: string;\r\n    creatorId: string;\r\n    createTime: Date;\r\n    nextId?: string;\r\n    sortBy?: number;\r\n}\r\n\r\nexport interface Task {\r\n    id: string;\r\n    stackId: string;\r\n    isComplete: boolean;\r\n    description: string;\r\n    nextId?: string;\r\n    priority?: number;\r\n    principalUserId?: string;\r\n    endTime?: number;\r\n    remark?: string;\r\n    tags?: number[];\r\n    createdTime?: number;\r\n    completedTime?: number;\r\n    collaboratorsId?: string[];\r\n}\r\n\r\nexport enum TaskRepeat {\r\n\r\n}\r\n\r\nexport interface Tag {\r\n    id: number;\r\n    name: string;\r\n    color: string;\r\n}\r\n\r\nexport interface Comment {\r\n    id: string;\r\n    taskId: string;\r\n    creatorId: string;\r\n    content: string;\r\n    createdTime: number;\r\n    mentionedFlags: MentionedFlag[];\r\n}\r\n",
            "properties": [
                {
                    "name": "id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "label",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "type",
                    "type": "\"file\" | \"task\" | \"collaborator\"",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "Project",
            "id": "interface-Project-746c74f627471c4815cafdd7bfa5b1c7",
            "file": "src/app/core/types/project.ts",
            "type": "interface",
            "sourceCode": "export interface Project {\r\n    id: string;\r\n    teamId: string;\r\n    avatar?: string;\r\n    projectName: string;\r\n    description?: string;\r\n    ownerId: string;\r\n    creatorId: string;\r\n    expectedStartDate?: Date;\r\n    expectedCompletionDate?: Date;\r\n    createTime: Date;\r\n    isArchived: boolean;\r\n    archiveTime?: Date;\r\n}\r\n",
            "properties": [
                {
                    "name": "archiveTime",
                    "type": "Date",
                    "optional": true,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "avatar",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "createTime",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "creatorId",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "description",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "expectedCompletionDate",
                    "type": "Date",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "expectedStartDate",
                    "type": "Date",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "isArchived",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "ownerId",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "projectName",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "teamId",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "ServerResponse",
            "id": "interface-ServerResponse-40958506ce7b5021fbb0042e8661d3c3",
            "file": "src/app/core/types/response.ts",
            "type": "interface",
            "sourceCode": "export interface ServerResponse<T> {\r\n    code: string;\r\n    message: string;\r\n    data: T;\r\n}\r\n",
            "properties": [
                {
                    "name": "code",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "data",
                    "type": "T",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "message",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "SignUpRequest",
            "id": "interface-SignUpRequest-4a04b2ed7215d60cef72ab7025c11627",
            "file": "src/app/core/types/signUpRequest.ts",
            "type": "interface",
            "sourceCode": "export interface SignUpRequest {\r\n    name: string;\r\n    userName: string;\r\n    email: string;\r\n    password: string;\r\n}",
            "properties": [
                {
                    "name": "email",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "password",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "userName",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "Tag",
            "id": "interface-Tag-a54970756c6e8faac7be3d1232757579",
            "file": "src/app/core/types/task.ts",
            "type": "interface",
            "sourceCode": "interface MentionedFlag {\r\n    type: 'file' | 'task' | 'collaborator';\r\n    id: string;\r\n    label: string;\r\n}\r\n\r\nexport interface TaskGroup {\r\n    id: string;\r\n    groupName: string;\r\n}\r\n\r\nexport interface TaskStack {\r\n    id: string;\r\n    stackName: string;\r\n    projectId: string;\r\n    creatorId: string;\r\n    createTime: Date;\r\n    nextId?: string;\r\n    sortBy?: number;\r\n}\r\n\r\nexport interface Task {\r\n    id: string;\r\n    stackId: string;\r\n    isComplete: boolean;\r\n    description: string;\r\n    nextId?: string;\r\n    priority?: number;\r\n    principalUserId?: string;\r\n    endTime?: number;\r\n    remark?: string;\r\n    tags?: number[];\r\n    createdTime?: number;\r\n    completedTime?: number;\r\n    collaboratorsId?: string[];\r\n}\r\n\r\nexport enum TaskRepeat {\r\n\r\n}\r\n\r\nexport interface Tag {\r\n    id: number;\r\n    name: string;\r\n    color: string;\r\n}\r\n\r\nexport interface Comment {\r\n    id: string;\r\n    taskId: string;\r\n    creatorId: string;\r\n    content: string;\r\n    createdTime: number;\r\n    mentionedFlags: MentionedFlag[];\r\n}\r\n",
            "properties": [
                {
                    "name": "color",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "id",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 44
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "Task",
            "id": "interface-Task-a54970756c6e8faac7be3d1232757579",
            "file": "src/app/core/types/task.ts",
            "type": "interface",
            "sourceCode": "interface MentionedFlag {\r\n    type: 'file' | 'task' | 'collaborator';\r\n    id: string;\r\n    label: string;\r\n}\r\n\r\nexport interface TaskGroup {\r\n    id: string;\r\n    groupName: string;\r\n}\r\n\r\nexport interface TaskStack {\r\n    id: string;\r\n    stackName: string;\r\n    projectId: string;\r\n    creatorId: string;\r\n    createTime: Date;\r\n    nextId?: string;\r\n    sortBy?: number;\r\n}\r\n\r\nexport interface Task {\r\n    id: string;\r\n    stackId: string;\r\n    isComplete: boolean;\r\n    description: string;\r\n    nextId?: string;\r\n    priority?: number;\r\n    principalUserId?: string;\r\n    endTime?: number;\r\n    remark?: string;\r\n    tags?: number[];\r\n    createdTime?: number;\r\n    completedTime?: number;\r\n    collaboratorsId?: string[];\r\n}\r\n\r\nexport enum TaskRepeat {\r\n\r\n}\r\n\r\nexport interface Tag {\r\n    id: number;\r\n    name: string;\r\n    color: string;\r\n}\r\n\r\nexport interface Comment {\r\n    id: string;\r\n    taskId: string;\r\n    creatorId: string;\r\n    content: string;\r\n    createdTime: number;\r\n    mentionedFlags: MentionedFlag[];\r\n}\r\n",
            "properties": [
                {
                    "name": "collaboratorsId",
                    "type": "string[]",
                    "optional": true,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "completedTime",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "createdTime",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "description",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "endTime",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "isComplete",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "nextId",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "principalUserId",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "priority",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "remark",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "stackId",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "tags",
                    "type": "number[]",
                    "optional": true,
                    "description": "",
                    "line": 32
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "TaskGroup",
            "id": "interface-TaskGroup-a54970756c6e8faac7be3d1232757579",
            "file": "src/app/core/types/task.ts",
            "type": "interface",
            "sourceCode": "interface MentionedFlag {\r\n    type: 'file' | 'task' | 'collaborator';\r\n    id: string;\r\n    label: string;\r\n}\r\n\r\nexport interface TaskGroup {\r\n    id: string;\r\n    groupName: string;\r\n}\r\n\r\nexport interface TaskStack {\r\n    id: string;\r\n    stackName: string;\r\n    projectId: string;\r\n    creatorId: string;\r\n    createTime: Date;\r\n    nextId?: string;\r\n    sortBy?: number;\r\n}\r\n\r\nexport interface Task {\r\n    id: string;\r\n    stackId: string;\r\n    isComplete: boolean;\r\n    description: string;\r\n    nextId?: string;\r\n    priority?: number;\r\n    principalUserId?: string;\r\n    endTime?: number;\r\n    remark?: string;\r\n    tags?: number[];\r\n    createdTime?: number;\r\n    completedTime?: number;\r\n    collaboratorsId?: string[];\r\n}\r\n\r\nexport enum TaskRepeat {\r\n\r\n}\r\n\r\nexport interface Tag {\r\n    id: number;\r\n    name: string;\r\n    color: string;\r\n}\r\n\r\nexport interface Comment {\r\n    id: string;\r\n    taskId: string;\r\n    creatorId: string;\r\n    content: string;\r\n    createdTime: number;\r\n    mentionedFlags: MentionedFlag[];\r\n}\r\n",
            "properties": [
                {
                    "name": "groupName",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "TaskStack",
            "id": "interface-TaskStack-a54970756c6e8faac7be3d1232757579",
            "file": "src/app/core/types/task.ts",
            "type": "interface",
            "sourceCode": "interface MentionedFlag {\r\n    type: 'file' | 'task' | 'collaborator';\r\n    id: string;\r\n    label: string;\r\n}\r\n\r\nexport interface TaskGroup {\r\n    id: string;\r\n    groupName: string;\r\n}\r\n\r\nexport interface TaskStack {\r\n    id: string;\r\n    stackName: string;\r\n    projectId: string;\r\n    creatorId: string;\r\n    createTime: Date;\r\n    nextId?: string;\r\n    sortBy?: number;\r\n}\r\n\r\nexport interface Task {\r\n    id: string;\r\n    stackId: string;\r\n    isComplete: boolean;\r\n    description: string;\r\n    nextId?: string;\r\n    priority?: number;\r\n    principalUserId?: string;\r\n    endTime?: number;\r\n    remark?: string;\r\n    tags?: number[];\r\n    createdTime?: number;\r\n    completedTime?: number;\r\n    collaboratorsId?: string[];\r\n}\r\n\r\nexport enum TaskRepeat {\r\n\r\n}\r\n\r\nexport interface Tag {\r\n    id: number;\r\n    name: string;\r\n    color: string;\r\n}\r\n\r\nexport interface Comment {\r\n    id: string;\r\n    taskId: string;\r\n    creatorId: string;\r\n    content: string;\r\n    createdTime: number;\r\n    mentionedFlags: MentionedFlag[];\r\n}\r\n",
            "properties": [
                {
                    "name": "createTime",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "creatorId",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "nextId",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "projectId",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "sortBy",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "stackName",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "Team",
            "id": "interface-Team-dd7e3fba643b44051eb469f794745dd5",
            "file": "src/app/core/types/team.ts",
            "type": "interface",
            "sourceCode": "export interface Team {\r\n    id: string;\r\n    teamName: string;\r\n    avatar?: string;\r\n    createTime?: Date;\r\n    description?: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "avatar",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "createTime",
                    "type": "Date",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "description",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "teamName",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "User",
            "id": "interface-User-7060e7a20a5f5efd338ec007ae300922",
            "file": "src/app/core/types/user.ts",
            "type": "interface",
            "sourceCode": "export interface User {\r\n    id: string;\r\n    userName: string;\r\n    isVerified: boolean;\r\n    createdTime: number;\r\n    alias?: string;\r\n    avator?: string;\r\n    mobileNumber?: string;\r\n    email?: string;\r\n    lastGroupId?: string;\r\n    groups?: string[];\r\n}",
            "properties": [
                {
                    "name": "alias",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "avator",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "createdTime",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "email",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "groups",
                    "type": "string[]",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "isVerified",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "lastGroupId",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "mobileNumber",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "userName",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "AuthenticationService",
            "id": "injectable-AuthenticationService-0ddcc0a86fc502a703ed5cfe4d8605f6",
            "file": "src/app/core/services/authentication.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 28
                },
                {
                    "name": "register",
                    "args": [
                        {
                            "name": "registerData",
                            "type": "SignUpRequest"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 32,
                    "jsdoctags": [
                        {
                            "name": "registerData",
                            "type": "SignUpRequest",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "signIn",
                    "args": [
                        {
                            "name": "loginData",
                            "type": "literal type"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 24,
                    "jsdoctags": [
                        {
                            "name": "loginData",
                            "type": "literal type",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "verifyCaptcha",
                    "args": [
                        {
                            "name": "captcha",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 20,
                    "jsdoctags": [
                        {
                            "name": "captcha",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "verifyUsername",
                    "args": [
                        {
                            "name": "username",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 16,
                    "jsdoctags": [
                        {
                            "name": "username",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { User } from 'core/types/user';\r\nimport { ServerResponse } from 'core/types/response';\r\nimport { SignUpRequest } from 'core/types/signUpRequest';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthenticationService {\r\n\r\n  constructor(\r\n    private http: HttpClient\r\n  ) { }\r\n\r\n  verifyUsername(username: string) {\r\n    return this.http.get<ServerResponse<boolean>>('/auth/verify-username', { params: { username } });\r\n  }\r\n\r\n  verifyCaptcha(captcha: string) {\r\n    return this.http.get<ServerResponse<boolean>>('/auth/verify-captcha', { params: { captcha } });\r\n  }\r\n\r\n  signIn(loginData: { username: string, password: string }) {\r\n    return this.http.post<ServerResponse<User | null>>('/auth/sign-in', loginData);\r\n  }\r\n\r\n  logout() {\r\n    return this.http.get<ServerResponse<any>>('/auth/logout',{});\r\n  }\r\n\r\n  register(registerData: SignUpRequest) {\r\n    return this.http.post<ServerResponse<boolean>>('/auth/register', registerData);\r\n  }\r\n\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient"
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "GlobalService",
            "id": "injectable-GlobalService-43337c74b9446ccea7700a4b8cbace5f",
            "file": "src/app/core/services/global.service.ts",
            "properties": [
                {
                    "name": "currentTeamId",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "redirectUrl",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "storage",
                    "defaultValue": "localStorage",
                    "type": "Storage",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methods": [
                {
                    "name": "isUserSignIn",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 30
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { User } from 'core/types/user';\r\nimport { Observable, of } from 'rxjs';\r\nimport { map, tap } from 'rxjs/operators';\r\nimport { UserService } from './user.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class GlobalService {\r\n\r\n  redirectUrl?: string;\r\n\r\n  currentTeamId?: string;\r\n\r\n  private storage: Storage = localStorage;\r\n\r\n  set currentUser(user: User | null) {\r\n    this.storage.setItem('currentUser', JSON.stringify(user));\r\n  }\r\n\r\n  get currentUser() {\r\n    const storageValue = this.storage.getItem('currentUser');\r\n    if (!storageValue) { return null; }\r\n    return JSON.parse(storageValue);\r\n  }\r\n\r\n  constructor(private userService: UserService) { }\r\n\r\n  isUserSignIn(): Observable<boolean> {\r\n    if (this.currentUser) {\r\n      return of(true);\r\n    } else {\r\n      return this.userService.getCurrentUser().pipe(\r\n        tap(resp => {\r\n          if (resp.code === '20000') {\r\n            this.currentUser = resp.data;\r\n          }\r\n        }),\r\n        map(resp => {\r\n          return resp.code === '20000' ? true : false;\r\n        })\r\n      );\r\n    }\r\n  }\r\n\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "userService",
                        "type": "UserService"
                    }
                ],
                "line": 26,
                "jsdoctags": [
                    {
                        "name": "userService",
                        "type": "UserService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "currentUser": {
                    "name": "currentUser",
                    "setSignature": {
                        "name": "currentUser",
                        "type": "void",
                        "args": [
                            {
                                "name": "user",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 18,
                        "jsdoctags": [
                            {
                                "name": "user",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "currentUser",
                        "type": "",
                        "returnType": "",
                        "line": 22
                    }
                }
            },
            "type": "injectable"
        },
        {
            "name": "LoaderService",
            "id": "injectable-LoaderService-811cec359570640effb390d7ba21845b",
            "file": "src/app/core/services/loader.service.ts",
            "properties": [
                {
                    "name": "isGlobalLoading",
                    "defaultValue": "new BehaviorSubject<boolean>(false)",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "isGlobalLoading$",
                    "defaultValue": "this.isGlobalLoading.asObservable()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methods": [
                {
                    "name": "hide",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "show",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 10,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\n\n@Injectable({ providedIn: 'root' })\nexport class LoaderService {\n\n    private isGlobalLoading = new BehaviorSubject<boolean>(false);\n    public isGlobalLoading$ = this.isGlobalLoading.asObservable();\n\n    public show(): void {\n        this.isGlobalLoading.next(true);\n    }\n\n    public hide(): void {\n        this.isGlobalLoading.next(false);\n    }\n\n}\n",
            "type": "injectable"
        },
        {
            "name": "LocalStorageService",
            "id": "injectable-LocalStorageService-bd861e397ec8c4da7cb902daf2487fbe",
            "file": "src/app/core/services/localstorage.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getValue",
                    "args": [
                        {
                            "name": "key",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 23,
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "remove",
                    "args": [
                        {
                            "name": "key",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "storeValue",
                    "args": [
                        {
                            "name": "key",
                            "type": "string"
                        },
                        {
                            "name": "value",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "value",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable, EventEmitter } from '@angular/core';\r\n\r\nexport interface DocsSiteTheme {\r\n  name: string;\r\n  displayName?: string;\r\n  accent: string;\r\n  primary: string;\r\n  isDark?: boolean;\r\n  isDefault?: boolean;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class LocalStorageService {\r\n\r\n  storeValue(key: string, value: any) {\r\n    try {\r\n      window.localStorage[key] = value;\r\n    } catch { }\r\n  }\r\n\r\n  getValue(key: string): any {\r\n    try {\r\n      return window.localStorage[key] || null;\r\n    } catch {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  remove(key: string) {\r\n    try {\r\n      window.localStorage.removeItem(key);\r\n    } catch { }\r\n  }\r\n\r\n}\r\n",
            "type": "injectable"
        },
        {
            "name": "MessageService",
            "id": "injectable-MessageService-057154eff1d137e564a5751a67d103bd",
            "file": "src/app/core/services/message.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "openMessage",
                    "args": [
                        {
                            "name": "message",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 10,
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { MatSnackBar } from '@angular/material/snack-bar';\n\n@Injectable({ providedIn: 'root' })\nexport class MessageService {\n    constructor(\n        private snackBar: MatSnackBar\n    ) { }\n\n    openMessage(message: string) {\n        this.snackBar.open(message, '', {\n            horizontalPosition: 'right',\n            verticalPosition: 'bottom',\n            duration: 2000\n        });\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "snackBar",
                        "type": "MatSnackBar"
                    }
                ],
                "line": 5,
                "jsdoctags": [
                    {
                        "name": "snackBar",
                        "type": "MatSnackBar",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ProjectService",
            "id": "injectable-ProjectService-96e47a939301450acebf6f2f710694e4",
            "file": "src/app/core/services/project.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "addProject",
                    "args": [
                        {
                            "name": "addProjectParam",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 27,
                    "jsdoctags": [
                        {
                            "name": "addProjectParam",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getProject",
                    "args": [
                        {
                            "name": "id",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 15,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getProjectListByTeamId",
                    "args": [
                        {
                            "name": "teamId",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 23,
                    "jsdoctags": [
                        {
                            "name": "teamId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateProject",
                    "args": [
                        {
                            "name": "updateProjectParam",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 31,
                    "jsdoctags": [
                        {
                            "name": "updateProjectParam",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "verifyProjectName",
                    "args": [
                        {
                            "name": "projectName",
                            "type": "string"
                        },
                        {
                            "name": "teamId",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 19,
                    "jsdoctags": [
                        {
                            "name": "projectName",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "teamId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { ServerResponse } from 'core/types/response';\r\nimport { Project } from 'core/types/project';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ProjectService {\r\n\r\n  constructor(\r\n    private http: HttpClient\r\n  ) { }\r\n\r\n  getProject(id: string) {\r\n    return this.http.get<ServerResponse<Project>>('/api/project/get', { params: { id } });\r\n  }\r\n\r\n  verifyProjectName(projectName: string, teamId: string) {\r\n    return this.http.get<ServerResponse<boolean>>('/api/project/verifyProjectName', { params: { projectName, teamId } });\r\n  }\r\n\r\n  getProjectListByTeamId(teamId: string) {\r\n    return this.http.get<ServerResponse<Project[]>>('/api/project/list-by-team-id', { params: { teamId } });\r\n  }\r\n\r\n  addProject(addProjectParam: any) {\r\n    return this.http.post<ServerResponse<boolean>>('/api/project/addProject', addProjectParam);\r\n  }\r\n\r\n  updateProject(updateProjectParam: any) {\r\n    return this.http.put<ServerResponse<boolean>>('/api/project/updateProject', updateProjectParam);\r\n  }\r\n\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient"
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "StyleManagerService",
            "id": "injectable-StyleManagerService-af1b6e73b1c29f481030134cdab4a7f7",
            "file": "src/app/core/services/style-manager/style-manager.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "removeStyle",
                    "args": [
                        {
                            "name": "key",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "description": "<p>Remove the stylesheet link with the specified key.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setStyle",
                    "args": [
                        {
                            "name": "key",
                            "type": "string"
                        },
                        {
                            "name": "href",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 8,
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "href",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class StyleManagerService {\r\n\r\n  setStyle(key: string, href: string) {\r\n    getLinkElementForKey(key).setAttribute('href', href);\r\n  }\r\n\r\n  /**\r\n   * Remove the stylesheet link with the specified key.\r\n   */\r\n  removeStyle(key: string) {\r\n    const existingLinkElement = getExistingLinkElementByKey(key);\r\n    if (existingLinkElement) {\r\n      document.head.removeChild(existingLinkElement);\r\n    }\r\n  }\r\n}\r\n\r\nfunction createLinkElementWithKey(key: string) {\r\n  const linkEl = document.createElement('link');\r\n  linkEl.setAttribute('rel', 'stylesheet');\r\n  linkEl.setAttribute('type', 'text/css');\r\n  linkEl.classList.add(`style-manager-${key}`);\r\n  document.head.appendChild(linkEl);\r\n  return linkEl;\r\n}\r\n\r\nfunction getExistingLinkElementByKey(key: string) {\r\n  return document.head.querySelector(`link[rel=\"stylesheet\"].style-manager-${key}`);\r\n}\r\n\r\nfunction getLinkElementForKey(key: string) {\r\n  return getExistingLinkElementByKey(key) || createLinkElementWithKey(key);\r\n}\r\n",
            "type": "injectable"
        },
        {
            "name": "TaskApi",
            "id": "injectable-TaskApi-fd95db265fc4abbf22b6dd322336de8b",
            "file": "src/app/core/services/task-api.ts",
            "properties": [],
            "methods": [
                {
                    "name": "createTask",
                    "args": [
                        {
                            "name": "previousId",
                            "type": "string"
                        },
                        {
                            "name": "description",
                            "type": "string"
                        },
                        {
                            "name": "stackId",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 17,
                    "jsdoctags": [
                        {
                            "name": "previousId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "description",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "stackId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTasks",
                    "args": [
                        {
                            "name": "stackId",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 13,
                    "jsdoctags": [
                        {
                            "name": "stackId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "moveTask",
                    "args": [
                        {
                            "name": "oldPrevious",
                            "type": "Task"
                        },
                        {
                            "name": "newPrevious",
                            "type": "Task"
                        },
                        {
                            "name": "newNextId",
                            "type": "string"
                        },
                        {
                            "name": "movedTask",
                            "type": "Task"
                        },
                        {
                            "name": "newStackId",
                            "type": "string",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 21,
                    "jsdoctags": [
                        {
                            "name": "oldPrevious",
                            "type": "Task",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "newPrevious",
                            "type": "Task",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "newNextId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "movedTask",
                            "type": "Task",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "newStackId",
                            "type": "string",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { ServerResponse } from 'core/types/response';\r\nimport { Task } from 'core/types/task';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class TaskApi {\r\n\r\n    constructor(private http: HttpClient) { }\r\n\r\n    getTasks(stackId: string) {\r\n        return this.http.get<ServerResponse<Task[]>>('/api/tasks', { params: { stackId } });\r\n    }\r\n\r\n    createTask(previousId: string, description: string, stackId: string) {\r\n        return this.http.post<ServerResponse<Task>>('/api/tasks', { previousId, description, stackId });\r\n    }\r\n\r\n    moveTask(oldPrevious: Task, newPrevious: Task, newNextId: string, movedTask: Task, newStackId?: string) {\r\n        return this.http.put<ServerResponse<boolean>>('/api/tasks/move-task',\r\n            { oldPrevious, newPrevious, newNextId, movedTask, newStackId }\r\n        );\r\n    }\r\n\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient"
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "TaskStackService",
            "id": "injectable-TaskStackService-79e2eba40c0142e796cf7e57cd4bea66",
            "file": "src/app/core/services/task-stack.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "createTaskStack",
                    "args": [
                        {
                            "name": "previousId",
                            "type": "string"
                        },
                        {
                            "name": "projectId",
                            "type": "string"
                        },
                        {
                            "name": "stackName",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 19,
                    "jsdoctags": [
                        {
                            "name": "previousId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "projectId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "stackName",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getStackListByProjectId",
                    "args": [
                        {
                            "name": "projectId",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 15,
                    "jsdoctags": [
                        {
                            "name": "projectId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "moveTaskStack",
                    "args": [
                        {
                            "name": "oldPrevious",
                            "type": "TaskStack"
                        },
                        {
                            "name": "newPrevious",
                            "type": "TaskStack"
                        },
                        {
                            "name": "newNextId",
                            "type": "string"
                        },
                        {
                            "name": "movedStack",
                            "type": "TaskStack"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 23,
                    "jsdoctags": [
                        {
                            "name": "oldPrevious",
                            "type": "TaskStack",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "newPrevious",
                            "type": "TaskStack",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "newNextId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "movedStack",
                            "type": "TaskStack",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { ServerResponse } from 'core/types/response';\r\nimport { TaskStack } from 'core/types/task';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class TaskStackService {\r\n\r\n    constructor(\r\n        private http: HttpClient\r\n    ) { }\r\n\r\n    getStackListByProjectId(projectId: string) {\r\n        return this.http.get<ServerResponse<TaskStack[]>>('/api/task-stacks', { params: { projectId } });\r\n    }\r\n\r\n    createTaskStack(previousId: string, projectId: string, stackName: string) {\r\n        return this.http.post<ServerResponse<boolean>>('/api/task-stacks', { previousId, projectId, stackName });\r\n    }\r\n\r\n    moveTaskStack(oldPrevious: TaskStack, newPrevious: TaskStack, newNextId: string, movedStack: TaskStack) {\r\n        return this.http.put<ServerResponse<boolean>>('/api/task-stacks/move-stack', { oldPrevious, newPrevious, newNextId, movedStack });\r\n    }\r\n\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient"
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "TeamService",
            "id": "injectable-TeamService-31490ff31b5569e53cd21de395a7727d",
            "file": "src/app/core/services/team.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "addTeam",
                    "args": [
                        {
                            "name": "addTeamParam",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 27,
                    "jsdoctags": [
                        {
                            "name": "addTeamParam",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTeam",
                    "args": [
                        {
                            "name": "id",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 15,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTeamListByMemberId",
                    "args": [
                        {
                            "name": "memberId",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 23,
                    "jsdoctags": [
                        {
                            "name": "memberId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateTeam",
                    "args": [
                        {
                            "name": "updateTeamParam",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 31,
                    "jsdoctags": [
                        {
                            "name": "updateTeamParam",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "verifyTeamName",
                    "args": [
                        {
                            "name": "teamName",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 19,
                    "jsdoctags": [
                        {
                            "name": "teamName",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { ServerResponse } from 'core/types/response';\r\nimport { Team } from 'core/types/team';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class TeamService {\r\n\r\n  constructor(\r\n    private http: HttpClient\r\n  ) { }\r\n\r\n  getTeam(id: string) {\r\n    return this.http.get<ServerResponse<Team | null>>('/api/team/getTeam', { params: { id } });\r\n  }\r\n\r\n  verifyTeamName(teamName: string) {\r\n    return this.http.get<ServerResponse<boolean>>('/api/team/verifyTeamName', { params: { teamName } });\r\n  }\r\n\r\n  getTeamListByMemberId(memberId: string) {\r\n    return this.http.get<ServerResponse<Team[] | null>>('/api/team/getTeamListByMemberId', { params: { memberId } });\r\n  }\r\n\r\n  addTeam(addTeamParam: any) {\r\n    return this.http.post<ServerResponse<boolean>>('/api/team/addTeam', addTeamParam);\r\n  }\r\n\r\n  updateTeam(updateTeamParam: any) {\r\n    return this.http.put<ServerResponse<boolean>>('/api/team/updateTeam', updateTeamParam);\r\n  }\r\n\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient"
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "UserService",
            "id": "injectable-UserService-adebecd6647fd0998b632cfed688970d",
            "file": "src/app/core/services/user.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getCurrentUser",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 15
                }
            ],
            "description": "",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { ServerResponse } from 'core/types/response';\r\nimport { User } from 'core/types/user';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class UserService {\r\n\r\n    constructor(\r\n        private http: HttpClient\r\n    ) { }\r\n\r\n    getCurrentUser() {\r\n        return this.http.get<ServerResponse<User>>('/api/users/current-user');\r\n    }\r\n\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient"
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        }
    ],
    "classes": [
        {
            "name": "AppPage",
            "id": "class-AppPage-b0dda38f970a6690b77b35dfb293b3ac",
            "file": "e2e/src/app.po.ts",
            "type": "class",
            "sourceCode": "import { browser, by, element } from 'protractor';\r\n\r\nexport class AppPage {\r\n  navigateTo(): Promise<unknown> {\r\n    return browser.get(browser.baseUrl) as Promise<unknown>;\r\n  }\r\n\r\n  getTitleText(): Promise<string> {\r\n    return element(by.css('app-root .content span')).getText() as Promise<string>;\r\n  }\r\n}\r\n",
            "properties": [],
            "methods": [
                {
                    "name": "getTitleText",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<string>",
                    "typeParameters": [],
                    "line": 8
                },
                {
                    "name": "navigateTo",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<unknown>",
                    "typeParameters": [],
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-bb08683e90f9b96b1854184c3a0a4f7c",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "global",
                    "type": "GlobalService",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "title",
                    "defaultValue": "'kanpm'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methodsClass": [
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, ViewChild, TemplateRef } from '@angular/core';\r\nimport { AuthenticationService } from 'core/services/authentication.service';\r\nimport { GlobalService } from 'core/services/global.service';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.scss']\r\n})\r\nexport class AppComponent {\r\n\r\n  title = 'kanpm';\r\n\r\n  constructor(\r\n    public global: GlobalService,\r\n    private authService: AuthenticationService\r\n  ) { }\r\n\r\n  logout(): void {\r\n    this.authService.logout().subscribe(resp => {\r\n      this.global.currentUser = null;\r\n    })\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n  height: 100%;\r\n  width: 100%;\r\n}\r\n\r\n.root-container {\r\n  display: flex;\r\n  flex-flow: column nowrap;\r\n  height: 100%;\r\n}\r\n\r\n.main-header-nav {\r\n  box-sizing: border-box;\r\n\r\n  .mat-h1 {\r\n    margin: 0;\r\n  }\r\n\r\n  .flex-spacer {\r\n    flex-grow: 1;\r\n    display: flex;\r\n    justify-content: center;\r\n    .group-search {\r\n      width: 350px;\r\n      font-size: 16px;\r\n    }\r\n  }\r\n\r\n  .header-divider {\r\n    margin: 0 8px;\r\n  }\r\n\r\n  .header-chat-container {\r\n    display: flex;\r\n    align-items: center;\r\n    margin: 0 5px;\r\n    .header-chat-button {\r\n      cursor: pointer;\r\n      height: 18px;\r\n      width: 18px;\r\n      font-size: 18px;\r\n    }\r\n  }\r\n\r\n  .team-selector-container {\r\n    display: flex;\r\n    align-items: center;\r\n    .team-switch-button {\r\n      cursor: pointer;\r\n      height: 18px;\r\n      font-size: 18px;\r\n      margin-left: 5px;\r\n    }\r\n  }\r\n}\r\n\r\n.main-content-container {\r\n  flex: 1;\r\n  overflow: hidden;\r\n}\r\n",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "global",
                        "type": "GlobalService"
                    },
                    {
                        "name": "authService",
                        "type": "AuthenticationService"
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "global",
                        "type": "GlobalService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthenticationService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<div class=\"root-container\">\r\n  <!-- <kanpm-nav-header></kanpm-nav-header> -->\r\n  <mat-toolbar color=\"primary\" class=\"main-header-nav\">\r\n    <span class=\"mat-h1\">Kanpm</span>\r\n    <div class=\"flex-spacer\">\r\n      <mat-form-field class=\"group-search\">\r\n        <input matInput type=\"text\">\r\n        <button mat-button matSuffix mat-icon-button aria-label=\"search\">\r\n          <mat-icon>search</mat-icon>\r\n        </button>\r\n      </mat-form-field>\r\n    </div>\r\n    <div class=\"team-selector-container\">\r\n      <span class=\"mat-body\">Kanpm 开发小组</span>\r\n      <mat-icon class=\"team-switch-button\" routerLink=\"/teamSelect\">swap_horiz</mat-icon>\r\n    </div>\r\n    <mat-divider vertical style=\"height: 20px; margin: 0 10px;\"></mat-divider>\r\n    <kanpm-theme-picker></kanpm-theme-picker>\r\n    <mat-divider vertical style=\"height: 20px;margin: 0 10px;\"></mat-divider>\r\n    <!-- <nz-avatar nzIcon=\"user\"></nz-avatar> -->\r\n    <button *ngIf=\"global.currentUser\" mat-button (click)=\"logout()\">登出</button>\r\n  </mat-toolbar>\r\n  <mat-sidenav-container class=\"main-content-container\">\r\n    <mat-sidenav-content>\r\n      <router-outlet></router-outlet>\r\n    </mat-sidenav-content>\r\n  </mat-sidenav-container>\r\n</div>"
        },
        {
            "name": "AuthenticationRootComponent",
            "id": "component-AuthenticationRootComponent-95a4cc073db2f8a140f4d05b0fabbd61",
            "file": "src/app/pages/authentication/authentication-root/authentication-root.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "styleUrls": [
                "./authentication-root.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./authentication-root.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "isLoginTab",
                    "defaultValue": "true",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  templateUrl: './authentication-root.component.html',\r\n  styleUrls: ['./authentication-root.component.scss']\r\n})\r\nexport class AuthenticationRootComponent implements OnInit {\r\n\r\n  isLoginTab = true;\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '~@angular/material/theming';\r\n\r\n:host {\r\n  display: block;\r\n  height: 100%;\r\n}\r\n\r\n.authentication-root {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: flex-start;\r\n  height: 100%;\r\n  padding-left: 10%;\r\n  background: url(\"~src/assets/images/auth-illustration.png\") no-repeat 95% 90%/35%;\r\n}\r\n\r\n.auth-illustration {\r\n  position: fixed;\r\n  z-index: 1;\r\n  top: 3rem;\r\n  right: 0;\r\n}\r\n\r\n// TODO add reactive layout\r\n.ad-section {\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  position: relative;\r\n  z-index: 3;\r\n  width: 22.5rem;\r\n  height: 37.5rem;\r\n\r\n  .auth-banner-img {\r\n    width: 50%;\r\n    margin-bottom: 1.5rem;\r\n  }\r\n}\r\n\r\n.auth-section {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  position: relative;\r\n  z-index: 2;\r\n  height: 37.5rem;\r\n  padding: 3rem;\r\n  border-bottom-right-radius: .75rem;\r\n  border-top-right-radius: .75rem;\r\n  @include mat-elevation(6);\r\n}\r\n",
                    "styleUrl": "./authentication-root.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 9
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"authentication-root\">\r\n  <section class=\"ad-section\">\r\n    <img class=\"auth-banner-img\" src=\"assets/images/auth-banner.png\">\r\n    <p class=\"mat-h3\">Lorem ipsum dolor sit amet</p>\r\n    <p>Consectetur adipiscing elit</p>\r\n    <p>Phasellus orci dolor</p>\r\n    <p>dapibus suscipit quam</p>\r\n  </section>\r\n  <section class=\"auth-section\">\r\n    <router-outlet></router-outlet>\r\n  </section>\r\n</div>\r\n"
        },
        {
            "name": "AvatarComponent",
            "id": "component-AvatarComponent-405ba0808beee42190e37bc47348da37",
            "file": "src/app/shared/components/avatar/avatar.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "kanpm-avatar",
            "styleUrls": [
                "./avatar.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./avatar.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "avatar",
                    "line": 11,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, ChangeDetectionStrategy, Input } from '@angular/core';\n\n@Component({\n  selector: 'kanpm-avatar',\n  templateUrl: './avatar.component.html',\n  styleUrls: ['./avatar.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class AvatarComponent implements OnInit {\n\n  @Input() avatar?: string;\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".avatar-container {\r\n  position: relative;\r\n  cursor: pointer;\r\n  margin-left: 4px;\r\n}\r\n\r\n\r\n.mask {\r\n  position: absolute;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  width: 28px;\r\n  height: 28px;\r\n  border-radius: 14px;\r\n  background: #ffffff;\r\n  // background: #000000;\r\n  opacity: 0%;\r\n\r\n  &:hover {\r\n    opacity: 50%;\r\n  }\r\n}\r\n\r\n\r\n.avatar {\r\n  display: block;\r\n  width: 28px;\r\n  height: 28px;\r\n  border-radius: 14px;\r\n}\r\n",
                    "styleUrl": "./avatar.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 11
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"avatar-container\">\r\n    <div class=\"mask\" [matMenuTriggerFor]=\"userSettingMenu\">\r\n        <mat-icon class=\"icon\">more_horiz</mat-icon>\r\n    </div>\r\n    <mat-menu #userSettingMenu xPosition=\"before\">\r\n        <button mat-menu-item>\r\n            <mat-icon>account_circle</mat-icon>\r\n            <span>账户设置</span>\r\n        </button>\r\n        <button mat-menu-item>\r\n            <mat-icon>settings</mat-icon>\r\n            <span>偏好设置</span>\r\n        </button>\r\n        <mat-divider></mat-divider>\r\n        <button mat-menu-item>\r\n            <mat-icon>exit_to_app</mat-icon>\r\n            <span>退出登录</span>\r\n        </button>\r\n    </mat-menu>\r\n    <img [src]=\"avatar\" class=\"avatar\" />\r\n</div>"
        },
        {
            "name": "ProjectCreatorComponent",
            "id": "component-ProjectCreatorComponent-ea21877c26cf6e09bbfda758ed844028",
            "file": "src/app/shared/components/project-creator/project-creator.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "styleUrls": [
                "./project-creator.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./project-creator.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "createProjectForm",
                    "defaultValue": "this.fb.group({\r\n    projectName: ['', [\r\n      Validators.required,\r\n      Validators.maxLength(64)\r\n    ]],\r\n    description: ['', [\r\n      Validators.maxLength(255),\r\n    ]]\r\n  }, { updateOn: 'blur' })",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methodsClass": [
                {
                    "name": "createProject",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, ChangeDetectionStrategy, ChangeDetectorRef } from '@angular/core';\r\nimport { FormBuilder, Validators } from '@angular/forms';\r\nimport { MatDialogRef } from '@angular/material/dialog';\r\nimport { GlobalService } from 'core/services/global.service';\r\nimport { ProjectService } from 'core/services/project.service';\r\n\r\n@Component({\r\n  templateUrl: './project-creator.component.html',\r\n  styleUrls: ['./project-creator.component.scss']\r\n})\r\nexport class ProjectCreatorComponent {\r\n\r\n  createProjectForm = this.fb.group({\r\n    projectName: ['', [\r\n      Validators.required,\r\n      Validators.maxLength(64)\r\n    ]],\r\n    description: ['', [\r\n      Validators.maxLength(255),\r\n    ]]\r\n  }, { updateOn: 'blur' });\r\n  get projectName() { return this.createProjectForm.get('projectName'); }\r\n  get description() { return this.createProjectForm.get('description'); }\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private dialogRef: MatDialogRef<ProjectCreatorComponent>,\r\n    private globalService: GlobalService,\r\n    private projectService: ProjectService\r\n  ) { }\r\n\r\n  createProject() {\r\n    const projectParam = Object.assign(this.createProjectForm.value, {});\r\n    projectParam.teamId = this.globalService.currentTeamId;\r\n    this.projectService.addProject(projectParam).subscribe((resp: any) => {\r\n      if (resp.data) {\r\n        this.dialogRef.close({ isCreateProjectSuccess: true });\r\n      }\r\n    });\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./project-creator.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder"
                    },
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<ProjectCreatorComponent>"
                    },
                    {
                        "name": "globalService",
                        "type": "GlobalService"
                    },
                    {
                        "name": "projectService",
                        "type": "ProjectService"
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<ProjectCreatorComponent>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "globalService",
                        "type": "GlobalService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "projectService",
                        "type": "ProjectService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "projectName": {
                    "name": "projectName",
                    "getSignature": {
                        "name": "projectName",
                        "type": "",
                        "returnType": "",
                        "line": 22
                    }
                },
                "description": {
                    "name": "description",
                    "getSignature": {
                        "name": "description",
                        "type": "",
                        "returnType": "",
                        "line": 23
                    }
                }
            },
            "templateData": "<h1 mat-dialog-title>创建一个项目</h1>\n<mat-dialog-content>\n    <form [formGroup]=\"createProjectForm\">\n        <div>\n            <mat-form-field class=\"w-100\" appearance=\"outline\">\n                <mat-label>项目名称</mat-label>\n                <input matInput formControlName=\"projectName\" required>\n                <mat-icon matSuffix class=\"checked-icon\" *ngIf=\"projectName?.dirty&&projectName?.valid\">\n                    check_circle_outline\n                </mat-icon>\n                <mat-icon matSuffix color=\"warn\" *ngIf=\"projectName?.dirty&&projectName?.invalid\">highlight_off\n                </mat-icon>\n                <mat-icon matSuffix *ngIf=\"projectName?.pending\">hourglass_empty</mat-icon>\n                <mat-error *ngIf=\"projectName?.errors?.required\">项目名称是必填项</mat-error>\n                <mat-error *ngIf=\"projectName?.errors?.verifyProjectName\">当前团队已有同名项目</mat-error>\n                <mat-error *ngIf=\"projectName?.errors?.maxlength\">\n                    项目名称应不大于 {{projectName?.errors?.maxlength.requiredLength}} 个字\n                </mat-error>\n            </mat-form-field>\n        </div>\n        <div>\n            <mat-form-field class=\"w-100\" appearance=\"outline\">\n                <mat-label>项目描述</mat-label>\n                <textarea matInput formControlName=\"description\"></textarea>\n                <mat-error *ngIf=\"description?.errors?.maxlength\">\n                    项目描述应不大于 {{description?.errors?.maxlength.requiredLength}} 个字\n                </mat-error>\n            </mat-form-field>\n            <div class=\"field-feedback\">\n                <mat-icon class=\"checked-icon\" *ngIf=\"description?.dirty&&description?.valid\">check_circle_outline\n                </mat-icon>\n                <mat-icon color=\"warn\" *ngIf=\"description?.dirty&&description?.invalid\">highlight_off</mat-icon>\n            </div>\n        </div>\n    </form>\n</mat-dialog-content>\n<div mat-dialog-actions [align]=\"'end'\">\n    <button mat-flat-button mat-dialog-close>取消</button>\n    <button mat-flat-button color=\"primary\" [disabled]=\"!createProjectForm.valid\"\n        (click)=\"createProject()\">创建项目</button>\n</div>"
        },
        {
            "name": "ProjectListItemComponent",
            "id": "component-ProjectListItemComponent-cb84f883c1db55ded8e7c7ffd92c755d",
            "file": "src/app/shared/components/project-list-item/project-list-item.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "kanpm-project-list-item",
            "styleUrls": [
                "./project-list-item.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./project-list-item.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "project",
                    "line": 12,
                    "type": "Project"
                }
            ],
            "outputsClass": [
                {
                    "name": "projectClick",
                    "defaultValue": "new EventEmitter<Project>()",
                    "line": 13,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "emitProjectItemClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, ChangeDetectionStrategy, Input, EventEmitter, Output } from '@angular/core';\r\nimport { Project } from 'core/types/project';\r\n\r\n@Component({\r\n  selector: 'kanpm-project-list-item',\r\n  templateUrl: './project-list-item.component.html',\r\n  styleUrls: ['./project-list-item.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class ProjectListItemComponent implements OnInit {\r\n\r\n  @Input() project!: Project;\r\n  @Output() projectClick = new EventEmitter<Project>();\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n  emitProjectItemClick() {\r\n    this.projectClick.emit(this.project);\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n  display: block;\r\n}\r\n\r\n.root-wrapper {\r\n  display: flex;\r\n  align-items: center;\r\n  cursor: pointer;\r\n  padding: 12px 12px 6px;\r\n}\r\n\r\n.project-icon {\r\n  height: 40px;\r\n  width: 40px;\r\n  font-size: 40px;\r\n  margin-right: 32px;\r\n}\r\n\r\n.project-title {\r\n  flex: 1 1 auto;\r\n  margin: 0;\r\n  height: 40px;\r\n\r\n  span {\r\n    line-height: 40px;\r\n  }\r\n}\r\n\r\n.project-operation-wrapper {\r\n  display: flex;\r\n  align-items: center;\r\n  height: 40px;\r\n\r\n  a {\r\n    margin-right: 8px;\r\n  }\r\n\r\n  .operation-icon {\r\n    height: 16px;\r\n    width: 16px;\r\n    font-size: 16px;\r\n  }\r\n}\r\n",
                    "styleUrl": "./project-list-item.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 13
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"root-wrapper\" (click)=\"emitProjectItemClick()\">\r\n  <mat-icon color=\"primary\" class=\"project-icon\">folder</mat-icon>\r\n  <div class=\"mat-h3 project-title\">\r\n    <span>{{project.projectName}}</span>\r\n  </div>\r\n  <div class=\"project-operation-wrapper\">\r\n    <a>\r\n      <mat-icon class=\"operation-icon\">person_add</mat-icon>\r\n    </a>\r\n    <a>\r\n      <mat-icon class=\"operation-icon\">settings</mat-icon>\r\n    </a>\r\n    <a>\r\n      <mat-icon class=\"star-icon\" color=\"accent\">star</mat-icon>\r\n    </a>\r\n  </div>\r\n</div>\r\n<mat-divider></mat-divider>"
        },
        {
            "name": "ProjectRootComponent",
            "id": "component-ProjectRootComponent-1116c5c758d230ad917549737f483bba",
            "file": "src/app/pages/project/project-root/project-root.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "kanpm-project",
            "styleUrls": [
                "./project-root.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./project-root.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'kanpm-project',\r\n  templateUrl: './project-root.component.html',\r\n  styleUrls: ['./project-root.component.scss']\r\n})\r\nexport class ProjectRootComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n  display: block;\r\n  height: 100%;\r\n}\r\n\r\n.project-container {\r\n  display: flex;\r\n  height: 100%;\r\n}\r\n\r\n.project-sidebar{\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  width: 5rem;\r\n  height: 100%;\r\n}\r\n\r\n.project-content {\r\n  flex: 1;\r\n  overflow: hidden;\r\n}\r\n",
                    "styleUrl": "./project-root.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<mat-sidenav-container class=\"project-container\">\r\n  <!-- side nav -->\r\n  <mat-sidenav mode=\"side\" opened>\r\n    <div class=\"project-sidebar\">\r\n      <mat-nav-list>\r\n        <mat-list-item>\r\n          <a>任务</a>\r\n        </mat-list-item>\r\n        <mat-list-item>\r\n          <a>日历</a>\r\n        </mat-list-item>\r\n        <mat-list-item>\r\n          <a>统计</a>\r\n        </mat-list-item>\r\n      </mat-nav-list>\r\n      <mat-nav-list>\r\n        <mat-list-item>\r\n          <mat-icon class=\"icon\" color=\"primary\">group</mat-icon>\r\n        </mat-list-item>\r\n        <mat-list-item>\r\n          <mat-icon class=\"icon\" color=\"primary\">settings</mat-icon>\r\n        </mat-list-item>\r\n      </mat-nav-list>\r\n    </div>\r\n  </mat-sidenav>\r\n  <!-- content wrapper -->\r\n  <mat-sidenav-content class=\"project-content\">\r\n    <router-outlet></router-outlet>\r\n  </mat-sidenav-content>\r\n</mat-sidenav-container>"
        },
        {
            "name": "ProjectTasksComponent",
            "id": "component-ProjectTasksComponent-15812cd734d1eed5a1df1d4fc18825f7",
            "file": "src/app/pages/project/project-tasks/project-tasks.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "styleUrls": [
                "./project-tasks.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./project-tasks.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "currentProjectId",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "isShowStackCreateForm",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "stackCreateForm",
                    "defaultValue": "this.fb.group({\r\n    stackName: ['', [\r\n      Validators.required,\r\n      Validators.maxLength(64)\r\n    ]]\r\n  })",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "taskDetailDrawer",
                    "type": "MatDrawer",
                    "optional": true,
                    "description": "",
                    "line": 17,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'taskDetailDrawer'"
                        }
                    ]
                },
                {
                    "name": "tasksMap",
                    "defaultValue": "new Map<string, Task[]>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "taskStacks",
                    "defaultValue": "[]",
                    "type": "TaskStack[]",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methodsClass": [
                {
                    "name": "createArrayByLinkedList",
                    "args": [
                        {
                            "name": "linkedList",
                            "type": "LinkedListElement[]"
                        },
                        {
                            "name": "target",
                            "type": "any[]"
                        },
                        {
                            "name": "nextId",
                            "type": "string",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 151,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "linkedList",
                            "type": "LinkedListElement[]",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "target",
                            "type": "any[]",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "nextId",
                            "type": "string",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createTask",
                    "args": [
                        {
                            "name": "task",
                            "type": "literal type"
                        },
                        {
                            "name": "stackId",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 119,
                    "jsdoctags": [
                        {
                            "name": "task",
                            "type": "literal type",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "stackId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createTaskStack",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 109
                },
                {
                    "name": "getTasks",
                    "args": [
                        {
                            "name": "stackId",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 140,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "stackId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTaskStacks",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 129,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "moveElement",
                    "args": [
                        {
                            "name": "oldPrevious",
                            "type": "LinkedListElement"
                        },
                        {
                            "name": "newPrevious",
                            "type": "LinkedListElement"
                        },
                        {
                            "name": "newNextId",
                            "type": "string"
                        },
                        {
                            "name": "moveElement",
                            "type": "LinkedListElement"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 171,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "oldPrevious",
                            "type": "LinkedListElement",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "newPrevious",
                            "type": "LinkedListElement",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "newNextId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "moveElement",
                            "type": "LinkedListElement",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "moveTaskCard",
                    "args": [
                        {
                            "name": "event",
                            "type": "CdkDragDrop<any | any>"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "CdkDragDrop<any | any>",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "moveTaskStack",
                    "args": [
                        {
                            "name": "event",
                            "type": "CdkDragDrop<any | any>"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "CdkDragDrop<any | any>",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38
                },
                {
                    "name": "test",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 105
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { CdkDragDrop, moveItemInArray, transferArrayItem } from '@angular/cdk/drag-drop';\r\nimport { Task, TaskStack } from 'core/types/task';\r\nimport { MatDrawer } from '@angular/material/sidenav';\r\nimport { TaskStackService } from 'core/services/task-stack.service';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { FormBuilder, Validators } from '@angular/forms';\r\nimport { TaskApi } from 'core/services/task-api';\r\nimport { LinkedListElement } from 'core/types/common';\r\n\r\n@Component({\r\n  templateUrl: './project-tasks.component.html',\r\n  styleUrls: ['./project-tasks.component.scss']\r\n})\r\nexport class ProjectTasksComponent implements OnInit {\r\n\r\n  @ViewChild('taskDetailDrawer') taskDetailDrawer?: MatDrawer;\r\n  taskStacks: TaskStack[] = [];\r\n  tasksMap = new Map<string, Task[]>();\r\n  isShowStackCreateForm = false;\r\n  currentProjectId?: string;\r\n  stackCreateForm = this.fb.group({\r\n    stackName: ['', [\r\n      Validators.required,\r\n      Validators.maxLength(64)\r\n    ]]\r\n  });\r\n\r\n  get stackName() { return this.stackCreateForm.get('stackName'); }\r\n\r\n  constructor(\r\n    private taskStackApi: TaskStackService,\r\n    private taskApi: TaskApi,\r\n    private route: ActivatedRoute,\r\n    private fb: FormBuilder,\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.currentProjectId = this.route.snapshot.parent?.paramMap.get('id') as string;\r\n    this.getTaskStacks();\r\n  }\r\n\r\n  moveTaskStack(event: CdkDragDrop<any, any>) {\r\n    const oldPrevious = this.taskStacks[event.previousIndex - 1];\r\n    moveItemInArray(this.taskStacks, event.previousIndex, event.currentIndex);\r\n    const newPrevious = this.taskStacks[event.currentIndex - 1];\r\n    const newNext = this.taskStacks[event.currentIndex + 1];\r\n    const current = this.taskStacks[event.currentIndex];\r\n    /* 保存变更,如果发生错误，则恢复顺序 */\r\n    this.taskStackApi.moveTaskStack(oldPrevious, newPrevious, newNext.id, current).subscribe(reps => {\r\n      if (!reps.data) {\r\n        moveItemInArray(this.taskStacks, event.currentIndex, event.previousIndex);\r\n      }\r\n    });\r\n  }\r\n\r\n  moveTaskCard(event: CdkDragDrop<any, any>) {\r\n    let taskList: Task[] = [];\r\n\r\n    // 同任务列表内移动\r\n    if (event.previousContainer === event.container) {\r\n      taskList = event.container.data;\r\n      const oldPrevious = taskList[event.previousIndex - 1];\r\n      moveItemInArray(event.container.data, event.previousIndex, event.currentIndex);\r\n      const newPrevious = taskList[event.currentIndex - 1];\r\n      const newNext = taskList[event.currentIndex + 1];\r\n      const current = taskList[event.currentIndex];\r\n      this.taskApi.moveTask(oldPrevious, newPrevious, newNext?.id, current).subscribe(reps => {\r\n        if (!reps.data) {\r\n          moveItemInArray(this.taskStacks, event.currentIndex, event.previousIndex);\r\n        } else { this.moveElement(oldPrevious, newPrevious, newNext?.id, current); }\r\n      });\r\n    } else {\r\n      // 不同任务列表内移动\r\n      const previousList = event.previousContainer.data;\r\n      taskList = event.container.data;\r\n      let newStackId = '';\r\n      this.tasksMap.forEach((tasks, key) => {\r\n        if (tasks === taskList) {\r\n          newStackId = key;\r\n        }\r\n      });\r\n      const oldPrevious = previousList[event.previousIndex - 1];\r\n      transferArrayItem(event.previousContainer.data,\r\n        event.container.data,\r\n        event.previousIndex,\r\n        event.currentIndex);\r\n      const newPrevious = taskList[event.currentIndex - 1];\r\n      const newNext = taskList[event.currentIndex + 1];\r\n      const current = taskList[event.currentIndex];\r\n      this.taskApi.moveTask(oldPrevious, newPrevious, newNext.id, current, newStackId).subscribe(reps => {\r\n        if (!reps.data) {\r\n          moveItemInArray(this.taskStacks, event.currentIndex, event.previousIndex);\r\n          transferArrayItem(event.container.data.tasks, event.previousContainer.data.tasks,\r\n            event.currentIndex,\r\n            event.previousIndex);\r\n        } else {\r\n          this.moveElement(oldPrevious, newPrevious, newNext?.id, current);\r\n          current.stackId = newStackId;\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  test() {\r\n    this.taskDetailDrawer?.open();\r\n  }\r\n\r\n  createTaskStack(): void {\r\n    if (this.stackCreateForm.invalid || !this.currentProjectId) { return; }\r\n    const previousId = this.taskStacks[this.taskStacks.length - 1]?.id;\r\n    this.taskStackApi.createTaskStack(previousId, this.currentProjectId, this.stackName?.value).subscribe(resp => {\r\n      this.isShowStackCreateForm = false;\r\n      // FIXME 不需要全部刷新，改为id获取新增的列表对象，加入已有的。\r\n      this.getTaskStacks();\r\n    });\r\n  }\r\n\r\n  createTask(task: { description: string }, stackId: string): void {\r\n    const list = this.tasksMap.get(stackId) || [];\r\n    const previousId = list[list.length - 1]?.id;\r\n    this.taskApi.createTask(previousId, task.description, stackId).subscribe(resp => {\r\n      const oldList = this.tasksMap.get(stackId);\r\n      const newList = oldList ? [...oldList, resp.data] : [resp.data];\r\n      this.tasksMap.set(stackId, newList);\r\n    });\r\n  }\r\n\r\n  private getTaskStacks(): void {\r\n    if (!this.currentProjectId) { return; }\r\n    this.taskStackApi.getStackListByProjectId(this.currentProjectId).subscribe(resp => {\r\n      this.taskStacks = [];\r\n      this.createArrayByLinkedList(resp.data as LinkedListElement[], this.taskStacks as LinkedListElement[]);\r\n      this.taskStacks.forEach(stack => {\r\n        this.getTasks(stack.id);\r\n      });\r\n    });\r\n  }\r\n\r\n  private getTasks(stackId: string): void {\r\n    this.taskApi.getTasks(stackId).subscribe(resp => {\r\n      const temp: any[] = [];\r\n      if (resp.data.length) {\r\n        this.createArrayByLinkedList(resp.data as LinkedListElement[], temp);\r\n      }\r\n      this.tasksMap.set(stackId, temp);\r\n    });\r\n  }\r\n\r\n  // 按链表顺序创建数组\r\n  private createArrayByLinkedList(linkedList: LinkedListElement[], target: any[], nextId?: string) {\r\n    let index = -1;\r\n    if (!nextId) {\r\n      index = linkedList.findIndex((element) => !element || !element.nextId);\r\n    } else {\r\n      index = linkedList.findIndex((element) => element.nextId === nextId);\r\n    }\r\n\r\n    if (index < 0) {\r\n      throw new Error('列表数据出错');\r\n    }\r\n    const currentElement = linkedList.splice(index, 1)[0];\r\n    target.unshift(currentElement);\r\n\r\n    if (linkedList.length) {\r\n      this.createArrayByLinkedList(linkedList, target, currentElement.id);\r\n    }\r\n  }\r\n\r\n  // 和后端同步修改链表nextId，避免每次移动后刷新列表\r\n  private moveElement(oldPrevious: LinkedListElement, newPrevious: LinkedListElement, newNextId: string, moveElement: LinkedListElement) {\r\n    if (oldPrevious != null) { oldPrevious.nextId = moveElement.nextId; }\r\n    if (newPrevious != null) { newPrevious.nextId = moveElement.id; }\r\n    moveElement.nextId = newNextId;\r\n  }\r\n\r\n}\r\n\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".tasks-root-container {\r\n  height: 100%;\r\n}\r\n\r\n.task-detail-container {\r\n  width: 50%;\r\n  min-width: 660px;\r\n  max-width: 879px;\r\n}\r\n\r\n.task-stacks-wrapper {\r\n  height: 100%;\r\n  padding: 1rem;\r\n\r\n  ul.task-stacks {\r\n    display: flex;\r\n    align-items:flex-start;\r\n    height: 100%;\r\n    white-space: nowrap;\r\n  }\r\n  li.task-stack {\r\n    display: inline-block;\r\n    width: 20rem;\r\n    height: 100%;\r\n    margin-right: 1rem;\r\n  }\r\n  li.task-stack-creator{\r\n    display: inline-block;\r\n    width: 20rem;\r\n    margin-right: 1rem;\r\n    .stack-create-button{\r\n      cursor: pointer;\r\n    }\r\n  }\r\n}\r\n",
                    "styleUrl": "./project-tasks.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "taskStackApi",
                        "type": "TaskStackService"
                    },
                    {
                        "name": "taskApi",
                        "type": "TaskApi"
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute"
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder"
                    }
                ],
                "line": 29,
                "jsdoctags": [
                    {
                        "name": "taskStackApi",
                        "type": "TaskStackService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "taskApi",
                        "type": "TaskApi",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "stackName": {
                    "name": "stackName",
                    "getSignature": {
                        "name": "stackName",
                        "type": "",
                        "returnType": "",
                        "line": 29
                    }
                }
            },
            "templateData": "<mat-drawer-container class=\"tasks-root-container\">\r\n  <mat-drawer #taskDetailDrawer class=\"task-detail-container\" mode=\"cover\" position=\"end\">\r\n    <kanpm-task-detail></kanpm-task-detail>\r\n  </mat-drawer>\r\n  <mat-drawer-content class=\"task-stacks-wrapper\">\r\n    <!-- task list drag zone -->\r\n    <ul class=\"task-stacks\" cdkDropList cdkDropListGroup cdkDropListOrientation=\"horizontal\"\r\n      (cdkDropListDropped)=\"moveTaskStack($event)\">\r\n      <li cdkDrag *ngFor=\"let stack of taskStacks\" class=\"task-stack\">\r\n        <kanpm-task-stack [stack]=\"stack\" [tasks]=\"tasksMap.get(stack.id)\" (newTask)=\"createTask($event,stack.id)\"\r\n          (moveTask)=\"moveTaskCard($event)\">\r\n        </kanpm-task-stack>\r\n      </li>\r\n      <li class=\"task-stack-creator p-3 mat-elevation-z2\">\r\n        <div class=\"stack-create-button w-100\" (click)=\"isShowStackCreateForm=true\" *ngIf=\"!isShowStackCreateForm\">\r\n          <span>新建任务列表</span>\r\n        </div>\r\n        <form *ngIf=\"isShowStackCreateForm\" class=\"w-100\" [formGroup]=\"stackCreateForm\">\r\n          <mat-form-field class=\"w-100\" appearance=\"outline\">\r\n            <mat-label>列表名称</mat-label>\r\n            <input matInput formControlName=\"stackName\" required>\r\n            <mat-error *ngIf=\"stackName?.errors?.required\">列表名称不能为空</mat-error>\r\n            <mat-error *ngIf=\"stackName?.errors?.maxlength\">\r\n              列表名称长度不能大于 {{stackName?.errors?.maxlength.requiredLength}}.\r\n            </mat-error>\r\n            <mat-error *ngIf=\"stackName?.errors?.verify\">列表名称已被占用</mat-error>\r\n          </mat-form-field>\r\n          <div class=\"form-operations\">\r\n            <button mat-raised-button type=\"submit\" color=\"primary\" (click)=\"createTaskStack()\">确定</button>\r\n            <button mat-button (click)=\"isShowStackCreateForm=false;this.stackCreateForm.reset()\">取消</button>\r\n          </div>\r\n        </form>\r\n      </li>\r\n    </ul>\r\n  </mat-drawer-content>\r\n</mat-drawer-container>"
        },
        {
            "name": "RegisterComponent",
            "id": "component-RegisterComponent-10e838b1d7e40d4c3360a918de9cda56",
            "file": "src/app/pages/authentication/register/register.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "styleUrls": [
                "./register.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./register.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "captchaSrc",
                    "defaultValue": "'/auth/captcha'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "isPasswordHide",
                    "defaultValue": "true",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "registerForm",
                    "defaultValue": "this.fb.group({\r\n    userName: ['', {\r\n      validators: [\r\n        Validators.required,\r\n        Validators.maxLength(128),\r\n      ],\r\n      asyncValidators: [this.userNameUniqueValidator.bind(this)],\r\n      updateOn: 'blur'\r\n    }],\r\n    password: ['', [\r\n      Validators.required,\r\n      Validators.minLength(6),\r\n      Validators.maxLength(64),\r\n      this.valueFormatValidatorFactory(/^(?=.*\\d)(?=.*[a-zA-Z])[\\da-zA-Z]{6,64}$/)\r\n    ]],\r\n    passwordConfirm: ['', {\r\n      validators: [\r\n        Validators.required,\r\n        this.passwordConfirmValidator\r\n      ],\r\n      updateOn: 'blur'\r\n    }],\r\n    captcha: ['', {\r\n      validators: [\r\n        Validators.required\r\n      ],\r\n      asyncValidators: [this.captchaValidator.bind(this)],\r\n      updateOn: 'blur'\r\n    }]\r\n  }, { updateOn: 'submit' })",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [
                {
                    "name": "captchaValidator",
                    "args": [
                        {
                            "name": "control",
                            "type": "AbstractControl"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ValidationErrors | null>",
                    "typeParameters": [],
                    "line": 89,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "control",
                            "type": "AbstractControl",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60
                },
                {
                    "name": "passwordConfirmValidator",
                    "args": [
                        {
                            "name": "control",
                            "type": "AbstractControl"
                        }
                    ],
                    "optional": false,
                    "returnType": "{ passwordConfirm: boolean; }",
                    "typeParameters": [],
                    "line": 70,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "control",
                            "type": "AbstractControl",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "refreshCaptcha",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 97
                },
                {
                    "name": "submitRegisterForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 102
                },
                {
                    "name": "userNameUniqueValidator",
                    "args": [
                        {
                            "name": "control",
                            "type": "AbstractControl"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ValidationErrors | null>",
                    "typeParameters": [],
                    "line": 81,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "control",
                            "type": "AbstractControl",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "valueFormatValidatorFactory",
                    "args": [
                        {
                            "name": "re",
                            "type": "RegExp"
                        }
                    ],
                    "optional": false,
                    "returnType": "ValidatorFn",
                    "typeParameters": [],
                    "line": 63,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "re",
                            "type": "RegExp",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, Validators, ValidatorFn, AbstractControl, ValidationErrors } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\nimport { AuthenticationService } from 'core/services/authentication.service';\r\nimport { MessageService } from 'core/services/message.service';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n\r\n@Component({\r\n  templateUrl: './register.component.html',\r\n  styleUrls: ['./register.component.scss']\r\n})\r\nexport class RegisterComponent implements OnInit {\r\n\r\n  isPasswordHide = true;\r\n  registerForm = this.fb.group({\r\n    userName: ['', {\r\n      validators: [\r\n        Validators.required,\r\n        Validators.maxLength(128),\r\n      ],\r\n      asyncValidators: [this.userNameUniqueValidator.bind(this)],\r\n      updateOn: 'blur'\r\n    }],\r\n    password: ['', [\r\n      Validators.required,\r\n      Validators.minLength(6),\r\n      Validators.maxLength(64),\r\n      this.valueFormatValidatorFactory(/^(?=.*\\d)(?=.*[a-zA-Z])[\\da-zA-Z]{6,64}$/)\r\n    ]],\r\n    passwordConfirm: ['', {\r\n      validators: [\r\n        Validators.required,\r\n        this.passwordConfirmValidator\r\n      ],\r\n      updateOn: 'blur'\r\n    }],\r\n    captcha: ['', {\r\n      validators: [\r\n        Validators.required\r\n      ],\r\n      asyncValidators: [this.captchaValidator.bind(this)],\r\n      updateOn: 'blur'\r\n    }]\r\n  }, { updateOn: 'submit' });\r\n  captchaSrc = '/auth/captcha';\r\n\r\n  get userName() { return this.registerForm.get('userName'); }\r\n  get password() { return this.registerForm.get('password'); }\r\n  get passwordConfirm() { return this.registerForm.get('passwordConfirm'); }\r\n  get captcha() { return this.registerForm.get('captcha'); }\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private authServer: AuthenticationService,\r\n    private router: Router,\r\n    private message: MessageService\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n  private valueFormatValidatorFactory(re: RegExp): ValidatorFn {\r\n    return (control: AbstractControl): ValidationErrors | null => {\r\n      const forbidden = re.test(control.value);\r\n      return forbidden ? null : { valueFormat: { value: control.value } };\r\n    };\r\n  }\r\n\r\n  private passwordConfirmValidator(control: AbstractControl) {\r\n    const password = control.parent?.get('password')?.value;\r\n    const passwordConfirm = control.value;\r\n    if (password && passwordConfirm && passwordConfirm === password) {\r\n      return null;\r\n    } else {\r\n      control.setErrors({ passwordConfirm: true });\r\n      return { passwordConfirm: true };\r\n    }\r\n  }\r\n\r\n  private userNameUniqueValidator(control: AbstractControl): Observable<ValidationErrors | null> {\r\n    return this.authServer.verifyUsername(control.value).pipe(\r\n      map(resp => {\r\n        return resp.data ? null : { verify: true };\r\n      })\r\n    );\r\n  }\r\n\r\n  private captchaValidator(control: AbstractControl): Observable<ValidationErrors | null> {\r\n    return this.authServer.verifyCaptcha(control.value).pipe(\r\n      map(resp => {\r\n        return resp.data ? null : { verify: true };\r\n      })\r\n    );\r\n  }\r\n\r\n  refreshCaptcha() {\r\n    const timeStamp = new Date().getTime();\r\n    this.captchaSrc = `/auth/captcha?stamp=${timeStamp}`;\r\n  }\r\n\r\n  submitRegisterForm(): void {\r\n    if (this.registerForm.invalid) {\r\n      return;\r\n    }\r\n    this.authServer.register(this.registerForm.value).subscribe({\r\n      next: (resp) => {\r\n        if (resp.data) {\r\n          this.router.navigateByUrl('../sign-in');\r\n          this.message.openMessage('注册成功，跳转登录');\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n  display: block;\r\n}\r\n\r\n.register-root {\r\n  width: 35rem;\r\n}\r\n\r\n.register-form {\r\n  width: 100%;\r\n}\r\n\r\n\r\n.captcha-img{\r\n  margin-left: 2rem;\r\n  margin-bottom: -1rem;\r\n}\r\n",
                    "styleUrl": "./register.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder"
                    },
                    {
                        "name": "authServer",
                        "type": "AuthenticationService"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "message",
                        "type": "MessageService"
                    }
                ],
                "line": 51,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authServer",
                        "type": "AuthenticationService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "message",
                        "type": "MessageService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "userName": {
                    "name": "userName",
                    "getSignature": {
                        "name": "userName",
                        "type": "",
                        "returnType": "",
                        "line": 48
                    }
                },
                "password": {
                    "name": "password",
                    "getSignature": {
                        "name": "password",
                        "type": "",
                        "returnType": "",
                        "line": 49
                    }
                },
                "passwordConfirm": {
                    "name": "passwordConfirm",
                    "getSignature": {
                        "name": "passwordConfirm",
                        "type": "",
                        "returnType": "",
                        "line": 50
                    }
                },
                "captcha": {
                    "name": "captcha",
                    "getSignature": {
                        "name": "captcha",
                        "type": "",
                        "returnType": "",
                        "line": 51
                    }
                }
            },
            "templateData": "<div class=\"register-root\">\r\n  <h1>注册</h1>\r\n  <form class=\"register-form\" [formGroup]=\"registerForm\" (submit)=\"submitRegisterForm()\">\r\n    <div>\r\n      <mat-form-field class=\"w-100\" appearance=\"outline\">\r\n        <mat-label>用户名</mat-label>\r\n        <input matInput formControlName=\"userName\" required>\r\n        <mat-icon matSuffix *ngIf=\"userName?.dirty&&userName?.invalid\" color=\"accent\">highlight_off</mat-icon>\r\n        <mat-icon matSuffix *ngIf=\"userName?.dirty&&userName?.valid\" color=\"primary\">check_circle_outline</mat-icon>\r\n        <mat-error *ngIf=\"userName?.errors?.required\">用户名不能为空</mat-error>\r\n        <mat-error *ngIf=\"userName?.errors?.maxlength\">\r\n          用户名长度不能大于 {{userName?.errors?.maxlength.requiredLength}}.\r\n        </mat-error>\r\n        <mat-error *ngIf=\"userName?.errors?.verify\">用户名已被占用</mat-error>\r\n      </mat-form-field>\r\n    </div>\r\n    <div>\r\n      <mat-form-field class=\"w-100\" appearance=\"outline\">\r\n        <mat-label>密码</mat-label>\r\n        <input matInput formControlName=\"password\" required [type]=\"isPasswordHide ? 'password' : 'text'\">\r\n        <button mat-icon-button matPrefix tabindex=\"-1\" (click)=\"isPasswordHide = !isPasswordHide\" [attr.aria-label]=\"'Hide password'\"\r\n          [attr.aria-pressed]=\"isPasswordHide\">\r\n          <mat-icon>{{isPasswordHide ? 'visibility_off' : 'visibility'}}</mat-icon>\r\n        </button>\r\n        <mat-icon matSuffix *ngIf=\"password?.dirty&&password?.invalid\" color=\"accent\">highlight_off</mat-icon>\r\n        <mat-icon matSuffix *ngIf=\"password?.dirty&&password?.valid\" color=\"primary\">check_circle_outline</mat-icon>\r\n        <mat-error *ngIf=\"password?.errors?.valueFormat\">密码必须有 6 ~ 64 个字符</mat-error>\r\n      </mat-form-field>\r\n    </div>\r\n    <div>\r\n      <mat-form-field class=\"w-100\" appearance=\"outline\">\r\n        <mat-label>确认密码</mat-label>\r\n        <input matInput formControlName=\"passwordConfirm\" required [type]=\"isPasswordHide ? 'password' : 'text'\">\r\n        <button mat-icon-button matPrefix tabindex=\"-1\" (click)=\"isPasswordHide = !isPasswordHide\" [attr.aria-label]=\"'Hide password'\"\r\n          [attr.aria-pressed]=\"isPasswordHide\">\r\n          <mat-icon>{{isPasswordHide ? 'visibility_off' : 'visibility'}}</mat-icon>\r\n        </button>\r\n        <mat-icon matSuffix *ngIf=\"passwordConfirm?.dirty&&passwordConfirm?.invalid\" color=\"accent\">highlight_off</mat-icon>\r\n        <mat-icon matSuffix *ngIf=\"passwordConfirm?.dirty&&passwordConfirm?.valid\" color=\"primary\">check_circle_outline</mat-icon>\r\n        <mat-error>两次密码输入不一致</mat-error>\r\n      </mat-form-field>\r\n    </div>\r\n    <div>\r\n      <mat-form-field class=\"w-50\" appearance=\"outline\">\r\n        <mat-label>验证码</mat-label>\r\n        <input matInput formControlName=\"captcha\" required>\r\n        <mat-icon matSuffix *ngIf=\"captcha?.dirty&&captcha?.invalid\" color=\"accent\">highlight_off</mat-icon>\r\n        <mat-icon matSuffix *ngIf=\"captcha?.dirty&&captcha?.valid\" color=\"primary\">check_circle_outline</mat-icon>\r\n        <mat-error *ngIf=\"captcha?.errors?.required\">验证码不能为空</mat-error>\r\n        <mat-error *ngIf=\"captcha?.errors?.verify\">验证码错误</mat-error>\r\n      </mat-form-field>\r\n      <img class=\"captcha-img\" [src]=\"captchaSrc\" (click)=\"refreshCaptcha()\" />\r\n    </div>\r\n    <div class=\"form-operations\">\r\n      <button mat-raised-button type=\"submit\" color=\"primary\">register</button>\r\n      <mat-divider class=\"vertical-divider\" [vertical]=\"true\"></mat-divider>\r\n      <span>已有账号？<a routerLink=\"../sign-in\">前往登录</a></span>\r\n    </div>\r\n  </form>\r\n</div>"
        },
        {
            "name": "SignInComponent",
            "id": "component-SignInComponent-67ac96cd6faed4136bb0695a64cee5f6",
            "file": "src/app/pages/authentication/sign-in/sign-in.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "styleUrls": [
                "./sign-in.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./sign-in.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "isPasswordHide",
                    "defaultValue": "true",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "signInForm",
                    "defaultValue": "this.fb.group({\r\n    username: ['', [\r\n      Validators.required,\r\n      Validators.maxLength(64)\r\n    ]],\r\n    password: ['', [\r\n      Validators.required,\r\n      Validators.minLength(6),\r\n      Validators.maxLength(64),\r\n    ]]\r\n  })",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36
                },
                {
                    "name": "submitLoginForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, ChangeDetectionStrategy } from '@angular/core';\r\nimport { FormBuilder, Validators } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\nimport { AuthenticationService } from 'core/services/authentication.service';\r\nimport { GlobalService } from 'core/services/global.service';\r\n\r\n@Component({\r\n  templateUrl: './sign-in.component.html',\r\n  styleUrls: ['./sign-in.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class SignInComponent implements OnInit {\r\n\r\n  isPasswordHide = true;\r\n  signInForm = this.fb.group({\r\n    username: ['', [\r\n      Validators.required,\r\n      Validators.maxLength(64)\r\n    ]],\r\n    password: ['', [\r\n      Validators.required,\r\n      Validators.minLength(6),\r\n      Validators.maxLength(64),\r\n    ]]\r\n  });\r\n  get username() { return this.signInForm.get('username'); }\r\n  get password() { return this.signInForm.get('password'); }\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private authServer: AuthenticationService,\r\n    private globalService: GlobalService,\r\n    private router: Router\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n  submitLoginForm() {\r\n    if (this.signInForm.invalid) { return; }\r\n    this.authServer.signIn(this.signInForm.value).subscribe(\r\n      (resp) => {\r\n        if (!resp.data) { return; }\r\n        this.globalService.currentUser = resp.data;\r\n        if (this.globalService.redirectUrl) {\r\n          this.router.navigate([this.globalService.redirectUrl]);\r\n        } else {\r\n          this.router.navigate(['teamSelect']);\r\n        }\r\n      });\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n  display: block;\r\n}\r\n\r\n.login-root {\r\n  width: 35rem;\r\n}\r\n\r\n.login-form {\r\n  width: 100%;\r\n}\r\n\r\n",
                    "styleUrl": "./sign-in.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder"
                    },
                    {
                        "name": "authServer",
                        "type": "AuthenticationService"
                    },
                    {
                        "name": "globalService",
                        "type": "GlobalService"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    }
                ],
                "line": 27,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authServer",
                        "type": "AuthenticationService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "globalService",
                        "type": "GlobalService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "username": {
                    "name": "username",
                    "getSignature": {
                        "name": "username",
                        "type": "",
                        "returnType": "",
                        "line": 26
                    }
                },
                "password": {
                    "name": "password",
                    "getSignature": {
                        "name": "password",
                        "type": "",
                        "returnType": "",
                        "line": 27
                    }
                }
            },
            "templateData": "<div class=\"login-root\">\r\n  <h1>登录</h1>\r\n  <form class=\"login-form\" [formGroup]=\"signInForm\" (ngSubmit)=\"submitLoginForm()\">\r\n    <div>\r\n      <mat-form-field class=\"w-100\" appearance=\"outline\">\r\n        <mat-label>用户名</mat-label>\r\n        <input matInput formControlName=\"username\" required>\r\n        <mat-icon matSuffix *ngIf=\"username?.dirty&&username?.invalid\" color=\"accent\">highlight_off</mat-icon>\r\n        <mat-icon matSuffix *ngIf=\"username?.dirty&&username?.valid\" color=\"primary\">check_circle_outline</mat-icon>\r\n        <mat-error *ngIf=\"username?.errors?.required\">用户名不能为空</mat-error>\r\n        <mat-error *ngIf=\"username?.errors?.maxlength\">\r\n          用户名长度不能大于 {{username?.errors?.maxlength.requiredLength}}.\r\n        </mat-error>\r\n      </mat-form-field>\r\n    </div>\r\n    <div>\r\n      <mat-form-field class=\"w-100\" appearance=\"outline\">\r\n        <mat-label>密码</mat-label>\r\n        <input matInput formControlName=\"password\" required [type]=\"isPasswordHide ? 'password' : 'text'\">\r\n        <button mat-icon-button matPrefix type=\"button\" tabindex=\"-1\" (click)=\"isPasswordHide = !isPasswordHide\"\r\n          [attr.aria-label]=\"'Hide password'\" [attr.aria-pressed]=\"isPasswordHide\">\r\n          <mat-icon>{{isPasswordHide ? 'visibility_off' : 'visibility'}}</mat-icon>\r\n        </button>\r\n        <mat-icon matSuffix *ngIf=\"password?.dirty&&password?.invalid\" color=\"accent\">highlight_off</mat-icon>\r\n        <mat-icon matSuffix *ngIf=\"password?.dirty&&password?.valid\" color=\"primary\">check_circle_outline</mat-icon>\r\n        <mat-error *ngIf=\"password?.errors?.required\">密码不能为空</mat-error>\r\n        <mat-error *ngIf=\"password?.errors?.valueFormat\">密码必须有 6 ~ 64 个字符</mat-error>\r\n      </mat-form-field>\r\n    </div>\r\n    <div class=\"form-operations\">\r\n      <button mat-raised-button type=\"submit\" color=\"primary\" [disabled]=\"!signInForm.valid\">login</button>\r\n      <mat-divider class=\"vertical-divider\" [vertical]=\"true\"></mat-divider>\r\n      <span>没有账号？<a routerLink=\"../register\">前往注册</a></span>\r\n    </div>\r\n  </form>\r\n</div>"
        },
        {
            "name": "TaskCardComponent",
            "id": "component-TaskCardComponent-53cfcf9c806e8264b8d8f5c836eedd0e",
            "file": "src/app/shared/components/task-card/task-card.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "kanpm-task-card",
            "styleUrls": [
                "./task-card.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./task-card.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "task",
                    "line": 12,
                    "type": "Task"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, ChangeDetectionStrategy, Input } from '@angular/core';\nimport { Task } from 'core/types/task';\n\n@Component({\n  selector: 'kanpm-task-card',\n  templateUrl: './task-card.component.html',\n  styleUrls: ['./task-card.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class TaskCardComponent implements OnInit {\n\n  @Input() task!: Task;\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".task-card {\n  &.low{\n    border-left: 2px solid green;\n  }\n  &.normal{\n    border-left: 2px solid orange;\n  }\n  &.high{\n    border-left: 2px solid red;\n  }\n}\n\n.task-checkbox {\n  margin-right: 10px;\n}\n\n.task-content {\n  flex: 1 1 auto;\n  \n  &.is-complete{\n    opacity: 0.5;\n  }\n  \n  .task-header {\n    justify-content: space-between;\n    \n    .title {\n      margin-bottom: 0;\n    }\n  }\n  \n  .task-infos {\n    display: flex;\n    width: 100%;\n    flex-wrap: wrap;\n    \n    .task-info {\n      margin-right: 8px;\n      margin-top: 4px;\n      white-space: nowrap;\n    }\n    \n    .task-tag-red {\n      color: red;\n    }\n  \n    .task-tag-blue {\n      color: blue;\n    }\n    \n    .task-tag-green {\n      color: green;\n    }\n  }\n}\n\n",
                    "styleUrl": "./task-card.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 12
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<!-- <mat-card class=\"task-card\" [class.high]=\"task.priority === 'high'\" [class.normal]=\"task.priority === 'normal'\"\n  [class.low]=\"task.priority === 'low'\"> -->\n<mat-card>\n  <div style=\"display: flex;\">\n    <mat-checkbox [(ngModel)]=\"task.isComplete\" class=\"task-checkbox\"></mat-checkbox>\n    <!-- title + executor -->\n    <div class=\"task-content\" [class.is-complete]=\"task.isComplete\">\n      <section class=\"task-header flex-vertical-center\">\n        <header class=\"title mat-h4\">{{task.description}}</header>\n        <nz-avatar nzIcon=\"user\"></nz-avatar>\n      </section>\n      <section class=\"task-infos\">\n        <!-- <div *ngIf=\"task.subTasks&&task.subTasks.length\" class=\"flex-center task-info mat-caption\">\n          <mat-icon inline style=\"font-size: 16px; margin-right: 4px;\">list</mat-icon>\n          <span>{{completedSubTask()}} completed / {{task.subTasks.length}} total</span>\n        </div> -->\n        <div *ngIf=\"task.endTime\" class=\"flex-center task-info mat-caption\">\n          <mat-icon inline style=\"font-size: 16px; margin-right: 4px;\">calendar_today</mat-icon>\n          <span>{{task.endTime | date:'yyyy/MM/dd'}}</span>\n        </div>\n        <!-- <div *ngIf=\"task.remindTime\" class=\"flex-center task-info mat-caption\">\n          <mat-icon inline style=\"font-size: 16px; margin-right: 4px;\">alarm_on</mat-icon>\n          <span>{{task.remindTime | date:'MM/dd, HH:mm'}}</span>\n        </div>\n        <div *ngIf=\"task.repeat\" class=\"flex-center task-info mat-caption\">\n          <mat-icon inline style=\"font-size: 16px; margin-right: 4px;\">repeat</mat-icon>\n          <span>{{ task.repeat}}</span>\n        </div> -->\n        <div *ngIf=\"task.remark\" class=\"flex-center task-info mat-caption\">\n          <mat-icon inline style=\"font-size: 16px;\">description</mat-icon>\n        </div>\n        <!-- <div *ngIf=\"task.attachments && task.attachments.length\" class=\" task-info mat-caption\">\n          <mat-icon inline style=\"font-size: 16px;\">attachment</mat-icon>\n        </div> -->\n        <!-- TODO tag component -->\n        <!-- <div class=\"task-info mat-caption task-tag-red\">\n                important\n              </div>\n              <div class=\"task-info mat-caption task-tag-blue\">\n                developing\n              </div>\n              <div class=\"task-info mat-caption task-tag-green\">\n                normal\n              </div> -->\n      </section>\n    </div>\n  </div>\n  <!-- task infos -->\n</mat-card>"
        },
        {
            "name": "TaskDetailComponent",
            "id": "component-TaskDetailComponent-cb9b134982af97b7f0076258abedd8ee",
            "file": "src/app/shared/components/task-detail/task-detail.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "kanpm-task-detail",
            "styleUrls": [
                "./task-detail.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./task-detail.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, ChangeDetectionStrategy } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'kanpm-task-detail',\r\n  templateUrl: './task-detail.component.html',\r\n  styleUrls: ['./task-detail.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class TaskDetailComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n  display: block;\r\n  height: 100%;\r\n  padding: 10px;\r\n}\r\n\r\n.task-detail-root {\r\n  display: flex;\r\n  flex-direction: column;\r\n  height: 100%;\r\n\r\n  .task-header {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n  }\r\n\r\n  .task-info {\r\n    flex: 1;\r\n    display: flex;\r\n    flex-direction: column;\r\n    padding: 10px;\r\n    overflow-y: auto;\r\n  }\r\n}\r\n\r\n.task-directory {\r\n  height: 40px;\r\n\r\n  .directory-divider {\r\n    display: inline;\r\n    margin-left: 16px;\r\n  }\r\n}\r\n\r\n.task-info-wrapper {\r\n  display: flex;\r\n  align-items: flex-start;\r\n  margin-bottom: 10px;\r\n\r\n  .base-info {\r\n    flex: 1;\r\n    padding: 0 10px;\r\n  }\r\n}\r\n\r\n.task-comment-wrapper {\r\n  display: flex;\r\n  width: 100%;\r\n  padding: 20px 30px;\r\n\r\n  .comment-avator {\r\n    height: 32px;\r\n    width: 32px;\r\n    font-size: 32px;\r\n    margin-right: 8px;\r\n  }\r\n\r\n  .comment-items {\r\n    flex: 1;\r\n\r\n    .comment-header {\r\n      display: inline-flex;\r\n      align-items: center;\r\n\r\n      .user {\r\n        font-size: 16px;\r\n        margin-right: 16px;\r\n      }\r\n\r\n      .create-time {\r\n        font-size: 12px;\r\n        color: #ccc;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n\r\n.comment-emitter {\r\n  width: 100%;\r\n  padding: 12px 30px;\r\n\r\n  .comment-editor {\r\n    width: 100%;\r\n    margin-bottom: 10px;\r\n  }\r\n\r\n  .emitter-footer {\r\n    display: flex;\r\n\r\n    .tool-bar {\r\n      flex: 1;\r\n\r\n      li {\r\n        float: left;\r\n        padding: 0 6px;\r\n      }\r\n    }\r\n  }\r\n}\r\n",
                    "styleUrl": "./task-detail.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 9
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"task-detail-root\">\r\n  <div class=\"task-header\">\r\n    <div class=\"task-directory\">\r\n      <span class=\"mat-h3\">测试项目1</span>\r\n      <mat-divider vertical class=\"directory-divider\"></mat-divider>\r\n      <button mat-button><span class=\"mat-h3\">开发任务 - 测试任务列表00</span></button>\r\n    </div>\r\n    <div>\r\n      <mat-icon>sort</mat-icon>\r\n      <mat-icon>attachment</mat-icon>\r\n      <mat-icon>more_vert</mat-icon>\r\n    </div>\r\n  </div>\r\n  <mat-divider></mat-divider>\r\n  <div class=\"task-info\">\r\n    <div class=\"task-info-wrapper\">\r\n      <mat-checkbox class=\"task-checkbox\"></mat-checkbox>\r\n      <div class=\"base-info\">\r\n        <h2>任务0</h2>\r\n        <div>\r\n          <!-- <span>研发调研</span> -->\r\n          <!-- <mat-basic-chip style=\"background: red;\">研发调研</mat-basic-chip> -->\r\n          <nz-tag [nzColor]=\"'magenta'\">研发调研</nz-tag>\r\n          <!-- <mat-basic-chip style=\"background: blue;\">测试开发</mat-basic-chip> -->\r\n          <nz-tag [nzColor]=\"'red'\">测试开发</nz-tag>\r\n          <button mat-icon-button>\r\n            <mat-icon>add</mat-icon>\r\n          </button>\r\n        </div>\r\n        <div>\r\n          <span>暂无备注</span>\r\n          <button mat-icon-button>\r\n            <mat-icon>add</mat-icon>\r\n          </button>\r\n        </div>\r\n        <div>\r\n          <div style=\"display: flex; align-items: center;\">\r\n            <span>参与人 ：</span>\r\n            <nz-avatar nzIcon=\"user\"></nz-avatar>\r\n            <button mat-icon-button>\r\n              <mat-icon>add</mat-icon>\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"assign-info\">\r\n        <div>执行人 ：Anderson</div>\r\n        <div>开始日期 -- 结束时间</div>\r\n      </div>\r\n    </div>\r\n    <mat-divider></mat-divider>\r\n    <section>\r\n      <mat-tab-group>\r\n        <mat-tab label=\"评论\">\r\n          <nz-comment nzAuthor=\"Han Solo\">\r\n            <nz-avatar nz-comment-avatar nzIcon=\"user\"></nz-avatar>\r\n            <nz-comment-content>\r\n              <p>\r\n                We supply a series of design principles, practical patterns and high quality design resources (Sketch\r\n                and Axure), to help people\r\n                create their product prototypes beautifully and efficiently.\r\n              </p>\r\n            </nz-comment-content>\r\n            <nz-comment-action>\r\n              <i nz-tooltip nzTooltipTitle=\"Like\" nz-icon nzType=\"like\"></i>\r\n              <span class=\"count like\">1</span>\r\n            </nz-comment-action>\r\n            <nz-comment-action>\r\n              <i nz-tooltip nzTooltipTitle=\"Dislike\" nz-icon nzType=\"dislike\"></i>\r\n              <span class=\"count dislike\">22</span>\r\n            </nz-comment-action>\r\n            <nz-comment-action>Reply to</nz-comment-action>\r\n          </nz-comment>\r\n        </mat-tab>\r\n        <mat-tab label=\"动态\">暂无动态</mat-tab>\r\n      </mat-tab-group>\r\n    </section>\r\n  </div>\r\n  <mat-divider></mat-divider>\r\n  <div class=\"task-footer\">\r\n    <div class=\"comment-emitter\">\r\n      <mat-form-field class=\"comment-editor\">\r\n        <mat-label>发表评论 ：</mat-label>\r\n        <textarea matInput #commentEditor cdkTextareaAutosize placeholder=\"评论内容，文字上限2000\" cdkAutosizeMinRows=\"2\"\r\n          cdkAutosizeMaxRows=\"5\"></textarea>\r\n        <mat-hint align=\"end\">{{commentEditor.value.length}} / 2000</mat-hint>\r\n      </mat-form-field>\r\n      <div class=\"emitter-footer\">\r\n        <ul class=\"tool-bar\">\r\n          <li>\r\n            <mat-icon>emoji_emotions</mat-icon>\r\n          </li>\r\n          <li>\r\n            <mat-icon>alternate_email</mat-icon>\r\n          </li>\r\n          <li>\r\n            <mat-icon>link</mat-icon>\r\n          </li>\r\n        </ul>\r\n        <div>\r\n          <button mat-button>取消</button>\r\n          <button mat-raised-button color=\"primary\">发送</button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>"
        },
        {
            "name": "TaskListItemComponent",
            "id": "component-TaskListItemComponent-02487aa6efbaf52fdf5db0f6f7166435",
            "file": "src/app/shared/components/task-list-item/task-list-item.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "kanpm-task-list-item",
            "styleUrls": [
                "./task-list-item.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./task-list-item.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, ChangeDetectionStrategy } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'kanpm-task-list-item',\r\n  templateUrl: './task-list-item.component.html',\r\n  styleUrls: ['./task-list-item.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class TaskListItemComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n  display: block;\r\n}\r\n\r\n.root-wrapper {\r\n  display: flex;\r\n  cursor: pointer;\r\n  padding: 12px 12px 6px;\r\n}\r\n\r\n.task-info-wrapper {\r\n  margin: 0 12px;\r\n  flex: 1 1 auto;\r\n\r\n  .task-infos {\r\n    display: flex;\r\n    align-items: center;\r\n    height: 30px;\r\n    margin-top: 6px;\r\n    \r\n    .info-with-icon {\r\n      .icon{\r\n        font-size: 16px;\r\n        height: 16px;\r\n        width: 16px;\r\n        margin-right: 4px;\r\n      }\r\n      display: flex;\r\n      align-items: center;\r\n      margin-right: 16px;\r\n    }\r\n  }\r\n}\r\n\r\n.task-time-label {\r\n  display: inline-block;\r\n  padding: 0 8px;\r\n  line-height: 20px;\r\n  font-size: 12px;\r\n  vertical-align: middle;\r\n}\r\n",
                    "styleUrl": "./task-list-item.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 9
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"root-wrapper\">\r\n  <div>\r\n    <mat-checkbox></mat-checkbox>\r\n  </div>\r\n  <div class=\"task-info-wrapper\">\r\n    <span class=\"task-title\">任务XXX</span>\r\n    <div class=\"task-infos\">\r\n      <!-- task status -->\r\n      <nz-tag [nzColor]=\"'green'\">进行中</nz-tag>\r\n      <div class=\"info-with-icon\">\r\n        <!-- task type -->\r\n        <mat-icon class=\"icon\">library_add_check</mat-icon>\r\n        <span class=\"mat-caption\">任务</span>\r\n      </div>\r\n      <div class=\"info-with-icon\">\r\n        <!-- project -->\r\n        <mat-icon class=\"icon\">layers</mat-icon>\r\n        <span class=\"mat-caption\">项目1</span>\r\n      </div>\r\n      <div class=\"info-with-icon\">\r\n        <!-- parent task -->\r\n        <mat-icon class=\"icon\">account_tree</mat-icon>\r\n        <span class=\"mat-caption\">父级任务</span>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div class=\"task-assgin-wrapper\">\r\n    <span class=\"task-time-label\">开始时间</span>\r\n    <span class=\"task-time-divider\">-</span>\r\n    <span class=\"task-time-label\">结束时间</span>\r\n  </div>\r\n</div>\r\n<mat-divider></mat-divider>"
        },
        {
            "name": "TaskStackComponent",
            "id": "component-TaskStackComponent-df42e447a4a278e93cb772fd2199cdad",
            "file": "src/app/shared/components/task-stack/task-stack.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "kanpm-task-stack",
            "styleUrls": [
                "./task-stack.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./task-stack.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "stack",
                    "line": 14,
                    "type": "TaskStack"
                },
                {
                    "name": "tasks",
                    "defaultValue": "[]",
                    "line": 15,
                    "type": "Task[]"
                }
            ],
            "outputsClass": [
                {
                    "name": "moveTask",
                    "defaultValue": "new EventEmitter()",
                    "line": 16,
                    "type": "EventEmitter"
                },
                {
                    "name": "newTask",
                    "defaultValue": "new EventEmitter()",
                    "line": 17,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "isLoading",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "isShowCreatePane",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "taskCreateForm",
                    "defaultValue": "this.fb.group({\n    description: ['', [\n      Validators.required,\n      Validators.maxLength(128)\n    ]]\n  })",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "methodsClass": [
                {
                    "name": "drop",
                    "args": [
                        {
                            "name": "event",
                            "type": "CdkDragDrop<string[]>"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "CdkDragDrop<string[]>",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "emitNewTask",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44
                },
                {
                    "name": "getStackStatus",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 35
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { CdkDragDrop, moveItemInArray, transferArrayItem } from '@angular/cdk/drag-drop';\nimport { Component, OnInit, ChangeDetectionStrategy, Input, Output, EventEmitter } from '@angular/core';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { Task, TaskStack } from 'core/types/task';\n\n@Component({\n  selector: 'kanpm-task-stack',\n  templateUrl: './task-stack.component.html',\n  styleUrls: ['./task-stack.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class TaskStackComponent implements OnInit {\n\n  @Input() stack?: TaskStack;\n  @Input() tasks: Task[] = [];\n  @Output() moveTask = new EventEmitter();\n  @Output() newTask = new EventEmitter();\n  isLoading = false;\n  isShowCreatePane = false;\n  taskCreateForm = this.fb.group({\n    description: ['', [\n      Validators.required,\n      Validators.maxLength(128)\n    ]]\n  });\n  get description() { return this.taskCreateForm.get('description'); }\n\n  constructor(\n    private fb: FormBuilder\n  ) { }\n\n  ngOnInit(): void {\n  }\n\n  getStackStatus(): string {\n    const completed = this.tasks.filter(task => task.isComplete);\n    return `${completed.length}/${this.tasks.length}`;\n  }\n\n  drop(event: CdkDragDrop<string[]>) {\n    this.moveTask.emit(event);\n  }\n\n  emitNewTask(): void {\n    this.newTask.emit(this.taskCreateForm.value);\n    this.taskCreateForm.reset()\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  height: 100%;\n  padding: 0;\n}\n\n.task-stack {\n  display: flex;\n  flex-direction: column;\n  box-sizing: border-box;\n  position: relative;\n  height: 100%;\n  border-radius: 3px;\n}\n\n.stack-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  height: 64px;\n  padding: 0 10px;\n  margin-bottom: 10px;\n\n  .stack-name {\n    font-size: 18px;\n    font-weight: 400;\n    margin: 0 8px;\n  }\n}\n\n.stack-content {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  flex: 1;\n  overflow: hidden;\n\n  .task-list {\n    overflow-y: auto;\n    li {\n      margin-bottom: 10px;\n    }\n  }\n\n  .empty-content-tips {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    height: 100%;\n    min-height: 150px;\n    mat-icon {\n      height: 32px;\n      width: 32px;\n      font-size: 32px;\n    }\n  }\n\n  .list-loading {\n    height: 100%;\n    min-height: 150px;\n    flex-direction: column;\n  }\n}\n\n\n",
                    "styleUrl": "./task-stack.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder"
                    }
                ],
                "line": 26,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "description": {
                    "name": "description",
                    "getSignature": {
                        "name": "description",
                        "type": "",
                        "returnType": "",
                        "line": 26
                    }
                }
            },
            "templateData": "<div class=\"task-stack\">\n  <!-- stack header -->\n  <header class=\"stack-header mat-elevation-z1\">\n    <div>\n      <span class=\"stack-name\">{{stack?.stackName}}</span>\n      <span *ngIf=\"tasks&&tasks?.length\" class=\"stack-status\">{{getStackStatus()}}</span>\n    </div>\n    <div>\n      <button mat-icon-button (click)=\"isShowCreatePane=true\">\n        <mat-icon>add_task</mat-icon>\n      </button>\n      <button mat-icon-button>\n        <mat-icon>more_horiz</mat-icon>\n      </button>\n    </div>\n  </header>\n  <!-- stack content, task card drag zone -->\n  <div class=\"stack-content\">\n    <div *ngIf=\"isLoading\" class=\"flex-center list-loading\">\n      <mat-spinner [diameter]=\"24\" [strokeWidth]=\"4\"></mat-spinner>\n      <span>列表加载中</span>\n    </div>\n    <ul class=\"task-list h-100 w-100 px-2\" *ngIf=\"!isLoading\" cdkDropList [cdkDropListData]=\"tasks\"\n      (cdkDropListDropped)=\"drop($event)\">\n      <!-- task creator -->\n      <mat-card *ngIf=\"!isLoading && isShowCreatePane\" class=\"w-100 mb-2\">\n        <form class=\"w-100\" [formGroup]=\"taskCreateForm\">\n          <mat-form-field class=\"w-100\" appearance=\"outline\">\n            <mat-label>任务描述</mat-label>\n            <textarea matInput formControlName=\"description\" require></textarea>\n            <mat-error *ngIf=\"description?.errors?.required\">任务描述不能为空</mat-error>\n            <mat-error *ngIf=\"description?.errors?.maxlength\">\n              任务描述长度不能大于 {{description?.errors?.maxlength.requiredLength}}.\n            </mat-error>\n          </mat-form-field>\n          <section>\n            <button mat-stroked-button color=\"primary\" [disabled]=\"taskCreateForm.invalid\"\n              (click)=\"emitNewTask()\">创建</button>\n            <button mat-button class=\"ms-1\" (click)=\"isShowCreatePane=false;taskCreateForm.reset()\">取消</button>\n          </section>\n        </form>\n      </mat-card>\n      <li *ngFor=\"let task of tasks; index as i\" cdkDrag [cdkDragData]=\"task\">\n        <kanpm-task-card [task]=task></kanpm-task-card>\n      </li>\n    </ul>\n    <div class=\"empty-content-tips\" *ngIf=\"!isLoading && tasks?.length == 0\">\n      <mat-icon color=\"primary\">check_box</mat-icon>\n      <span>列表无任务</span>\n      <span class=\"mat-caption\">动静有时，张驰有度</span>\n    </div>\n  </div>\n</div>"
        },
        {
            "name": "TeamCreatorComponent",
            "id": "component-TeamCreatorComponent-fb23dd9cf4530764c597da1d50689f65",
            "file": "src/app/shared/components/team-creator/team-creator.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "styleUrls": [
                "./team-creator.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./team-creator.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "createTeamForm",
                    "defaultValue": "this.fb.group({\r\n    teamName: ['', [\r\n      Validators.required,\r\n      Validators.maxLength(64)\r\n    ], [this.teamNameUniqueValidator.bind(this)]],\r\n    description: ['', [\r\n      Validators.maxLength(255),\r\n    ]]\r\n  }, { updateOn: 'blur' })",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [
                {
                    "name": "createTeam",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35
                },
                {
                    "name": "teamNameUniqueValidator",
                    "args": [
                        {
                            "name": "control",
                            "type": "AbstractControl"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ValidationErrors | null>",
                    "typeParameters": [],
                    "line": 38,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "control",
                            "type": "AbstractControl",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, ChangeDetectorRef, ChangeDetectionStrategy } from '@angular/core';\r\nimport { FormBuilder, Validators, AbstractControl, ValidationErrors } from '@angular/forms';\r\n\r\nimport { map, finalize, catchError } from 'rxjs/operators';\r\nimport { of, Observable } from 'rxjs';\r\nimport { MatDialogRef } from '@angular/material/dialog';\r\nimport { TeamService } from 'core/services/team.service';\r\n\r\n@Component({\r\n  templateUrl: './team-creator.component.html',\r\n  styleUrls: ['./team-creator.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class TeamCreatorComponent implements OnInit {\r\n\r\n  createTeamForm = this.fb.group({\r\n    teamName: ['', [\r\n      Validators.required,\r\n      Validators.maxLength(64)\r\n    ], [this.teamNameUniqueValidator.bind(this)]],\r\n    description: ['', [\r\n      Validators.maxLength(255),\r\n    ]]\r\n  }, { updateOn: 'blur' });\r\n  get teamName() { return this.createTeamForm.get('teamName'); }\r\n  get description() { return this.createTeamForm.get('description'); }\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private dialogRef: MatDialogRef<TeamCreatorComponent>,\r\n    private CDRef: ChangeDetectorRef,\r\n    private teamService: TeamService\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n  private teamNameUniqueValidator(control: AbstractControl): Observable<ValidationErrors | null> {\r\n    return this.teamService.verifyTeamName(control.value).pipe(\r\n      map(resp => {\r\n        return resp.data ? null : { verifyTeamName: true };\r\n      }),\r\n      finalize(() => {\r\n        this.CDRef.markForCheck();\r\n      }),\r\n      catchError(() => of(null))\r\n    );\r\n  }\r\n\r\n  createTeam() {\r\n    this.teamService.addTeam(this.createTeamForm.value).subscribe((resp: any) => {\r\n      if (resp.data) {\r\n        this.dialogRef.close({ isCreateTeamSuccess: true });\r\n      }\r\n    });\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./team-creator.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder"
                    },
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<TeamCreatorComponent>"
                    },
                    {
                        "name": "CDRef",
                        "type": "ChangeDetectorRef"
                    },
                    {
                        "name": "teamService",
                        "type": "TeamService"
                    }
                ],
                "line": 26,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<TeamCreatorComponent>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "CDRef",
                        "type": "ChangeDetectorRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "teamService",
                        "type": "TeamService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "teamName": {
                    "name": "teamName",
                    "getSignature": {
                        "name": "teamName",
                        "type": "",
                        "returnType": "",
                        "line": 25
                    }
                },
                "description": {
                    "name": "description",
                    "getSignature": {
                        "name": "description",
                        "type": "",
                        "returnType": "",
                        "line": 26
                    }
                }
            },
            "templateData": "<h1 mat-dialog-title>创建你的团队</h1>\r\n<mat-dialog-content>\r\n    <form [formGroup]=\"createTeamForm\">\r\n        <div>\r\n            <mat-form-field class=\"w-100\" appearance=\"outline\">\r\n                <mat-label>团队名称</mat-label>\r\n                <input matInput formControlName=\"teamName\" required>\r\n                <mat-icon matSuffix color=\"primary\" class=\"checked-icon\" *ngIf=\"teamName?.dirty&&teamName?.valid\">\r\n                    check_circle_outline</mat-icon>\r\n                <mat-icon matSuffix color=\"warn\" *ngIf=\"teamName?.dirty&&teamName?.invalid\">highlight_off</mat-icon>\r\n                <mat-icon matSuffix *ngIf=\"teamName?.pending\">hourglass_empty</mat-icon>\r\n                <mat-error *ngIf=\"teamName?.errors?.required\">团队名称是必填项</mat-error>\r\n                <mat-error *ngIf=\"teamName?.errors?.maxlength\">\r\n                    团队名称应不大于 {{teamName?.errors?.maxlength.requiredLength}} 个字\r\n                </mat-error>\r\n                <mat-error *ngIf=\"teamName?.errors?.verifyTeamName\">该团队名称已被注册</mat-error>\r\n            </mat-form-field>\r\n        </div>\r\n        <div>\r\n            <mat-form-field class=\"w-100\" appearance=\"outline\">\r\n                <mat-label>团队描述</mat-label>\r\n                <textarea matInput formControlName=\"description\"></textarea>\r\n                <mat-icon color=\"primary\" class=\"checked-icon\" *ngIf=\"description?.dirty&&description?.valid\">\r\n                    check_circle_outline\r\n                </mat-icon>\r\n                <mat-icon color=\"warn\" *ngIf=\"description?.dirty&&description?.invalid\">highlight_off</mat-icon>\r\n                <mat-error *ngIf=\"description?.errors?.maxlength\">\r\n                    团队描述应不大于 {{description?.errors?.maxlength.requiredLength}} 个字\r\n                </mat-error>\r\n            </mat-form-field>\r\n        </div>\r\n    </form>\r\n</mat-dialog-content>\r\n<div mat-dialog-actions [align]=\"'end'\">\r\n    <button mat-flat-button mat-dialog-close>cancel</button>\r\n    <button mat-flat-button color=\"primary\" [disabled]=\"!createTeamForm.valid\" (click)=\"createTeam()\">create</button>\r\n</div>"
        },
        {
            "name": "TeamHomeComponent",
            "id": "component-TeamHomeComponent-af580d6a10481a3e0556609b507b334e",
            "file": "src/app/pages/team/team-home/team-home.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "styleUrls": [
                "./team-home.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./team-home.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 11
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  templateUrl: './team-home.component.html',\r\n  styleUrls: ['./team-home.component.scss']\r\n})\r\nexport class TeamHomeComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n  display: block;\r\n}\r\n\r\n.starred-projects {\r\n  margin-top: 16px;\r\n}\r\n\r\n",
                    "styleUrl": "./team-home.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 7
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<!-- <section>\r\n  <mat-tab-group>\r\n    <mat-tab>\r\n      <ng-template mat-tab-label>\r\n        <span class=\"mat-h3\">临近截止</span>\r\n      </ng-template>\r\n      <kanpm-task-list-item *ngFor=\"let task of approachingDeadlineTasks\"></kanpm-task-list-item>\r\n    </mat-tab>\r\n    <mat-tab>\r\n      <ng-template mat-tab-label>\r\n        <span class=\"mat-h3\">最近浏览</span>\r\n      </ng-template>\r\n      Content 2\r\n    </mat-tab>\r\n  </mat-tab-group>\r\n</section> -->"
        },
        {
            "name": "TeamProjectsComponent",
            "id": "component-TeamProjectsComponent-6e668acceac96366fc75e58479e88430",
            "file": "src/app/pages/team/team-projects/team-projects.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "styleUrls": [
                "./team-projects.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./team-projects.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "projectList",
                    "defaultValue": "[]",
                    "type": "Project[]",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "teamId",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "getProjectListByTeamId",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27
                },
                {
                    "name": "openProjectCreatorDialog",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37
                },
                {
                    "name": "routeToProjectDetail",
                    "args": [
                        {
                            "name": "e",
                            "type": "Project"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "Project",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { ActivatedRoute, ActivatedRouteSnapshot, Router } from '@angular/router';\r\nimport { ProjectCreatorComponent } from 'shared/components/project-creator/project-creator.component';\r\nimport { ProjectService } from 'core/services/project.service';\r\nimport { Project } from 'core/types/project';\r\nimport { GlobalService } from 'core/services/global.service';\r\n\r\n@Component({\r\n  templateUrl: './team-projects.component.html',\r\n  styleUrls: ['./team-projects.component.scss']\r\n})\r\nexport class TeamProjectsComponent implements OnInit {\r\n\r\n  projectList: Project[] = [];\r\n\r\n  private teamId = '';\r\n\r\n  constructor(\r\n    private dialog: MatDialog,\r\n    private projectService: ProjectService,\r\n    private globalService: GlobalService,\r\n    private route: ActivatedRoute,\r\n    private router: Router\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    let currentTeamId = this.globalService.currentTeamId;\r\n    if (!currentTeamId) {\r\n      currentTeamId = this.route.parent?.snapshot.paramMap.get('teamId') || '';\r\n      this.globalService.currentTeamId = currentTeamId;\r\n    }\r\n    this.teamId = currentTeamId;\r\n    this.getProjectListByTeamId();\r\n  }\r\n\r\n  openProjectCreatorDialog() {\r\n    const dialogRef = this.dialog.open(ProjectCreatorComponent, {\r\n      autoFocus: false,\r\n      width: '40rem'\r\n    });\r\n    dialogRef.afterClosed().subscribe(result => {\r\n      if (result && result.isCreateProjectSuccess) {\r\n        this.getProjectListByTeamId();\r\n      }\r\n    });\r\n  }\r\n\r\n  getProjectListByTeamId() {\r\n    this.projectService.getProjectListByTeamId(this.teamId).subscribe(resp => {\r\n      this.projectList = resp.data;\r\n    });\r\n  }\r\n\r\n  routeToProjectDetail(e: Project) {\r\n    this.router.navigate([`projects/${e.id}`]);\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n  display: block;\r\n}\r\n\r\n.project-list-container{\r\n  margin: 1rem 0;\r\n}",
                    "styleUrl": "./team-projects.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "dialog",
                        "type": "MatDialog"
                    },
                    {
                        "name": "projectService",
                        "type": "ProjectService"
                    },
                    {
                        "name": "globalService",
                        "type": "GlobalService"
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "projectService",
                        "type": "ProjectService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "globalService",
                        "type": "GlobalService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<h3 class=\"mat-h3\">项目列表</h3>\n<div class=\"project-list-container\">\n    <kanpm-project-list-item *ngFor=\"let project of projectList\" [project]=\"project\"\n        (projectClick)=\"routeToProjectDetail($event)\">\n    </kanpm-project-list-item>\n</div>\n<button (click)=\"openProjectCreatorDialog()\" mat-raised-button color=\"primary\">新建项目</button>"
        },
        {
            "name": "TeamRootComponent",
            "id": "component-TeamRootComponent-43da3365a37ecf1d2471505dfadc763f",
            "file": "src/app/pages/team/team-root/team-root.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "styleUrls": [
                "./team-root.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./team-root.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "collaborators",
                    "defaultValue": "[]",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "relevantNavs",
                    "defaultValue": "[\r\n    { name: '首页', icon: 'home' },\r\n    { name: '我执行的', icon: 'how_to_reg' },\r\n    { name: '我参与的', icon: 'person_add' },\r\n    { name: '我创建的', icon: 'post_add' },\r\n  ]",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "teamId",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute, ParamMap } from '@angular/router';\r\nimport { GlobalService } from 'core/services/global.service';\r\nimport { TeamService } from 'core/services/team.service';\r\n\r\n@Component({\r\n  templateUrl: './team-root.component.html',\r\n  styleUrls: ['./team-root.component.scss']\r\n})\r\nexport class TeamRootComponent implements OnInit {\r\n\r\n  private teamId?: string;\r\n\r\n  constructor(\r\n    private route: ActivatedRoute,\r\n    private teamService: TeamService,\r\n    private globalService: GlobalService\r\n  ) { }\r\n\r\n  relevantNavs = [\r\n    { name: '首页', icon: 'home' },\r\n    { name: '我执行的', icon: 'how_to_reg' },\r\n    { name: '我参与的', icon: 'person_add' },\r\n    { name: '我创建的', icon: 'post_add' },\r\n  ];\r\n\r\n  collaborators = [];\r\n\r\n  ngOnInit(): void {\r\n    // FIXME 用路由参数跳转\r\n    // const teamId = this.route.snapshot.paramMap.get('teamId');\r\n    // this.globalService.currentTeamId = teamId;\r\n    // this.globalService.currentTeam$ = this.teamService.getTeam(teamId);\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n  display: block;\r\n  height: 100%;\r\n}\r\n\r\n.group-side-container {\r\n  height: 100%;\r\n}\r\n\r\n.side-nav-wrapper {\r\n  padding: 0 60px 40px;\r\n}\r\n\r\n.side-nav-section {\r\n  padding-top: 40px;\r\n  width: 176px;\r\n\r\n  li {\r\n    display: block;\r\n    width: 100%;\r\n  }\r\n\r\n  header {\r\n    padding-left: 16px;\r\n  }\r\n\r\n\r\n  .nav-item-wrapper {\r\n    display: flex;\r\n    align-items: center;\r\n    padding: 10px 16px;\r\n    height: 40px;\r\n    box-sizing: border-box;\r\n    cursor: pointer;\r\n    border-radius: 4px;\r\n\r\n    .name {\r\n      flex: 1;\r\n      margin-left: 12px;\r\n    }\r\n  }\r\n\r\n}\r\n\r\n.group-content-container {\r\n  box-sizing: border-box;\r\n  padding: 40px 40px 0;\r\n}\r\n",
                    "styleUrl": "./team-root.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute"
                    },
                    {
                        "name": "teamService",
                        "type": "TeamService"
                    },
                    {
                        "name": "globalService",
                        "type": "GlobalService"
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "teamService",
                        "type": "TeamService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "globalService",
                        "type": "GlobalService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<mat-sidenav-container class=\"group-side-container\">\r\n  <mat-sidenav mode=\"side\" opened class=\"side-nav-wrapper\">\r\n    <section class=\"side-nav-section\">\r\n      <nav>\r\n        <ul>\r\n          <li *ngFor=\"let relevant of relevantNavs\">\r\n            <div class=\"nav-item-wrapper\">\r\n              <mat-icon>{{relevant.icon}}</mat-icon>\r\n              <span class=\"name mat-body-strong\">{{relevant.name}}</span>\r\n            </div>\r\n          </li>\r\n        </ul>\r\n      </nav>\r\n    </section>\r\n    <!-- <section class=\"side-nav-section\">\r\n      <header>项目</header>\r\n      <nav>\r\n        <ul>\r\n          <li *ngFor=\"let project of projects\">\r\n            <div class=\"nav-item-wrapper\" routerLink=\"/project/{{project.id}}\">\r\n              <mat-icon>folder_open</mat-icon>\r\n              <span class=\"name mat-body-strong\">{{project?.projectName}}</span>\r\n            </div>\r\n          </li>\r\n        </ul>\r\n      </nav>\r\n    </section> -->\r\n    <section class=\"side-nav-section\">\r\n      <header>团队成员</header>\r\n      <nav>\r\n        <ul>\r\n          <li *ngFor=\"let collaborator of collaborators\">\r\n            <div class=\"nav-item-wrapper\">\r\n              <mat-icon>person</mat-icon>\r\n              <span class=\"name mat-body-strong\">{{collaborator.name}}</span>\r\n            </div>\r\n          </li>\r\n        </ul>\r\n      </nav>\r\n    </section>\r\n  </mat-sidenav>\r\n  <mat-sidenav-content class=\"group-content-container\">\r\n    <router-outlet></router-outlet>\r\n  </mat-sidenav-content>\r\n</mat-sidenav-container>\r\n"
        },
        {
            "name": "TeamSelectComponent",
            "id": "component-TeamSelectComponent-da650aff160a68ca30eb802c7186423e",
            "file": "src/app/pages/team/team-select/team-select.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "styleUrls": [
                "./team-select.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./team-select.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "teams",
                    "defaultValue": "[]",
                    "type": "Team[]",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methodsClass": [
                {
                    "name": "enterTeam",
                    "args": [
                        {
                            "name": "team",
                            "type": "Team"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "jsdoctags": [
                        {
                            "name": "team",
                            "type": "Team",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTeamList",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24
                },
                {
                    "name": "openTeamCreatorDialog",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { Router } from '@angular/router';\r\nimport { GlobalService } from 'core/services/global.service';\r\nimport { TeamService } from 'core/services/team.service';\r\nimport { Team } from 'core/types/team';\r\nimport { TeamCreatorComponent } from 'shared/components/team-creator/team-creator.component';\r\n\r\n@Component({\r\n  templateUrl: './team-select.component.html',\r\n  styleUrls: ['./team-select.component.scss']\r\n})\r\nexport class TeamSelectComponent implements OnInit {\r\n\r\n  teams: Team[] = [];\r\n\r\n  constructor(\r\n    private dialog: MatDialog,\r\n    private globalService: GlobalService,\r\n    private teamService: TeamService,\r\n    private router: Router\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.getTeamList();\r\n  }\r\n\r\n  getTeamList() {\r\n    const currentUserId = this.globalService.currentUser?.id;\r\n    if (!currentUserId) { return; }\r\n    this.teamService.getTeamListByMemberId(currentUserId).subscribe((resp: any) => {\r\n      this.teams = resp.data;\r\n    });\r\n  }\r\n\r\n  openTeamCreatorDialog() {\r\n    const dialogRef = this.dialog.open(TeamCreatorComponent, {\r\n      autoFocus: false,\r\n      width: '40rem'\r\n    });\r\n    dialogRef.afterClosed().subscribe(result => {\r\n      if (result && result.isCreateTeamSuccess) {\r\n        this.getTeamList();\r\n      }\r\n    });\r\n  }\r\n\r\n  enterTeam(team: Team) {\r\n    this.globalService.currentTeamId = team.id;\r\n    this.router.navigate([`/team/${team.id}`]);\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n  display: block;\r\n  height: 100%;\r\n}\r\n\r\n.select-layout-wrapper {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  height: 100%;\r\n  padding-bottom: 65px;\r\n}\r\n\r\n.team-select-wrapper {\r\n  width: 650px;\r\n\r\n  .create-team-button {\r\n    width: 100%;\r\n    margin: 20px 0;\r\n  }\r\n}\r\n",
                    "styleUrl": "./team-select.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "dialog",
                        "type": "MatDialog"
                    },
                    {
                        "name": "globalService",
                        "type": "GlobalService"
                    },
                    {
                        "name": "teamService",
                        "type": "TeamService"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "globalService",
                        "type": "GlobalService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "teamService",
                        "type": "TeamService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"select-layout-wrapper\">\r\n    <div class=\"team-select-wrapper\">\r\n        <h1>选择团队</h1>\r\n        <mat-divider></mat-divider>\r\n        <mat-nav-list>\r\n            <mat-list-item *ngFor=\"let team of teams\" (click)=\"enterTeam(team)\">\r\n                <img matListAvatar src=\"http://placekitten.com/50/50\">\r\n                <span matLine> {{team.teamName }}</span>\r\n                <mat-icon>input</mat-icon>\r\n            </mat-list-item>\r\n        </mat-nav-list>\r\n        <button class=\"create-team-button\" mat-raised-button color=\"primary\"\r\n            (click)=\"openTeamCreatorDialog()\">创建团队</button>\r\n    </div>\r\n</div>"
        },
        {
            "name": "ThemePickerComponent",
            "id": "component-ThemePickerComponent-fbbc4050182da99d05282d39c18f0057",
            "file": "src/app/shared/components/theme-picker/theme-picker.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "kanpm-theme-picker",
            "styleUrls": [
                "./theme-picker.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./theme-picker.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "currentTheme",
                    "type": "DocsSiteTheme",
                    "optional": true,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "darkModeThemeKey",
                    "defaultValue": "'kanpm-storage-is-dark-mode'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "isDarkMode",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "storageThemeKey",
                    "defaultValue": "'kanpm-storage-current-theme-name'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "styleManager",
                    "type": "StyleManagerService",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "themes",
                    "defaultValue": "[\r\n    {\r\n      primary: '#3F51B5',\r\n      accent: '#E91E63',\r\n      displayName: 'Indigo & Pink',\r\n      name: 'indigo-pink',\r\n      isDark: false,\r\n      isDefault: true,\r\n    },\r\n    {\r\n      primary: '#8BC34A',\r\n      accent: '#FFC107',\r\n      displayName: 'Light-green & Amber',\r\n      name: 'light-green-orange',\r\n      isDark: true,\r\n    }\r\n  ]",
                    "type": "DocsSiteTheme[]",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methodsClass": [
                {
                    "name": "darkModeSwitch",
                    "args": [
                        {
                            "name": "isDarkMode",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "jsdoctags": [
                        {
                            "name": "isDarkMode",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41
                },
                {
                    "name": "selectTheme",
                    "args": [
                        {
                            "name": "themeName",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 64,
                    "jsdoctags": [
                        {
                            "name": "themeName",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, ChangeDetectionStrategy } from '@angular/core';\r\nimport { DocsSiteTheme, LocalStorageService } from 'core/services/localstorage.service';\r\nimport { StyleManagerService } from 'core/services/style-manager/style-manager.service';\r\n\r\n@Component({\r\n  selector: 'kanpm-theme-picker',\r\n  templateUrl: './theme-picker.component.html',\r\n  styleUrls: ['./theme-picker.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class ThemePickerComponent implements OnInit {\r\n\r\n  private storageThemeKey = 'kanpm-storage-current-theme-name';\r\n  private darkModeThemeKey = 'kanpm-storage-is-dark-mode';\r\n\r\n  currentTheme?: DocsSiteTheme;\r\n  isDarkMode = false;\r\n  themes: DocsSiteTheme[] = [\r\n    {\r\n      primary: '#3F51B5',\r\n      accent: '#E91E63',\r\n      displayName: 'Indigo & Pink',\r\n      name: 'indigo-pink',\r\n      isDark: false,\r\n      isDefault: true,\r\n    },\r\n    {\r\n      primary: '#8BC34A',\r\n      accent: '#FFC107',\r\n      displayName: 'Light-green & Amber',\r\n      name: 'light-green-orange',\r\n      isDark: true,\r\n    }\r\n  ];\r\n\r\n  constructor(\r\n    public styleManager: StyleManagerService,\r\n    private themeStorage: LocalStorageService\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    const currentThemeName = this.themeStorage.getValue(this.storageThemeKey);\r\n    let isDarkMode = this.themeStorage.getValue(this.darkModeThemeKey);\r\n    if (currentThemeName) {\r\n      this.selectTheme(currentThemeName);\r\n    }\r\n    isDarkMode = JSON.parse(isDarkMode);\r\n    if (isDarkMode) {\r\n      this.darkModeSwitch(isDarkMode);\r\n    }\r\n  }\r\n\r\n  darkModeSwitch(isDarkMode: boolean): void {\r\n    this.isDarkMode = isDarkMode;\r\n    const body = document.getElementsByTagName('body')[0];\r\n    if (this.isDarkMode) {\r\n      body.classList.add('dark-theme');\r\n    } else {\r\n      body.classList.remove('dark-theme');\r\n    }\r\n    this.themeStorage.storeValue(this.darkModeThemeKey, isDarkMode);\r\n  }\r\n\r\n  selectTheme(themeName: string) {\r\n    const theme = this.themes.find(currentTheme => currentTheme.name === themeName);\r\n\r\n    if (!theme) {\r\n      return;\r\n    }\r\n\r\n    this.currentTheme = theme;\r\n\r\n    if (theme.isDefault) {\r\n      this.styleManager.removeStyle('theme');\r\n    } else {\r\n      this.styleManager.setStyle('theme', `themes/${theme.name}.css`);\r\n    }\r\n\r\n    this.themeStorage.storeValue(this.storageThemeKey, themeName);\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n  display: block;\r\n}\r\n\r\n.theme-picker-container {\r\n  display: flex;\r\n  align-items: center;\r\n  margin: 0 5px;\r\n}\r\n\r\n.theme-picker-button {\r\n  cursor: pointer;\r\n  height: 18px;\r\n  width: 18px;\r\n  font-size: 18px;\r\n}\r\n\r\n.dark-mode-toggle{\r\n  margin: 5px 15px;\r\n}\r\n",
                    "styleUrl": "./theme-picker.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "styleManager",
                        "type": "StyleManagerService"
                    },
                    {
                        "name": "themeStorage",
                        "type": "LocalStorageService"
                    }
                ],
                "line": 34,
                "jsdoctags": [
                    {
                        "name": "styleManager",
                        "type": "StyleManagerService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "themeStorage",
                        "type": "LocalStorageService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"theme-picker-container \">\r\n  <mat-icon class=\"theme-picker-button\" [mat-menu-trigger-for]=\"themeMenu\">format_color_fill</mat-icon>\r\n</div>\r\n\r\n<mat-menu #themeMenu>\r\n  <mat-slide-toggle [(ngModel)]=\"isDarkMode\" class=\"dark-mode-toggle\" (change)=\"darkModeSwitch($event.checked)\">Slide me!\r\n  </mat-slide-toggle>\r\n  <mat-divider></mat-divider>\r\n  <button mat-menu-item *ngFor=\"let theme of themes\" (click)=\"selectTheme(theme.name)\">\r\n    <span>{{theme.displayName}}</span>\r\n  </button>\r\n</mat-menu>"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        },
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AuthenticationModule"
                        },
                        {
                            "name": "ProjectModule"
                        },
                        {
                            "name": "TeamModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AuthenticationModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AuthenticationRootComponent"
                        },
                        {
                            "name": "RegisterComponent"
                        },
                        {
                            "name": "SignInComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AuthenticationRoutingModule"
                        },
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "AuthenticationRootComponent"
                        },
                        {
                            "name": "RegisterComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AuthenticationRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ComponentsModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AvatarComponent"
                        },
                        {
                            "name": "ProjectCreatorComponent"
                        },
                        {
                            "name": "ProjectListItemComponent"
                        },
                        {
                            "name": "TaskCardComponent"
                        },
                        {
                            "name": "TaskDetailComponent"
                        },
                        {
                            "name": "TaskListItemComponent"
                        },
                        {
                            "name": "TaskStackComponent"
                        },
                        {
                            "name": "TeamCreatorComponent"
                        },
                        {
                            "name": "ThemePickerComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "MaterialModule"
                        },
                        {
                            "name": "ZorroModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "AvatarComponent"
                        },
                        {
                            "name": "ProjectCreatorComponent"
                        },
                        {
                            "name": "ProjectListItemComponent"
                        },
                        {
                            "name": "TaskCardComponent"
                        },
                        {
                            "name": "TaskDetailComponent"
                        },
                        {
                            "name": "TaskListItemComponent"
                        },
                        {
                            "name": "TaskStackComponent"
                        },
                        {
                            "name": "TeamCreatorComponent"
                        },
                        {
                            "name": "ThemePickerComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "GroupRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "MaterialModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ProjectModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ProjectRootComponent"
                        },
                        {
                            "name": "ProjectTasksComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ProjectRoutingModule"
                        },
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ProjectRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SharedModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "MaterialModule"
                        },
                        {
                            "name": "ZorroModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "MaterialModule"
                        },
                        {
                            "name": "ZorroModule"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TeamModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "TeamHomeComponent"
                        },
                        {
                            "name": "TeamProjectsComponent"
                        },
                        {
                            "name": "TeamRootComponent"
                        },
                        {
                            "name": "TeamSelectComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "GroupRoutingModule"
                        },
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ZorroModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "basicInfo",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/task-card/task-card.component.stories.ts",
                "type": "any",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "CODE_MESSAGE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/interceptors/response.interceptor.ts",
                "type": "",
                "defaultValue": "new Map([\r\n    [200, '服务器成功返回请求的数据'],\r\n    [201, '新建或修改数据成功'],\r\n    [202, '请求已经进入后台排队（异步任务）'],\r\n    [204, '删除数据成功'],\r\n    [400, '发出的请求有错误，服务器没有进行新建或修改数据的操作'],\r\n    [401, '用户没有权限（令牌、用户名、密码错误）'],\r\n    [403, '用户得到授权，但是访问是被禁止的'],\r\n    [404, '发出的请求针对的是不存在的记录，服务器没有进行操作'],\r\n    [406, '请求的格式不可得'],\r\n    [410, '请求的资源被永久删除，且不会再得到的'],\r\n    [422, '当创建对象时，发生一个验证错误'],\r\n    [500, '服务器发生错误，请检查服务器'],\r\n    [502, '网关错误'],\r\n    [503, '服务不可用，服务器暂时过载或维护'],\r\n    [504, '网关超时'],\r\n])"
            },
            {
                "name": "completeTask",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/task-card/task-card.component.stories.ts",
                "type": "any",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "defaultStatus",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/task-stack/task-stack.component.stories.ts",
                "type": "any",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "defaultTasksData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/task-card/task-card.component.stories.ts",
                "type": "object",
                "defaultValue": "{\n    description: `test: description about this task`,\n}"
            },
            {
                "name": "defaultTasksListData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/task-stack/task-stack.component.stories.ts",
                "type": "[]",
                "defaultValue": "[\n    { ...defaultTasksData, isComplete: true, id: '1', title: 'Task 1' },\n    { ...defaultTasksData, id: '2', title: 'Task 2' },\n]"
            },
            {
                "name": "empty",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/task-stack/task-stack.component.stories.ts",
                "type": "any",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "type": "object",
                "defaultValue": "{\r\n  SERVER_URL: 'http://localhost:8080/',\r\n  production: false\r\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "type": "object",
                "defaultValue": "{\r\n  SERVER_URL: '/',\r\n  production: true\r\n}"
            },
            {
                "name": "fullInfo",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/task-detail/task-detail.component.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "fullInfo",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/task-card/task-card.component.stories.ts",
                "type": "any",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "httpInterceptorProviders",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/interceptors/index.ts",
                "type": "[]",
                "defaultValue": "[\r\n    // { provide: HTTP_INTERCEPTORS, useClass: RequestInterceptor, multi: true },\r\n    { provide: HTTP_INTERCEPTORS, useClass: ResponseInterceptor, multi: true },\r\n]",
                "description": "<p>Http interceptor providers in outside-in order </p>\n"
            },
            {
                "name": "isLoading",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/task-stack/task-stack.component.stories.ts",
                "type": "any",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "MaterialModules",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/third-parties/material.module.ts",
                "type": "[]",
                "defaultValue": "[\n  MatSidenavModule,\n  MatButtonModule,\n  MatIconModule,\n  MatMenuModule,\n  MatCheckboxModule,\n  MatTabsModule,\n  MatDividerModule,\n  MatChipsModule,\n  MatToolbarModule,\n  MatCardModule,\n  DragDropModule,\n  MatInputModule,\n  MatDialogModule,\n  MatListModule,\n  MatPaginatorModule,\n  MatSlideToggleModule,\n  MatProgressSpinnerModule,\n  MatSnackBarModule\n]"
            },
            {
                "name": "overflowStatus",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/task-stack/task-stack.component.stories.ts",
                "type": "any",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "type": "literal type"
            },
            {
                "name": "SharedComponents",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/components.modules.ts",
                "type": "[]",
                "defaultValue": "[\n    ThemePickerComponent,\n    TaskListItemComponent,\n    ProjectListItemComponent,\n    TaskCardComponent,\n    TaskDetailComponent,\n    AvatarComponent,\n    TeamCreatorComponent,\n    ProjectCreatorComponent,\n    TaskStackComponent\n]"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/task-detail/task-detail.component.stories.ts",
                "type": "",
                "defaultValue": "(args: TaskDetailComponent) => ({\r\n    component: TaskDetailComponent,\r\n    props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/task-card/task-card.component.stories.ts",
                "type": "",
                "defaultValue": "(args: TaskCardComponent) => ({\n    props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/task-stack/task-stack.component.stories.ts",
                "type": "",
                "defaultValue": "(args: TaskStackComponent) => ({\n    props: args\n})"
            },
            {
                "name": "ZorroModules",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/third-parties/zorro.module.ts",
                "type": "[]",
                "defaultValue": "[\n    NzAvatarModule,\n    NzIconModule,\n    NzDividerModule,\n    NzTagModule,\n    NzCommentModule\n]"
            }
        ],
        "functions": [
            {
                "name": "createLinkElementWithKey",
                "file": "src/app/core/services/style-manager/style-manager.service.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "key"
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "key",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getExistingLinkElementByKey",
                "file": "src/app/core/services/style-manager/style-manager.service.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "key"
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "key",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getLinkElementForKey",
                "file": "src/app/core/services/style-manager/style-manager.service.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "key"
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "key",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        ],
        "typealiases": [],
        "enumerations": [
            {
                "name": "TaskRepeat",
                "childs": [],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "description": "",
                "file": "src/app/core/types/task.ts"
            }
        ],
        "groupedVariables": {
            "src/app/shared/components/task-card/task-card.component.stories.ts": [
                {
                    "name": "basicInfo",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/task-card/task-card.component.stories.ts",
                    "type": "any",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "completeTask",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/task-card/task-card.component.stories.ts",
                    "type": "any",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "defaultTasksData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/task-card/task-card.component.stories.ts",
                    "type": "object",
                    "defaultValue": "{\n    description: `test: description about this task`,\n}"
                },
                {
                    "name": "fullInfo",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/task-card/task-card.component.stories.ts",
                    "type": "any",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/task-card/task-card.component.stories.ts",
                    "type": "",
                    "defaultValue": "(args: TaskCardComponent) => ({\n    props: args,\n})"
                }
            ],
            "src/app/core/interceptors/response.interceptor.ts": [
                {
                    "name": "CODE_MESSAGE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/interceptors/response.interceptor.ts",
                    "type": "",
                    "defaultValue": "new Map([\r\n    [200, '服务器成功返回请求的数据'],\r\n    [201, '新建或修改数据成功'],\r\n    [202, '请求已经进入后台排队（异步任务）'],\r\n    [204, '删除数据成功'],\r\n    [400, '发出的请求有错误，服务器没有进行新建或修改数据的操作'],\r\n    [401, '用户没有权限（令牌、用户名、密码错误）'],\r\n    [403, '用户得到授权，但是访问是被禁止的'],\r\n    [404, '发出的请求针对的是不存在的记录，服务器没有进行操作'],\r\n    [406, '请求的格式不可得'],\r\n    [410, '请求的资源被永久删除，且不会再得到的'],\r\n    [422, '当创建对象时，发生一个验证错误'],\r\n    [500, '服务器发生错误，请检查服务器'],\r\n    [502, '网关错误'],\r\n    [503, '服务不可用，服务器暂时过载或维护'],\r\n    [504, '网关超时'],\r\n])"
                }
            ],
            "src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "type": "literal type"
                }
            ],
            "src/app/shared/components/task-stack/task-stack.component.stories.ts": [
                {
                    "name": "defaultStatus",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/task-stack/task-stack.component.stories.ts",
                    "type": "any",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "defaultTasksListData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/task-stack/task-stack.component.stories.ts",
                    "type": "[]",
                    "defaultValue": "[\n    { ...defaultTasksData, isComplete: true, id: '1', title: 'Task 1' },\n    { ...defaultTasksData, id: '2', title: 'Task 2' },\n]"
                },
                {
                    "name": "empty",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/task-stack/task-stack.component.stories.ts",
                    "type": "any",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "isLoading",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/task-stack/task-stack.component.stories.ts",
                    "type": "any",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "overflowStatus",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/task-stack/task-stack.component.stories.ts",
                    "type": "any",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/task-stack/task-stack.component.stories.ts",
                    "type": "",
                    "defaultValue": "(args: TaskStackComponent) => ({\n    props: args\n})"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "type": "object",
                    "defaultValue": "{\r\n  SERVER_URL: 'http://localhost:8080/',\r\n  production: false\r\n}"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "type": "object",
                    "defaultValue": "{\r\n  SERVER_URL: '/',\r\n  production: true\r\n}"
                }
            ],
            "src/app/shared/components/task-detail/task-detail.component.stories.ts": [
                {
                    "name": "fullInfo",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/task-detail/task-detail.component.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/task-detail/task-detail.component.stories.ts",
                    "type": "",
                    "defaultValue": "(args: TaskDetailComponent) => ({\r\n    component: TaskDetailComponent,\r\n    props: args,\r\n})"
                }
            ],
            "src/app/core/interceptors/index.ts": [
                {
                    "name": "httpInterceptorProviders",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/interceptors/index.ts",
                    "type": "[]",
                    "defaultValue": "[\r\n    // { provide: HTTP_INTERCEPTORS, useClass: RequestInterceptor, multi: true },\r\n    { provide: HTTP_INTERCEPTORS, useClass: ResponseInterceptor, multi: true },\r\n]",
                    "description": "<p>Http interceptor providers in outside-in order </p>\n"
                }
            ],
            "src/app/shared/third-parties/material.module.ts": [
                {
                    "name": "MaterialModules",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/third-parties/material.module.ts",
                    "type": "[]",
                    "defaultValue": "[\n  MatSidenavModule,\n  MatButtonModule,\n  MatIconModule,\n  MatMenuModule,\n  MatCheckboxModule,\n  MatTabsModule,\n  MatDividerModule,\n  MatChipsModule,\n  MatToolbarModule,\n  MatCardModule,\n  DragDropModule,\n  MatInputModule,\n  MatDialogModule,\n  MatListModule,\n  MatPaginatorModule,\n  MatSlideToggleModule,\n  MatProgressSpinnerModule,\n  MatSnackBarModule\n]"
                }
            ],
            "src/app/shared/components/components.modules.ts": [
                {
                    "name": "SharedComponents",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/components.modules.ts",
                    "type": "[]",
                    "defaultValue": "[\n    ThemePickerComponent,\n    TaskListItemComponent,\n    ProjectListItemComponent,\n    TaskCardComponent,\n    TaskDetailComponent,\n    AvatarComponent,\n    TeamCreatorComponent,\n    ProjectCreatorComponent,\n    TaskStackComponent\n]"
                }
            ],
            "src/app/shared/third-parties/zorro.module.ts": [
                {
                    "name": "ZorroModules",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/third-parties/zorro.module.ts",
                    "type": "[]",
                    "defaultValue": "[\n    NzAvatarModule,\n    NzIconModule,\n    NzDividerModule,\n    NzTagModule,\n    NzCommentModule\n]"
                }
            ]
        },
        "groupedFunctions": {
            "src/app/core/services/style-manager/style-manager.service.ts": [
                {
                    "name": "createLinkElementWithKey",
                    "file": "src/app/core/services/style-manager/style-manager.service.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "key"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "key",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getExistingLinkElementByKey",
                    "file": "src/app/core/services/style-manager/style-manager.service.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "key"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "key",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getLinkElementForKey",
                    "file": "src/app/core/services/style-manager/style-manager.service.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "key"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "key",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {
            "src/app/core/types/task.ts": [
                {
                    "name": "TaskRepeat",
                    "childs": [],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "description": "",
                    "file": "src/app/core/types/task.ts"
                }
            ]
        },
        "groupedTypeAliases": {}
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/pages/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": [
                    {
                        "path": "",
                        "redirectTo": "authentication/sign-in",
                        "pathMatch": "full"
                    }
                ],
                "kind": "module"
            },
            {
                "name": "routes",
                "filename": "src/app/pages/authentication/authentication-routing.module.ts",
                "module": "AuthenticationRoutingModule",
                "children": [
                    {
                        "path": "authentication",
                        "redirectTo": "authentication/sign-in",
                        "pathMatch": "full"
                    },
                    {
                        "path": "authentication",
                        "component": "AuthenticationRootComponent",
                        "children": [
                            {
                                "path": "sign-in",
                                "component": "SignInComponent"
                            },
                            {
                                "path": "register",
                                "component": "RegisterComponent"
                            }
                        ]
                    }
                ],
                "kind": "module"
            },
            {
                "name": "routes",
                "filename": "src/app/pages/project/project-routing.module.ts",
                "module": "ProjectRoutingModule",
                "children": [
                    {
                        "path": "projects/:id",
                        "component": "ProjectRootComponent",
                        "canLoad": [
                            "AuthGuard",
                            "ProjectIdGuard"
                        ],
                        "children": [
                            {
                                "path": "",
                                "redirectTo": "tasks",
                                "pathMatch": "full"
                            },
                            {
                                "path": "tasks",
                                "component": "ProjectTasksComponent"
                            }
                        ]
                    }
                ],
                "kind": "module"
            },
            {
                "name": "routes",
                "filename": "src/app/pages/team/team-routing.module.ts",
                "module": "GroupRoutingModule",
                "children": [
                    {
                        "path": "team/:teamId",
                        "component": "TeamRootComponent",
                        "canActivate": [
                            "AuthGuard"
                        ],
                        "children": [
                            {
                                "path": "",
                                "redirectTo": "projects",
                                "pathMatch": "full"
                            },
                            {
                                "path": "home",
                                "component": "TeamHomeComponent"
                            },
                            {
                                "path": "projects",
                                "component": "TeamProjectsComponent"
                            }
                        ]
                    },
                    {
                        "path": "teamSelect",
                        "component": "TeamSelectComponent",
                        "canActivate": [
                            "AuthGuard"
                        ]
                    }
                ],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 1,
        "status": "low",
        "files": [
            {
                "filePath": "e2e/src/app.po.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AppPage",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/core/guards/auth.guard.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "AuthGuard",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/guards/project-id.guard.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "ProjectIdGuard",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/interceptors/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "httpInterceptorProviders",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "src/app/core/interceptors/mock.interceptor.ts",
                "type": "interceptor",
                "linktype": "interceptor",
                "name": "MockInterceptor",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/interceptors/request.interceptor.ts",
                "type": "interceptor",
                "linktype": "interceptor",
                "name": "RequestInterceptor",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/core/interceptors/response.interceptor.ts",
                "type": "interceptor",
                "linktype": "interceptor",
                "name": "ResponseInterceptor",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/core/interceptors/response.interceptor.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CODE_MESSAGE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/authentication.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AuthenticationService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/global.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "GlobalService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/loader.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "LoaderService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/localstorage.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "LocalStorageService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/localstorage.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DocsSiteTheme",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/message.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "MessageService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/project.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ProjectService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/style-manager/style-manager.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "StyleManagerService",
                "coveragePercent": 33,
                "coverageCount": "1/3",
                "status": "medium"
            },
            {
                "filePath": "src/app/core/services/style-manager/style-manager.service.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "createLinkElementWithKey",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/style-manager/style-manager.service.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "getExistingLinkElementByKey",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/style-manager/style-manager.service.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "getLinkElementForKey",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/task-api.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TaskApi",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/task-stack.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TaskStackService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/team.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TeamService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/user.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "UserService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/types/common.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "LinkedListElement",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/types/project.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Project",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/core/types/response.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ServerResponse",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/types/signUpRequest.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SignUpRequest",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/core/types/task.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Comment",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/core/types/task.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MentionedFlag",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/types/task.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Tag",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/types/task.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Task",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/core/types/task.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TaskGroup",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/types/task.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TaskStack",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/core/types/team.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Team",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/core/types/user.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/authentication/authentication-root/authentication-root.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AuthenticationRootComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/authentication/register/register.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RegisterComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/authentication/sign-in/sign-in.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SignInComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/project/project-root/project-root.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ProjectRootComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/project/project-tasks/project-tasks.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ProjectTasksComponent",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/team/team-home/team-home.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TeamHomeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/team/team-projects/team-projects.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TeamProjectsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/team/team-root/team-root.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TeamRootComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/team/team-select/team-select.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TeamSelectComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/avatar/avatar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AvatarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/components.modules.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SharedComponents",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/project-creator/project-creator.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ProjectCreatorComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/project-list-item/project-list-item.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ProjectListItemComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/task-card/task-card.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "basicInfo",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/task-card/task-card.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "completeTask",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/task-card/task-card.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "defaultTasksData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/task-card/task-card.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "fullInfo",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/task-card/task-card.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/task-card/task-card.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TaskCardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/task-detail/task-detail.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "fullInfo",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/task-detail/task-detail.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/task-detail/task-detail.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TaskDetailComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/task-list-item/task-list-item.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TaskListItemComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/task-stack/task-stack.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "defaultStatus",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/task-stack/task-stack.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "defaultTasksListData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/task-stack/task-stack.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "empty",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/task-stack/task-stack.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "isLoading",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/task-stack/task-stack.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "overflowStatus",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/task-stack/task-stack.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/task-stack/task-stack.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TaskStackComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/team-creator/team-creator.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TeamCreatorComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/theme-picker/theme-picker.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ThemePickerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/third-parties/material.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MaterialModules",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/third-parties/zorro.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ZorroModules",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}