{
    "pipes": [],
    "interfaces": [
        {
            "name": "Comment",
            "id": "interface-Comment-bcbb476f3890b9a5e81d5f4d9e06396d",
            "file": "src/app/core/types/task.ts",
            "type": "interface",
            "sourceCode": "interface MentionedFlag {\r\n    type: 'file' | 'task' | 'collaborator';\r\n    id: string;\r\n    label: string;\r\n}\r\n\r\nexport interface TaskGroup {\r\n    id: string;\r\n    groupName: string;\r\n}\r\n\r\nexport interface TaskList {\r\n    id: string;\r\n    listName: string;\r\n    taskCount: number;\r\n    completedTaskCount: number;\r\n    index: number;\r\n}\r\n\r\nexport interface Task {\r\n    id: string;\r\n    isComplete: boolean;\r\n    subTasks: Task[];\r\n    priority: 'high' | 'normal' | 'low';\r\n    description: string;\r\n    principalUserId: string;\r\n    endTime: number;\r\n    repeat: 'daily' | 'workday' | 'weekly' | 'monthly' | 'yearly';\r\n    remindTime: number;\r\n    remark: string;\r\n    attachments: string[];\r\n    tags: number[];\r\n    createdTime: number;\r\n    completedTime: number;\r\n    collaboratorsId: string[];\r\n}\r\n\r\nexport enum TaskRepeat {\r\n\r\n}\r\n\r\nexport interface Tag {\r\n    id: number;\r\n    name: string;\r\n    color: string;\r\n}\r\n\r\nexport interface Comment {\r\n    id: string;\r\n    taskId: string;\r\n    creatorId: string;\r\n    content: string;\r\n    createdTime: number;\r\n    mentionedFlags: MentionedFlag[];\r\n}\r\n",
            "properties": [
                {
                    "name": "content",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 52
                },
                {
                    "name": "createdTime",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 53
                },
                {
                    "name": "creatorId",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 51
                },
                {
                    "name": "id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "mentionedFlags",
                    "type": "MentionedFlag[]",
                    "optional": false,
                    "description": "",
                    "line": 54
                },
                {
                    "name": "taskId",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 50
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "DocsSiteTheme",
            "id": "interface-DocsSiteTheme-bd861e397ec8c4da7cb902daf2487fbe",
            "file": "src/app/core/services/localstorage.service.ts",
            "type": "interface",
            "sourceCode": "import { Injectable, EventEmitter } from '@angular/core';\r\n\r\nexport interface DocsSiteTheme {\r\n  name: string;\r\n  displayName?: string;\r\n  accent: string;\r\n  primary: string;\r\n  isDark?: boolean;\r\n  isDefault?: boolean;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class LocalStorageService {\r\n\r\n  storeValue(key: string, value: any) {\r\n    try {\r\n      window.localStorage[key] = value;\r\n    } catch { }\r\n  }\r\n\r\n  getValue(key: string): any {\r\n    try {\r\n      return window.localStorage[key] || null;\r\n    } catch {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  remove(key: string) {\r\n    try {\r\n      window.localStorage.removeItem(key);\r\n    } catch { }\r\n  }\r\n\r\n}\r\n",
            "properties": [
                {
                    "name": "accent",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "displayName",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "isDark",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "isDefault",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "primary",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "MentionedFlag",
            "id": "interface-MentionedFlag-bcbb476f3890b9a5e81d5f4d9e06396d",
            "file": "src/app/core/types/task.ts",
            "type": "interface",
            "sourceCode": "interface MentionedFlag {\r\n    type: 'file' | 'task' | 'collaborator';\r\n    id: string;\r\n    label: string;\r\n}\r\n\r\nexport interface TaskGroup {\r\n    id: string;\r\n    groupName: string;\r\n}\r\n\r\nexport interface TaskList {\r\n    id: string;\r\n    listName: string;\r\n    taskCount: number;\r\n    completedTaskCount: number;\r\n    index: number;\r\n}\r\n\r\nexport interface Task {\r\n    id: string;\r\n    isComplete: boolean;\r\n    subTasks: Task[];\r\n    priority: 'high' | 'normal' | 'low';\r\n    description: string;\r\n    principalUserId: string;\r\n    endTime: number;\r\n    repeat: 'daily' | 'workday' | 'weekly' | 'monthly' | 'yearly';\r\n    remindTime: number;\r\n    remark: string;\r\n    attachments: string[];\r\n    tags: number[];\r\n    createdTime: number;\r\n    completedTime: number;\r\n    collaboratorsId: string[];\r\n}\r\n\r\nexport enum TaskRepeat {\r\n\r\n}\r\n\r\nexport interface Tag {\r\n    id: number;\r\n    name: string;\r\n    color: string;\r\n}\r\n\r\nexport interface Comment {\r\n    id: string;\r\n    taskId: string;\r\n    creatorId: string;\r\n    content: string;\r\n    createdTime: number;\r\n    mentionedFlags: MentionedFlag[];\r\n}\r\n",
            "properties": [
                {
                    "name": "id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "label",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "type",
                    "type": "\"file\" | \"task\" | \"collaborator\"",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "Project",
            "id": "interface-Project-746c74f627471c4815cafdd7bfa5b1c7",
            "file": "src/app/core/types/project.ts",
            "type": "interface",
            "sourceCode": "export interface Project {\r\n    id: string;\r\n    teamId: string;\r\n    avatar?: string;\r\n    projectName: string;\r\n    description?: string;\r\n    ownerId: string;\r\n    creatorId: string;\r\n    expectedStartDate?: Date;\r\n    expectedCompletionDate?: Date;\r\n    createTime: Date;\r\n    isArchived: boolean;\r\n    archiveTime?: Date;\r\n}\r\n",
            "properties": [
                {
                    "name": "archiveTime",
                    "type": "Date",
                    "optional": true,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "avatar",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "createTime",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "creatorId",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "description",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "expectedCompletionDate",
                    "type": "Date",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "expectedStartDate",
                    "type": "Date",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "isArchived",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "ownerId",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "projectName",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "teamId",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "ServerResponse",
            "id": "interface-ServerResponse-42a94b91aba18e6ed22271fbfc8165cd",
            "file": "src/app/core/types/response.ts",
            "type": "interface",
            "sourceCode": "export interface ServerResponse<T> {\r\n    code: string;\r\n    data: T;\r\n}\r\n",
            "properties": [
                {
                    "name": "code",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "data",
                    "type": "T",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "SignUpRequest",
            "id": "interface-SignUpRequest-4a04b2ed7215d60cef72ab7025c11627",
            "file": "src/app/core/types/signUpRequest.ts",
            "type": "interface",
            "sourceCode": "export interface SignUpRequest {\r\n    name: string;\r\n    userName: string;\r\n    email: string;\r\n    password: string;\r\n}",
            "properties": [
                {
                    "name": "email",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "password",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "userName",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "Tag",
            "id": "interface-Tag-bcbb476f3890b9a5e81d5f4d9e06396d",
            "file": "src/app/core/types/task.ts",
            "type": "interface",
            "sourceCode": "interface MentionedFlag {\r\n    type: 'file' | 'task' | 'collaborator';\r\n    id: string;\r\n    label: string;\r\n}\r\n\r\nexport interface TaskGroup {\r\n    id: string;\r\n    groupName: string;\r\n}\r\n\r\nexport interface TaskList {\r\n    id: string;\r\n    listName: string;\r\n    taskCount: number;\r\n    completedTaskCount: number;\r\n    index: number;\r\n}\r\n\r\nexport interface Task {\r\n    id: string;\r\n    isComplete: boolean;\r\n    subTasks: Task[];\r\n    priority: 'high' | 'normal' | 'low';\r\n    description: string;\r\n    principalUserId: string;\r\n    endTime: number;\r\n    repeat: 'daily' | 'workday' | 'weekly' | 'monthly' | 'yearly';\r\n    remindTime: number;\r\n    remark: string;\r\n    attachments: string[];\r\n    tags: number[];\r\n    createdTime: number;\r\n    completedTime: number;\r\n    collaboratorsId: string[];\r\n}\r\n\r\nexport enum TaskRepeat {\r\n\r\n}\r\n\r\nexport interface Tag {\r\n    id: number;\r\n    name: string;\r\n    color: string;\r\n}\r\n\r\nexport interface Comment {\r\n    id: string;\r\n    taskId: string;\r\n    creatorId: string;\r\n    content: string;\r\n    createdTime: number;\r\n    mentionedFlags: MentionedFlag[];\r\n}\r\n",
            "properties": [
                {
                    "name": "color",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "id",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 44
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "Task",
            "id": "interface-Task-bcbb476f3890b9a5e81d5f4d9e06396d",
            "file": "src/app/core/types/task.ts",
            "type": "interface",
            "sourceCode": "interface MentionedFlag {\r\n    type: 'file' | 'task' | 'collaborator';\r\n    id: string;\r\n    label: string;\r\n}\r\n\r\nexport interface TaskGroup {\r\n    id: string;\r\n    groupName: string;\r\n}\r\n\r\nexport interface TaskList {\r\n    id: string;\r\n    listName: string;\r\n    taskCount: number;\r\n    completedTaskCount: number;\r\n    index: number;\r\n}\r\n\r\nexport interface Task {\r\n    id: string;\r\n    isComplete: boolean;\r\n    subTasks: Task[];\r\n    priority: 'high' | 'normal' | 'low';\r\n    description: string;\r\n    principalUserId: string;\r\n    endTime: number;\r\n    repeat: 'daily' | 'workday' | 'weekly' | 'monthly' | 'yearly';\r\n    remindTime: number;\r\n    remark: string;\r\n    attachments: string[];\r\n    tags: number[];\r\n    createdTime: number;\r\n    completedTime: number;\r\n    collaboratorsId: string[];\r\n}\r\n\r\nexport enum TaskRepeat {\r\n\r\n}\r\n\r\nexport interface Tag {\r\n    id: number;\r\n    name: string;\r\n    color: string;\r\n}\r\n\r\nexport interface Comment {\r\n    id: string;\r\n    taskId: string;\r\n    creatorId: string;\r\n    content: string;\r\n    createdTime: number;\r\n    mentionedFlags: MentionedFlag[];\r\n}\r\n",
            "properties": [
                {
                    "name": "attachments",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "collaboratorsId",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "completedTime",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "createdTime",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "description",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "endTime",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "isComplete",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "principalUserId",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "priority",
                    "type": "\"high\" | \"normal\" | \"low\"",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "remark",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "remindTime",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "repeat",
                    "type": "\"daily\" | \"workday\" | \"weekly\" | \"monthly\" | \"yearly\"",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "subTasks",
                    "type": "Task[]",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "tags",
                    "type": "number[]",
                    "optional": false,
                    "description": "",
                    "line": 32
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "TaskGroup",
            "id": "interface-TaskGroup-bcbb476f3890b9a5e81d5f4d9e06396d",
            "file": "src/app/core/types/task.ts",
            "type": "interface",
            "sourceCode": "interface MentionedFlag {\r\n    type: 'file' | 'task' | 'collaborator';\r\n    id: string;\r\n    label: string;\r\n}\r\n\r\nexport interface TaskGroup {\r\n    id: string;\r\n    groupName: string;\r\n}\r\n\r\nexport interface TaskList {\r\n    id: string;\r\n    listName: string;\r\n    taskCount: number;\r\n    completedTaskCount: number;\r\n    index: number;\r\n}\r\n\r\nexport interface Task {\r\n    id: string;\r\n    isComplete: boolean;\r\n    subTasks: Task[];\r\n    priority: 'high' | 'normal' | 'low';\r\n    description: string;\r\n    principalUserId: string;\r\n    endTime: number;\r\n    repeat: 'daily' | 'workday' | 'weekly' | 'monthly' | 'yearly';\r\n    remindTime: number;\r\n    remark: string;\r\n    attachments: string[];\r\n    tags: number[];\r\n    createdTime: number;\r\n    completedTime: number;\r\n    collaboratorsId: string[];\r\n}\r\n\r\nexport enum TaskRepeat {\r\n\r\n}\r\n\r\nexport interface Tag {\r\n    id: number;\r\n    name: string;\r\n    color: string;\r\n}\r\n\r\nexport interface Comment {\r\n    id: string;\r\n    taskId: string;\r\n    creatorId: string;\r\n    content: string;\r\n    createdTime: number;\r\n    mentionedFlags: MentionedFlag[];\r\n}\r\n",
            "properties": [
                {
                    "name": "groupName",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "TaskList",
            "id": "interface-TaskList-bcbb476f3890b9a5e81d5f4d9e06396d",
            "file": "src/app/core/types/task.ts",
            "type": "interface",
            "sourceCode": "interface MentionedFlag {\r\n    type: 'file' | 'task' | 'collaborator';\r\n    id: string;\r\n    label: string;\r\n}\r\n\r\nexport interface TaskGroup {\r\n    id: string;\r\n    groupName: string;\r\n}\r\n\r\nexport interface TaskList {\r\n    id: string;\r\n    listName: string;\r\n    taskCount: number;\r\n    completedTaskCount: number;\r\n    index: number;\r\n}\r\n\r\nexport interface Task {\r\n    id: string;\r\n    isComplete: boolean;\r\n    subTasks: Task[];\r\n    priority: 'high' | 'normal' | 'low';\r\n    description: string;\r\n    principalUserId: string;\r\n    endTime: number;\r\n    repeat: 'daily' | 'workday' | 'weekly' | 'monthly' | 'yearly';\r\n    remindTime: number;\r\n    remark: string;\r\n    attachments: string[];\r\n    tags: number[];\r\n    createdTime: number;\r\n    completedTime: number;\r\n    collaboratorsId: string[];\r\n}\r\n\r\nexport enum TaskRepeat {\r\n\r\n}\r\n\r\nexport interface Tag {\r\n    id: number;\r\n    name: string;\r\n    color: string;\r\n}\r\n\r\nexport interface Comment {\r\n    id: string;\r\n    taskId: string;\r\n    creatorId: string;\r\n    content: string;\r\n    createdTime: number;\r\n    mentionedFlags: MentionedFlag[];\r\n}\r\n",
            "properties": [
                {
                    "name": "completedTaskCount",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "index",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "listName",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "taskCount",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "Team",
            "id": "interface-Team-dd7e3fba643b44051eb469f794745dd5",
            "file": "src/app/core/types/team.ts",
            "type": "interface",
            "sourceCode": "export interface Team {\r\n    id: string;\r\n    teamName: string;\r\n    avatar?: string;\r\n    createTime?: Date;\r\n    description?: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "avatar",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "createTime",
                    "type": "Date",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "description",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "teamName",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "User",
            "id": "interface-User-7060e7a20a5f5efd338ec007ae300922",
            "file": "src/app/core/types/user.ts",
            "type": "interface",
            "sourceCode": "export interface User {\r\n    id: string;\r\n    userName: string;\r\n    isVerified: boolean;\r\n    createdTime: number;\r\n    alias?: string;\r\n    avator?: string;\r\n    mobileNumber?: string;\r\n    email?: string;\r\n    lastGroupId?: string;\r\n    groups?: string[];\r\n}",
            "properties": [
                {
                    "name": "alias",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "avator",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "createdTime",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "email",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "groups",
                    "type": "string[]",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "isVerified",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "lastGroupId",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "mobileNumber",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "userName",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "AuthenticationService",
            "id": "injectable-AuthenticationService-8904d5700afa3159e3f5c8e31d64135c",
            "file": "src/app/core/services/authentication.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "signIn",
                    "args": [
                        {
                            "name": "loginData",
                            "type": "literal type"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ServerResponse<User | null>>",
                    "typeParameters": [],
                    "line": 28,
                    "jsdoctags": [
                        {
                            "name": "loginData",
                            "type": "literal type",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "signUp",
                    "args": [
                        {
                            "name": "signupData",
                            "type": "SignUpRequest"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 32,
                    "jsdoctags": [
                        {
                            "name": "signupData",
                            "type": "SignUpRequest",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "verifyUserNameOrEmail",
                    "args": [
                        {
                            "name": "userNameOrEmail",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ValidationErrors | null>",
                    "typeParameters": [],
                    "line": 24,
                    "jsdoctags": [
                        {
                            "name": "userNameOrEmail",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { ValidationErrors } from '@angular/forms';\r\nimport { Observable } from 'rxjs';\r\nimport { User } from 'core/types/user';\r\nimport { ServerResponse } from 'core/types/response';\r\nimport { SignUpRequest } from 'core/types/signUpRequest';\r\n\r\nconst httpOptions = {\r\n  headers: new HttpHeaders({\r\n    'Content-Type': 'application/json'\r\n  })\r\n};\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthenticationService {\r\n\r\n  constructor(\r\n    private http: HttpClient\r\n  ) { }\r\n\r\n  verifyUserNameOrEmail(userNameOrEmail: string): Observable<ValidationErrors | null> {\r\n    return this.http.get('auth/verifyUserNameOrEmail', { params: { userNameOrEmail } });\r\n  }\r\n\r\n  signIn(loginData: { userNameOrEmail: string, password: string }): Observable<ServerResponse<User | null>> {\r\n    return this.http.post<ServerResponse<User | null>>('auth/signIn', loginData, httpOptions);\r\n  }\r\n\r\n  signUp(signupData: SignUpRequest) {\r\n    return this.http.post('auth/signUp', signupData);\r\n  }\r\n\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient"
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "GlobalService",
            "id": "injectable-GlobalService-1b6d45b73b6a03aecad2ba4e17049b51",
            "file": "src/app/core/services/global.service.ts",
            "properties": [
                {
                    "name": "currentTeam$",
                    "type": "Observable<object>",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "currentTeamId",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "currentUser",
                    "type": "User",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "jwt",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "redirectUrl",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "storage",
                    "defaultValue": "localStorage",
                    "type": "Storage",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getJWT",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 30
                },
                {
                    "name": "isLoggedIn",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 40
                },
                {
                    "name": "removeJWT",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35
                },
                {
                    "name": "storeJWT",
                    "args": [
                        {
                            "name": "jwt",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "jsdoctags": [
                        {
                            "name": "jwt",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { User } from 'core/types/user';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class GlobalService {\r\n\r\n  redirectUrl: string;\r\n\r\n  currentUser: User;\r\n\r\n  currentTeamId = '';\r\n\r\n  currentTeam$: Observable<object>;\r\n\r\n  private storage: Storage = localStorage;\r\n\r\n  private jwt = '';\r\n\r\n  constructor() { }\r\n\r\n  // Store json web token from local storage\r\n  storeJWT(jwt: string) {\r\n    this.storage.setItem('jwt', jwt);\r\n    this.jwt = jwt;\r\n  }\r\n\r\n  getJWT() {\r\n    return this.jwt || this.storage.getItem('jwt');\r\n  }\r\n\r\n  // Remove userinfo from local storage\r\n  removeJWT() {\r\n    this.storage.removeItem(this.jwt);\r\n    this.jwt = undefined;\r\n  }\r\n\r\n  isLoggedIn(): boolean {\r\n    return this.currentUser ? true : false;\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 20
            },
            "type": "injectable"
        },
        {
            "name": "LocalStorageService",
            "id": "injectable-LocalStorageService-bd861e397ec8c4da7cb902daf2487fbe",
            "file": "src/app/core/services/localstorage.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getValue",
                    "args": [
                        {
                            "name": "key",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 23,
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "remove",
                    "args": [
                        {
                            "name": "key",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "storeValue",
                    "args": [
                        {
                            "name": "key",
                            "type": "string"
                        },
                        {
                            "name": "value",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "value",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable, EventEmitter } from '@angular/core';\r\n\r\nexport interface DocsSiteTheme {\r\n  name: string;\r\n  displayName?: string;\r\n  accent: string;\r\n  primary: string;\r\n  isDark?: boolean;\r\n  isDefault?: boolean;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class LocalStorageService {\r\n\r\n  storeValue(key: string, value: any) {\r\n    try {\r\n      window.localStorage[key] = value;\r\n    } catch { }\r\n  }\r\n\r\n  getValue(key: string): any {\r\n    try {\r\n      return window.localStorage[key] || null;\r\n    } catch {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  remove(key: string) {\r\n    try {\r\n      window.localStorage.removeItem(key);\r\n    } catch { }\r\n  }\r\n\r\n}\r\n",
            "type": "injectable"
        },
        {
            "name": "ProjectService",
            "id": "injectable-ProjectService-4b6ae6ec8c674530c89d545581d6d588",
            "file": "src/app/core/services/project.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "addProject",
                    "args": [
                        {
                            "name": "addProjectParam",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 25,
                    "jsdoctags": [
                        {
                            "name": "addProjectParam",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getProject",
                    "args": [
                        {
                            "name": "id",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 13,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getProjectListByTeamId",
                    "args": [
                        {
                            "name": "teamId",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 21,
                    "jsdoctags": [
                        {
                            "name": "teamId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateProject",
                    "args": [
                        {
                            "name": "updateProjectParam",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 29,
                    "jsdoctags": [
                        {
                            "name": "updateProjectParam",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "verifyProjectName",
                    "args": [
                        {
                            "name": "projectName",
                            "type": "string"
                        },
                        {
                            "name": "teamId",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 17,
                    "jsdoctags": [
                        {
                            "name": "projectName",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "teamId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ProjectService {\r\n\r\n  constructor(\r\n    private http: HttpClient\r\n  ) { }\r\n\r\n  getProject(id: string) {\r\n    return this.http.get('api/project/getProjectById', { params: { id } });\r\n  }\r\n\r\n  verifyProjectName(projectName: string, teamId: string) {\r\n    return this.http.get('api/project/verifyProjectName', { params: { projectName, teamId } });\r\n  }\r\n\r\n  getProjectListByTeamId(teamId: string) {\r\n    return this.http.get('api/project/getProjectListByTeamId', { params: { teamId } });\r\n  }\r\n\r\n  addProject(addProjectParam) {\r\n    return this.http.post('api/project/addProject', addProjectParam);\r\n  }\r\n\r\n  updateProject(updateProjectParam) {\r\n    return this.http.put('api/project/updateProject', updateProjectParam);\r\n  }\r\n\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient"
                    }
                ],
                "line": 7,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "StyleManagerService",
            "id": "injectable-StyleManagerService-af1b6e73b1c29f481030134cdab4a7f7",
            "file": "src/app/core/services/style-manager/style-manager.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "removeStyle",
                    "args": [
                        {
                            "name": "key",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "description": "<p>Remove the stylesheet link with the specified key.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setStyle",
                    "args": [
                        {
                            "name": "key",
                            "type": "string"
                        },
                        {
                            "name": "href",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 8,
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "href",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class StyleManagerService {\r\n\r\n  setStyle(key: string, href: string) {\r\n    getLinkElementForKey(key).setAttribute('href', href);\r\n  }\r\n\r\n  /**\r\n   * Remove the stylesheet link with the specified key.\r\n   */\r\n  removeStyle(key: string) {\r\n    const existingLinkElement = getExistingLinkElementByKey(key);\r\n    if (existingLinkElement) {\r\n      document.head.removeChild(existingLinkElement);\r\n    }\r\n  }\r\n}\r\n\r\nfunction createLinkElementWithKey(key: string) {\r\n  const linkEl = document.createElement('link');\r\n  linkEl.setAttribute('rel', 'stylesheet');\r\n  linkEl.setAttribute('type', 'text/css');\r\n  linkEl.classList.add(`style-manager-${key}`);\r\n  document.head.appendChild(linkEl);\r\n  return linkEl;\r\n}\r\n\r\nfunction getExistingLinkElementByKey(key: string) {\r\n  return document.head.querySelector(`link[rel=\"stylesheet\"].style-manager-${key}`);\r\n}\r\n\r\nfunction getLinkElementForKey(key: string) {\r\n  return getExistingLinkElementByKey(key) || createLinkElementWithKey(key);\r\n}\r\n",
            "type": "injectable"
        },
        {
            "name": "TeamService",
            "id": "injectable-TeamService-fa1875344299f28888755f13857b2cb5",
            "file": "src/app/core/services/team.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "addTeam",
                    "args": [
                        {
                            "name": "addTeamParam",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 25,
                    "jsdoctags": [
                        {
                            "name": "addTeamParam",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTeam",
                    "args": [
                        {
                            "name": "id",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 13,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTeamListByMemberId",
                    "args": [
                        {
                            "name": "memberId",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 21,
                    "jsdoctags": [
                        {
                            "name": "memberId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateTeam",
                    "args": [
                        {
                            "name": "updateTeamParam",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 29,
                    "jsdoctags": [
                        {
                            "name": "updateTeamParam",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "verifyTeamName",
                    "args": [
                        {
                            "name": "teamName",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 17,
                    "jsdoctags": [
                        {
                            "name": "teamName",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class TeamService {\r\n\r\n  constructor(\r\n    private http: HttpClient\r\n  ) { }\r\n\r\n  getTeam(id: string) {\r\n    return this.http.get('api/team/getTeam', { params: { id } });\r\n  }\r\n\r\n  verifyTeamName(teamName: string) {\r\n    return this.http.get('api/team/verifyTeamName', { params: { teamName } });\r\n  }\r\n\r\n  getTeamListByMemberId(memberId: string) {\r\n    return this.http.get('api/team/getTeamListByMemberId', { params: { memberId } });\r\n  }\r\n\r\n  addTeam(addTeamParam) {\r\n    return this.http.post('api/team/addTeam', addTeamParam);\r\n  }\r\n\r\n  updateTeam(updateTeamParam) {\r\n    return this.http.put('api/team/updateTeam', updateTeamParam);\r\n  }\r\n\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient"
                    }
                ],
                "line": 7,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        }
    ],
    "classes": [
        {
            "name": "AppPage",
            "id": "class-AppPage-b0dda38f970a6690b77b35dfb293b3ac",
            "file": "e2e/src/app.po.ts",
            "type": "class",
            "sourceCode": "import { browser, by, element } from 'protractor';\r\n\r\nexport class AppPage {\r\n  navigateTo(): Promise<unknown> {\r\n    return browser.get(browser.baseUrl) as Promise<unknown>;\r\n  }\r\n\r\n  getTitleText(): Promise<string> {\r\n    return element(by.css('app-root .content span')).getText() as Promise<string>;\r\n  }\r\n}\r\n",
            "properties": [],
            "methods": [
                {
                    "name": "getTitleText",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<string>",
                    "typeParameters": [],
                    "line": 8
                },
                {
                    "name": "navigateTo",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<unknown>",
                    "typeParameters": [],
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-011157100d9ffe629bc896bf832442ba",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "title",
                    "defaultValue": "'kanpm'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, ViewChild, TemplateRef } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.scss']\r\n})\r\nexport class AppComponent {\r\n\r\n  title = 'kanpm';\r\n\r\n  constructor() { }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n  height: 100%;\r\n  width: 100%;\r\n}\r\n\r\n.root-container {\r\n  display: flex;\r\n  flex-flow: column nowrap;\r\n  height: 100%;\r\n}\r\n\r\n.main-header-nav {\r\n  box-sizing: border-box;\r\n\r\n  .mat-h1 {\r\n    margin: 0;\r\n  }\r\n\r\n  .flex-spacer {\r\n    flex-grow: 1;\r\n    display: flex;\r\n    justify-content: center;\r\n    .group-search {\r\n      width: 350px;\r\n      font-size: 16px;\r\n    }\r\n  }\r\n\r\n  .header-divider {\r\n    margin: 0 8px;\r\n  }\r\n\r\n  .header-chat-container {\r\n    display: flex;\r\n    align-items: center;\r\n    margin: 0 5px;\r\n    .header-chat-button {\r\n      cursor: pointer;\r\n      height: 18px;\r\n      width: 18px;\r\n      font-size: 18px;\r\n    }\r\n  }\r\n\r\n  .team-selector-container {\r\n    display: flex;\r\n    align-items: center;\r\n    .team-switch-button {\r\n      cursor: pointer;\r\n      height: 18px;\r\n      font-size: 18px;\r\n      margin-left: 5px;\r\n    }\r\n  }\r\n}\r\n\r\n.main-content-container {\r\n  flex: 1;\r\n  overflow: hidden;\r\n}\r\n",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 10
            },
            "templateData": "<div class=\"root-container\">\r\n  <!-- <kanpm-nav-header></kanpm-nav-header> -->\r\n  <mat-toolbar color=\"primary\" class=\"main-header-nav\">\r\n    <span class=\"mat-h1\">Kanpm</span>\r\n    <div class=\"flex-spacer\">\r\n      <mat-form-field class=\"group-search\">\r\n        <input matInput type=\"text\">\r\n        <button mat-button matSuffix mat-icon-button aria-label=\"search\">\r\n          <mat-icon>search</mat-icon>\r\n        </button>\r\n      </mat-form-field>\r\n    </div>\r\n    <div class=\"team-selector-container\">\r\n      <span class=\"mat-body\">市场监管项目组</span>\r\n      <mat-icon class=\"team-switch-button\" routerLink=\"/teamSelect\">swap_horiz</mat-icon>\r\n    </div>\r\n    <mat-divider vertical style=\"height: 20px; margin: 0 10px;\"></mat-divider>\r\n    <kanpm-theme-picker></kanpm-theme-picker>\r\n    <mat-divider vertical style=\"height: 20px;margin: 0 10px;\"></mat-divider>\r\n    <nz-avatar nzIcon=\"user\"></nz-avatar>\r\n  </mat-toolbar>\r\n  <mat-sidenav-container class=\"main-content-container\">\r\n    <mat-sidenav-content>\r\n      <router-outlet></router-outlet>\r\n    </mat-sidenav-content>\r\n  </mat-sidenav-container>\r\n</div>"
        },
        {
            "name": "AuthenticationRootComponent",
            "id": "component-AuthenticationRootComponent-95a4cc073db2f8a140f4d05b0fabbd61",
            "file": "src/app/pages/authentication/authentication-root/authentication-root.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "styleUrls": [
                "./authentication-root.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./authentication-root.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "isLoginTab",
                    "defaultValue": "true",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  templateUrl: './authentication-root.component.html',\r\n  styleUrls: ['./authentication-root.component.scss']\r\n})\r\nexport class AuthenticationRootComponent implements OnInit {\r\n\r\n  isLoginTab = true;\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '~@angular/material/theming';\r\n\r\n:host {\r\n  display: block;\r\n  height: 100%;\r\n}\r\n\r\n.authentication-root {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: flex-start;\r\n  height: 100%;\r\n  padding-left: 10%;\r\n}\r\n\r\n.auth-illustration {\r\n  position: fixed;\r\n  z-index: 1;\r\n  top: 48px;\r\n  right: 0;\r\n}\r\n\r\n// TODO add reactive layout\r\n.ad-section {\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  position: relative;\r\n  z-index: 3;\r\n  width: 360px;\r\n  height: 650px;\r\n  border-radius: 12px;\r\n  @include mat-elevation(12);\r\n\r\n  .auth-banner-img {\r\n    width: 50%;\r\n    margin-bottom: 24px;\r\n  }\r\n}\r\n\r\n.auth-section {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  position: relative;\r\n  z-index: 2;\r\n  height: 600px;\r\n  padding: 48px;\r\n  border-bottom-right-radius: 12px;\r\n  border-top-right-radius: 12px;\r\n  @include mat-elevation(6);\r\n\r\n  .tabs {\r\n    margin: 32px 0;\r\n    padding-right: 48px;\r\n\r\n    .tab {\r\n      float: left;\r\n      cursor: pointer;\r\n      box-sizing: border-box;\r\n      padding: 10px 15px;\r\n    }\r\n  }\r\n}\r\n",
                    "styleUrl": "./authentication-root.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 9
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"authentication-root\">\r\n  <!-- <img class=\"auth-illustration\" src=\"/assets/images/auth-illustration.png\" /> -->\r\n  <section class=\"ad-section\">\r\n    <img class=\"auth-banner-img\" src=\"/assets/images/auth-banner.png\">\r\n    <p class=\"mat-h3\">Lorem ipsum dolor sit amet</p>\r\n    <p>Consectetur adipiscing elit</p>\r\n    <p>Phasellus orci dolor</p>\r\n    <p>dapibus suscipit quam</p>\r\n  </section>\r\n  <section class=\"auth-section\">\r\n    <div class=\"tabs\">\r\n      <ul class=\"mat-h2\">\r\n        <li class=\"tab\" [class.active]=\"isLoginTab\" (click)=\"isLoginTab=true\">Login</li>\r\n        <li class=\"tab\" [class.active]=\"!isLoginTab\" (click)=\"isLoginTab=false\">Register</li>\r\n      </ul>\r\n    </div>\r\n    <kanpm-login *ngIf=\"isLoginTab\"></kanpm-login>\r\n    <kanpm-register *ngIf=\"!isLoginTab\"></kanpm-register>\r\n  </section>\r\n</div>\r\n"
        },
        {
            "name": "AvatarComponent",
            "id": "component-AvatarComponent-0a87024693c92677793379b74e8e3205",
            "file": "src/app/shared/components/avatar/avatar.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "kanpm-avatar",
            "styleUrls": [
                "./avatar.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./avatar.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "avatar",
                    "line": 11,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, ChangeDetectionStrategy, Input } from '@angular/core';\n\n@Component({\n  selector: 'kanpm-avatar',\n  templateUrl: './avatar.component.html',\n  styleUrls: ['./avatar.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class AvatarComponent implements OnInit {\n\n  @Input() avatar: string;\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".avatar-container {\r\n  position: relative;\r\n  cursor: pointer;\r\n  margin-left: 4px;\r\n}\r\n\r\n\r\n.mask {\r\n  position: absolute;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  width: 28px;\r\n  height: 28px;\r\n  border-radius: 14px;\r\n  background: #ffffff;\r\n  // background: #000000;\r\n  opacity: 0%;\r\n\r\n  &:hover {\r\n    opacity: 50%;\r\n  }\r\n}\r\n\r\n\r\n.avatar {\r\n  display: block;\r\n  width: 28px;\r\n  height: 28px;\r\n  border-radius: 14px;\r\n}\r\n",
                    "styleUrl": "./avatar.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 11
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"avatar-container\">\r\n    <div class=\"mask\" [matMenuTriggerFor]=\"userSettingMenu\">\r\n        <mat-icon class=\"icon\">more_horiz</mat-icon>\r\n    </div>\r\n    <mat-menu #userSettingMenu xPosition=\"before\">\r\n        <button mat-menu-item>\r\n            <mat-icon>account_circle</mat-icon>\r\n            <span>账户设置</span>\r\n        </button>\r\n        <button mat-menu-item>\r\n            <mat-icon>settings</mat-icon>\r\n            <span>偏好设置</span>\r\n        </button>\r\n        <mat-divider></mat-divider>\r\n        <button mat-menu-item>\r\n            <mat-icon>exit_to_app</mat-icon>\r\n            <span>退出登录</span>\r\n        </button>\r\n    </mat-menu>\r\n    <img [src]=\"avatar\" class=\"avatar\" />\r\n</div>"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-642c6c4e474cd5a0ac760dfda26b2fc9",
            "file": "src/stories/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": "<button   type=\"button\"\n   (click)=\"onClick.emit($event)\"\n   [ngClass]=\"classes\"\n   [ngStyle]=\"{ 'background-color': backgroundColor }\"\n >\n   {{ label }}\n </button>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "description": "<p>What background color to use</p>\n",
                    "line": 26,
                    "type": "string"
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "description": "<p>Button contents</p>\n",
                    "line": 40
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 20
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 32,
                    "type": "\"small\" | \"medium\" | \"large\""
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 46,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button',\n  template: ` <button\n    type=\"button\"\n    (click)=\"onClick.emit($event)\"\n    [ngClass]=\"classes\"\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\n  >\n    {{ label }}\n  </button>`,\n  styleUrls: ['./button.css'],\n})\nexport default class ButtonComponent {\n  /**\n   * Is this the principal call to action on the page?\n   */\n  @Input()\n  primary = false;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n  /**\n   * How large should the button be?\n   */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Button';\n\n  /**\n   * Optional click handler\n   */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\n\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-weight: 700;\n  border: 0;\n  border-radius: 3em;\n  cursor: pointer;\n  display: inline-block;\n  line-height: 1;\n}\n.storybook-button--primary {\n  color: white;\n  background-color: #1ea7fd;\n}\n.storybook-button--secondary {\n  color: #333;\n  background-color: transparent;\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\n}\n.storybook-button--small {\n  font-size: 12px;\n  padding: 10px 16px;\n}\n.storybook-button--medium {\n  font-size: 14px;\n  padding: 11px 20px;\n}\n.storybook-button--large {\n  font-size: 16px;\n  padding: 12px 24px;\n}\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 48
                    }
                }
            }
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-246e2a69dc126a3bd76c6328dd3b93e2",
            "file": "src/stories/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-header",
            "styleUrls": [
                "./header.css"
            ],
            "styles": [],
            "template": "<header>    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          primary\n          size=\"small\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </header>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "line": 53,
                    "type": "unknown"
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 62,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 56,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 59,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-header',\n  template: `<header>\n    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          primary\n          size=\"small\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </header>`,\n  styleUrls: ['./header.css'],\n})\nexport default class HeaderComponent {\n  @Input()\n  user: unknown = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".wrapper {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n  padding: 15px 20px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n\nsvg {\n  display: inline-block;\n  vertical-align: top;\n}\n\nh1 {\n  font-weight: 900;\n  font-size: 20px;\n  line-height: 1;\n  margin: 6px 0 6px 10px;\n  display: inline-block;\n  vertical-align: top;\n}\n\nbutton + button {\n  margin-left: 10px;\n}\n",
                    "styleUrl": "./header.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "LoginComponent",
            "id": "component-LoginComponent-d15f8caf977b57489bce5a6e54061119",
            "file": "src/app/pages/authentication/login/login.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "kanpm-login",
            "styleUrls": [
                "./login.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./login.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "isPasswordHide",
                    "defaultValue": "true",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "loginForm",
                    "defaultValue": "this.fb.group({\r\n    usernameOrEmail: ['', [\r\n      Validators.required,\r\n      Validators.maxLength(64)\r\n    ]],\r\n    password: ['', [\r\n      Validators.required,\r\n      Validators.minLength(6),\r\n      Validators.maxLength(64),\r\n    ]]\r\n  }, {\r\n    updateOn: 'blur'\r\n  })",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39
                },
                {
                    "name": "submitLoginForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, ChangeDetectionStrategy } from '@angular/core';\r\nimport { FormBuilder, Validators } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\nimport { AuthenticationService } from 'core/services/authentication.service';\r\nimport { GlobalService } from 'core/services/global.service';\r\n\r\n@Component({\r\n  selector: 'kanpm-login',\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class LoginComponent implements OnInit {\r\n\r\n  isPasswordHide = true;\r\n  loginForm = this.fb.group({\r\n    usernameOrEmail: ['', [\r\n      Validators.required,\r\n      Validators.maxLength(64)\r\n    ]],\r\n    password: ['', [\r\n      Validators.required,\r\n      Validators.minLength(6),\r\n      Validators.maxLength(64),\r\n    ]]\r\n  }, {\r\n    updateOn: 'blur'\r\n  });\r\n  get usernameOrEmail() { return this.loginForm.get('usernameOrEmail'); }\r\n  get password() { return this.loginForm.get('password'); }\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private authServer: AuthenticationService,\r\n    private globalService: GlobalService,\r\n    private router: Router\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n  submitLoginForm() {\r\n    this.authServer.signIn(this.loginForm.value).subscribe(\r\n      (response: any) => {\r\n        this.globalService.storeJWT(response.accessToken);\r\n        this.globalService.currentUser = response.user;\r\n        if (this.globalService.redirectUrl) {\r\n          this.router.navigate([this.globalService.redirectUrl]);\r\n        } else {\r\n          // ToDo add recentTeamId, if null, then go to the team select page\r\n          if (response.user.recentGroupId) {\r\n            this.router.navigate([`/team/${response.recentGroupId}`]);\r\n          } else {\r\n            this.router.navigate(['teamSelect']);\r\n          }\r\n        }\r\n      });\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n  display: block;\r\n}\r\n\r\n.login-root {\r\n  width: 550px;\r\n}\r\n\r\n.login-form {\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 100%;\r\n}\r\n\r\n.form-field-row {\r\n  display: flex;\r\n\r\n  mat-form-field {\r\n    flex-grow: 1;\r\n  }\r\n\r\n  .field-feedback {\r\n    display: flex;\r\n    align-items: center;\r\n    width: 48px;\r\n    padding-left: 8px;\r\n    margin: .25em 0;\r\n    padding-bottom: 1.34375em;\r\n\r\n    .checked-icon {\r\n      color: #8bc34a;\r\n    }\r\n\r\n    .faild-icon {\r\n      color: #f44336\r\n    }\r\n  }\r\n}\r\n",
                    "styleUrl": "./login.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder"
                    },
                    {
                        "name": "authServer",
                        "type": "AuthenticationService"
                    },
                    {
                        "name": "globalService",
                        "type": "GlobalService"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    }
                ],
                "line": 30,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authServer",
                        "type": "AuthenticationService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "globalService",
                        "type": "GlobalService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "usernameOrEmail": {
                    "name": "usernameOrEmail",
                    "getSignature": {
                        "name": "usernameOrEmail",
                        "type": "",
                        "returnType": "",
                        "line": 29
                    }
                },
                "password": {
                    "name": "password",
                    "getSignature": {
                        "name": "password",
                        "type": "",
                        "returnType": "",
                        "line": 30
                    }
                }
            },
            "templateData": "<div class=\"login-root\">\r\n  <form class=\"login-form\" [formGroup]=\"loginForm\" (ngSubmit)=\"submitLoginForm()\">\r\n    <div class=\"form-field-row\">\r\n      <mat-form-field appearance=\"outline\">\r\n        <mat-label>User Name or Email</mat-label>\r\n        <input matInput formControlName=\"usernameOrEmail\" required>\r\n        <mat-error *ngIf=\"usernameOrEmail.errors?.required\">user name or email is required.</mat-error>\r\n        <mat-error *ngIf=\"usernameOrEmail.errors?.maxlength\">\r\n          user name letters should less than {{usernameOrEmail.errors?.maxlength.requiredLength}}.\r\n        </mat-error>\r\n      </mat-form-field>\r\n      <div class=\"field-feedback\">\r\n        <mat-icon class=\"checked-icon\" *ngIf=\"usernameOrEmail.dirty&&usernameOrEmail.valid\">check_circle_outline</mat-icon>\r\n        <mat-icon color=\"warn\" *ngIf=\"usernameOrEmail.dirty&&usernameOrEmail.invalid\">highlight_off</mat-icon>\r\n        <mat-icon color=\"accent\" *ngIf=\"usernameOrEmail.pending\">hourglass_empty</mat-icon>\r\n      </div>\r\n    </div>\r\n    <div class=\"form-field-row\">\r\n      <mat-form-field appearance=\"outline\">\r\n        <mat-label>Password</mat-label>\r\n        <input matInput formControlName=\"password\" required [type]=\"isPasswordHide ? 'password' : 'text'\">\r\n        <button mat-icon-button matSuffix type=\"button\" (click)=\"isPasswordHide = !isPasswordHide\" [attr.aria-label]=\"'Hide password'\"\r\n          [attr.aria-pressed]=\"isPasswordHide\">\r\n          <mat-icon>{{isPasswordHide ? 'visibility_off' : 'visibility'}}</mat-icon>\r\n        </button>\r\n      </mat-form-field>\r\n      <div class=\"field-feedback\">\r\n        <mat-icon class=\"checked-icon\" *ngIf=\"password.dirty&&password.valid\">check_circle_outline</mat-icon>\r\n        <mat-icon color=\"warn\" *ngIf=\"password.dirty&&password.invalid\">highlight_off</mat-icon>\r\n      </div>\r\n    </div>\r\n    <div class=\"form-field-row\">\r\n      <button mat-raised-button type=\"submit\" color=\"primary\" [disabled]=\"!loginForm.valid\">login</button>\r\n      <button mat-button>cancel</button>\r\n    </div>\r\n  </form>\r\n</div>\r\n"
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-cca1a8911321fa17756ce90c90de65cc",
            "file": "src/stories/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-page",
            "styleUrls": [
                "./page.css"
            ],
            "styles": [],
            "template": "<article>    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"onLogout.emit($event)\"\n      (onLogin)=\"onLogin.emit($event)\"\n      (onCreateAccount)=\"onCreateAccount.emit($event)\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://www.learnstorybook.com\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Learn Storybook\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\">\n          docs\n        </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "line": 66,
                    "type": "unknown"
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 75,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 69,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 72,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-page',\n  template: `<article>\n    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"onLogout.emit($event)\"\n      (onLogin)=\"onLogin.emit($event)\"\n      (onCreateAccount)=\"onCreateAccount.emit($event)\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://www.learnstorybook.com\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Learn Storybook\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\">\n          docs\n        </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>`,\n  styleUrls: ['./page.css'],\n})\nexport default class PageComponent {\n  @Input()\n  user: unknown = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n\n// export const Page = ({ user, onLogin, onLogout, onCreateAccount }) => (\n//   <article>\n//     <Header user={user} onLogin={onLogin} onLogout={onLogout} onCreateAccount={onCreateAccount} />\n\n// );\n// Page.propTypes = {\n//   user: PropTypes.shape({}),\n//   onLogin: PropTypes.func.isRequired,\n//   onLogout: PropTypes.func.isRequired,\n//   onCreateAccount: PropTypes.func.isRequired,\n// };\n\n// Page.defaultProps = {\n//   user: null,\n// };\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "section {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-size: 14px;\n  line-height: 24px;\n  padding: 48px 20px;\n  margin: 0 auto;\n  max-width: 600px;\n  color: #333;\n}\n\nh2 {\n  font-weight: 900;\n  font-size: 32px;\n  line-height: 1;\n  margin: 0 0 4px;\n  display: inline-block;\n  vertical-align: top;\n}\n\np {\n  margin: 1em 0;\n}\n\na {\n  text-decoration: none;\n  color: #1ea7fd;\n}\n\nul {\n  padding-left: 30px;\n  margin: 1em 0;\n}\n\nli {\n  margin-bottom: 8px;\n}\n\n.tip {\n  display: inline-block;\n  border-radius: 1em;\n  font-size: 11px;\n  line-height: 12px;\n  font-weight: 700;\n  background: #e7fdd8;\n  color: #66bf3c;\n  padding: 4px 12px;\n  margin-right: 10px;\n  vertical-align: top;\n}\n\n.tip-wrapper {\n  font-size: 13px;\n  line-height: 20px;\n  margin-top: 40px;\n  margin-bottom: 40px;\n}\n\n.tip-wrapper svg {\n  display: inline-block;\n  height: 12px;\n  width: 12px;\n  margin-right: 4px;\n  vertical-align: top;\n  margin-top: 3px;\n}\n\n.tip-wrapper svg path {\n  fill: #1ea7fd;\n}\n",
                    "styleUrl": "./page.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "ProjectComponent",
            "id": "component-ProjectComponent-1d4e872ff1547e91744f747624cef399",
            "file": "src/app/pages/project/project.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "kanpm-project",
            "styleUrls": [
                "./project.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./project.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'kanpm-project',\r\n  templateUrl: './project.component.html',\r\n  styleUrls: ['./project.component.scss']\r\n})\r\nexport class ProjectComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n  display: block;\r\n  height: 100%;\r\n}\r\n\r\n.project-root-container {\r\n  display: flex;\r\n  flex-direction: column;\r\n  height: 100%;\r\n}\r\n\r\n.project-header {\r\n  display: flex;\r\n  align-items: center;\r\n\r\n  .tabs {\r\n    flex: 1;\r\n\r\n    .tab {\r\n      float: left;\r\n      cursor: pointer;\r\n      box-sizing: border-box;\r\n      padding: 10px 15px;\r\n    }\r\n  }\r\n\r\n  .settings {\r\n    a {\r\n      display: inline-flex;\r\n      align-items: center;\r\n      margin-right: 5px;\r\n\r\n      .icon {\r\n        width: 16px;\r\n        height: 16px;\r\n        font-size: 16px;\r\n        margin-right: 5px;\r\n      }\r\n\r\n      span {\r\n        font-size: 14px;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n.project-content {\r\n  flex: 1;\r\n  overflow: hidden;\r\n}\r\n",
                    "styleUrl": "./project.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"project-root-container\">\r\n  <div class=\"project-header\">\r\n    <section class=\"tabs\">\r\n      <ul class=\"mat-h3\">\r\n        <li class=\"tab active\"><span>任务</span></li>\r\n        <li class=\"tab\"><span>日历</span></li>\r\n        <li class=\"tab\"><span>统计</span></li>\r\n      </ul>\r\n    </section>\r\n    <section class=\"settings\">\r\n      <a>\r\n        <mat-icon class=\"icon\">group</mat-icon>\r\n        <span>3</span>\r\n      </a>\r\n      <a>\r\n        <mat-icon class=\"icon\">tune</mat-icon>\r\n        <span>菜单</span>\r\n      </a>\r\n    </section>\r\n  </div>\r\n  <div class=\"project-content\">\r\n    <router-outlet></router-outlet>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "ProjectCreatorComponent",
            "id": "component-ProjectCreatorComponent-1e58daabb9eb6820e3bafeb8d730f54d",
            "file": "src/app/shared/components/project-creator/project-creator.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "styleUrls": [
                "./project-creator.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./project-creator.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "createProjectForm",
                    "defaultValue": "this.fb.group({\r\n    projectName: ['', [\r\n      Validators.required,\r\n      Validators.maxLength(64)\r\n    ]],\r\n    description: ['', [\r\n      Validators.maxLength(255),\r\n    ]]\r\n  }, { updateOn: 'blur' })",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methodsClass": [
                {
                    "name": "createProject",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, ChangeDetectionStrategy, ChangeDetectorRef } from '@angular/core';\r\nimport { FormBuilder, Validators } from '@angular/forms';\r\nimport { MatDialogRef } from '@angular/material/dialog';\r\nimport { GlobalService } from 'core/services/global.service';\r\nimport { ProjectService } from 'core/services/project.service';\r\n\r\n@Component({\r\n  templateUrl: './project-creator.component.html',\r\n  styleUrls: ['./project-creator.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class ProjectCreatorComponent {\r\n\r\n  createProjectForm = this.fb.group({\r\n    projectName: ['', [\r\n      Validators.required,\r\n      Validators.maxLength(64)\r\n    ]],\r\n    description: ['', [\r\n      Validators.maxLength(255),\r\n    ]]\r\n  }, { updateOn: 'blur' });\r\n  get projectName() { return this.createProjectForm.get('projectName'); }\r\n  get description() { return this.createProjectForm.get('description'); }\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private dialogRef: MatDialogRef<ProjectCreatorComponent>,\r\n    private CDRef: ChangeDetectorRef,\r\n    private globalService: GlobalService,\r\n    private projectService: ProjectService\r\n  ) { }\r\n\r\n  createProject() {\r\n    const projectParam = Object.assign(this.createProjectForm.value, {});\r\n    projectParam.teamId = this.globalService.currentTeamId;\r\n    this.projectService.addProject(projectParam).subscribe((resp: any) => {\r\n      if (resp.success) {\r\n        this.dialogRef.close({ isCreateProjectSuccess: true });\r\n      }\r\n    });\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./project-creator.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder"
                    },
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<ProjectCreatorComponent>"
                    },
                    {
                        "name": "CDRef",
                        "type": "ChangeDetectorRef"
                    },
                    {
                        "name": "globalService",
                        "type": "GlobalService"
                    },
                    {
                        "name": "projectService",
                        "type": "ProjectService"
                    }
                ],
                "line": 24,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<ProjectCreatorComponent>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "CDRef",
                        "type": "ChangeDetectorRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "globalService",
                        "type": "GlobalService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "projectService",
                        "type": "ProjectService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "projectName": {
                    "name": "projectName",
                    "getSignature": {
                        "name": "projectName",
                        "type": "",
                        "returnType": "",
                        "line": 23
                    }
                },
                "description": {
                    "name": "description",
                    "getSignature": {
                        "name": "description",
                        "type": "",
                        "returnType": "",
                        "line": 24
                    }
                }
            },
            "templateData": "<h1 mat-dialog-title>Create a new project</h1>\n<mat-dialog-content>\n    <form [formGroup]=\"createProjectForm\">\n        <div class=\"form-field-row\">\n            <mat-form-field appearance=\"outline\">\n                <mat-label>project name</mat-label>\n                <input matInput formControlName=\"projectName\" required>\n                <mat-error *ngIf=\"projectName.errors?.required\">Project name is required</mat-error>\n                <mat-error *ngIf=\"projectName.errors?.maxlength\">\n                    Project name letters should less than {{projectName.errors?.maxlength.requiredLength}}.\n                </mat-error>\n            </mat-form-field>\n            <div class=\"field-feedback\">\n                <mat-icon class=\"checked-icon\" *ngIf=\"projectName.dirty&&projectName.valid\">check_circle_outline</mat-icon>\n                <mat-icon color=\"warn\" *ngIf=\"projectName.dirty&&projectName.invalid\">highlight_off</mat-icon>\n                <mat-icon color=\"accent\" *ngIf=\"projectName.pending\">hourglass_empty</mat-icon>\n            </div>\n        </div>\n        <div class=\"form-field-row\">\n            <mat-form-field appearance=\"outline\">\n                <mat-label>description</mat-label>\n                <textarea matInput formControlName=\"description\"></textarea>\n                <mat-error *ngIf=\"description.errors?.maxlength\">\n                    Project description letters should less than {{description.errors?.maxlength.requiredLength}}.\n                </mat-error>\n            </mat-form-field>\n            <div class=\"field-feedback\">\n                <mat-icon class=\"checked-icon\" *ngIf=\"description.dirty&&description.valid\">check_circle_outline\n                </mat-icon>\n                <mat-icon color=\"warn\" *ngIf=\"description.dirty&&description.invalid\">highlight_off</mat-icon>\n            </div>\n        </div>\n    </form>\n</mat-dialog-content>\n<div mat-dialog-actions [align]=\"'end'\">\n    <button mat-flat-button mat-dialog-close>cancel</button>\n    <button mat-flat-button color=\"primary\" [disabled]=\"!createProjectForm.valid\" (click)=\"createProject()\">create</button>\n</div>"
        },
        {
            "name": "ProjectListItemComponent",
            "id": "component-ProjectListItemComponent-c3cdc62595f45c2a282c617654b26afc",
            "file": "src/app/shared/components/project-list-item/project-list-item.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "kanpm-project-list-item",
            "styleUrls": [
                "./project-list-item.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./project-list-item.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "project",
                    "line": 12,
                    "type": "Project"
                }
            ],
            "outputsClass": [
                {
                    "name": "projectClick",
                    "defaultValue": "new EventEmitter<Project>()",
                    "line": 13,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "emitProjectItemClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, ChangeDetectionStrategy, Input, EventEmitter, Output } from '@angular/core';\r\nimport { Project } from 'core/types/project';\r\n\r\n@Component({\r\n  selector: 'kanpm-project-list-item',\r\n  templateUrl: './project-list-item.component.html',\r\n  styleUrls: ['./project-list-item.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class ProjectListItemComponent implements OnInit {\r\n\r\n  @Input() project: Project;\r\n  @Output() projectClick = new EventEmitter<Project>();\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n  emitProjectItemClick() {\r\n    this.projectClick.emit(this.project);\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n  display: block;\r\n}\r\n\r\n.root-wrapper {\r\n  display: flex;\r\n  align-items: center;\r\n  cursor: pointer;\r\n  padding: 12px 12px 6px;\r\n}\r\n\r\n.project-icon {\r\n  height: 40px;\r\n  width: 40px;\r\n  font-size: 40px;\r\n  margin-right: 32px;\r\n}\r\n\r\n.project-title {\r\n  flex: 1 1 auto;\r\n  margin: 0;\r\n  height: 40px;\r\n\r\n  span {\r\n    line-height: 40px;\r\n  }\r\n}\r\n\r\n.project-operation-wrapper {\r\n  display: flex;\r\n  align-items: center;\r\n  height: 40px;\r\n\r\n  a {\r\n    margin-right: 8px;\r\n  }\r\n\r\n  .operation-icon {\r\n    height: 16px;\r\n    width: 16px;\r\n    font-size: 16px;\r\n  }\r\n}\r\n",
                    "styleUrl": "./project-list-item.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 13
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"root-wrapper\" (click)=\"emitProjectItemClick()\">\r\n  <mat-icon color=\"primary\" class=\"project-icon\">folder</mat-icon>\r\n  <div class=\"mat-h3 project-title\">\r\n    <span>{{project.projectName}}</span>\r\n  </div>\r\n  <div class=\"project-operation-wrapper\">\r\n    <a>\r\n      <mat-icon class=\"operation-icon\">person_add</mat-icon>\r\n    </a>\r\n    <a>\r\n      <mat-icon class=\"operation-icon\">settings</mat-icon>\r\n    </a>\r\n    <a>\r\n      <mat-icon class=\"star-icon\" color=\"accent\">star</mat-icon>\r\n    </a>\r\n  </div>\r\n</div>\r\n<mat-divider></mat-divider>"
        },
        {
            "name": "ProjectTasksComponent",
            "id": "component-ProjectTasksComponent-7a4a477124c714ebc517fe21ebc34ae1",
            "file": "src/app/pages/project/project-tasks/project-tasks.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "styleUrls": [
                "./project-tasks.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./project-tasks.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "isShowCreatePane",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "taskDetailDrawer",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'taskDetailDrawer'"
                        }
                    ]
                },
                {
                    "name": "taskLists",
                    "defaultValue": "[]",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methodsClass": [
                {
                    "name": "dropTaskCard",
                    "args": [
                        {
                            "name": "event",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "dropTaskList",
                    "args": [
                        {
                            "name": "event",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14
                },
                {
                    "name": "test",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { moveItemInArray, transferArrayItem } from '@angular/cdk/drag-drop';\r\n\r\n@Component({\r\n  templateUrl: './project-tasks.component.html',\r\n  styleUrls: ['./project-tasks.component.scss']\r\n})\r\nexport class ProjectTasksComponent implements OnInit {\r\n\r\n  @ViewChild('taskDetailDrawer') taskDetailDrawer;\r\n  taskLists = [];\r\n  isShowCreatePane = false;\r\n\r\n  ngOnInit(): void {\r\n    for (let index = 0; index < 3; index++) {\r\n      const taskList = {\r\n        id: `${index}`,\r\n        name: '测试任务列表0' + index,\r\n        connected: index !== 2 ? `${index + 1}` : '0',\r\n        tasks: []\r\n      };\r\n      const random = Math.floor(Math.random() * 5 + 1);\r\n      for (let taskID = 0; taskID < random; taskID++) {\r\n        taskList.tasks.push({\r\n          name: '任务' + taskID\r\n        });\r\n      }\r\n      this.taskLists.push(taskList);\r\n    }\r\n  }\r\n\r\n  dropTaskList(event) {\r\n    moveItemInArray(this.taskLists, event.previousIndex, event.currentIndex);\r\n  }\r\n\r\n  dropTaskCard(event) {\r\n    if (event.previousContainer === event.container) {\r\n      moveItemInArray(event.container.data.tasks, event.previousIndex, event.currentIndex);\r\n    } else {\r\n      transferArrayItem(event.previousContainer.data.tasks,\r\n        event.container.data.tasks,\r\n        event.previousIndex,\r\n        event.currentIndex);\r\n    }\r\n  }\r\n\r\n  test() {\r\n    this.taskDetailDrawer.open();\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"~@angular/material/theming\";\r\n\r\n:host {\r\n  display: block;\r\n  height: 100%;\r\n}\r\n\r\n.tasks-root-container {\r\n  height: 100%;\r\n}\r\n\r\n.task-detail-container {\r\n  width: 50%;\r\n  min-width: 660px;\r\n  max-width: 879px;\r\n}\r\n\r\n.task-list-group-container {\r\n  display: flex;\r\n  flex-direction: column;\r\n  height: 100%;\r\n  padding: 10px;\r\n\r\n  .kanban-header {\r\n    display: flex;\r\n    height: 40px;\r\n    justify-content: space-between;\r\n    margin: 8px 0;\r\n\r\n    .kanban-switch-button-group {\r\n      display: inline-flex;\r\n      align-items: center;\r\n    }\r\n  }\r\n\r\n  .kanban-wrapper {\r\n    display: flex;\r\n    align-items: flex-start;\r\n    height: calc(100% - 56px);\r\n  }\r\n}\r\n\r\n.task-list-wrapper {\r\n  flex-shrink: 0;\r\n  width: 296px;\r\n  height: 100%;\r\n  margin-right: 16px;\r\n  border-radius: 5px;\r\n}\r\n\r\n.task-list {\r\n  display: flex;\r\n  flex-direction: column;\r\n  box-sizing: border-box;\r\n  position: relative;\r\n  padding: 0 10px;\r\n  max-height: 100%;\r\n  border-radius: 3px;\r\n\r\n  .list-header {\r\n    height: 48px;\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n\r\n    span {\r\n      margin: 0;\r\n    }\r\n  }\r\n\r\n  ul.list-content {\r\n    flex: 1;\r\n    min-height: 90px;\r\n    overflow: auto;\r\n  }\r\n\r\n  .list-footer {\r\n    border-radius: 5px;\r\n    margin: 10px 0;\r\n    padding: 10px;\r\n\r\n    .task-quick-create-button {\r\n      display: flex;\r\n      align-items: center;\r\n      cursor: pointer;\r\n\r\n      span {\r\n        margin-left: 6px;\r\n        font-size: 16px;\r\n        line-height: 24px;\r\n      }\r\n    }\r\n\r\n    .task-quick-create-pane {\r\n      width: 100%;\r\n\r\n      .task-additional-info {\r\n        display: flex;\r\n        justify-content: space-between;\r\n        margin-bottom: 6px;\r\n\r\n        .icon {\r\n          font-size: 18px;\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n.cdk-drag-preview {\r\n  opacity: 100;\r\n  @include mat-elevation(24);\r\n}\r\n\r\n.cdk-drag-placeholder {\r\n  opacity: 0;\r\n}\r\n",
                    "styleUrl": "./project-tasks.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "OnInit"
            ],
            "templateData": "<mat-drawer-container class=\"tasks-root-container\">\r\n  <mat-drawer #taskDetailDrawer class=\"task-detail-container\" mode=\"cover\" position=\"end\">\r\n    <kanpm-task-detail></kanpm-task-detail>\r\n  </mat-drawer>\r\n  <mat-drawer-content class=\"task-list-group-container\">\r\n    <div class=\"kanban-header\">\r\n      <section class=\"kanban-switch-button-group\">\r\n        <mat-icon>menu</mat-icon>\r\n        <span>任务</span>\r\n      </section>\r\n      <section>\r\n        <button mat-button [matMenuTriggerFor]=\"menu\">筛选</button>\r\n        <button mat-button [matMenuTriggerFor]=\"menu\">排序</button>\r\n        <mat-menu #menu=\"matMenu\">\r\n          <button mat-menu-item>Item 1</button>\r\n          <button mat-menu-item>Item 2</button>\r\n        </mat-menu>\r\n      </section>\r\n    </div>\r\n    <!-- task list drag zone -->\r\n    <div cdkDropList class=\"kanban-wrapper\" cdkDropListOrientation=\"horizontal\"\r\n      (cdkDropListDropped)=\"dropTaskList($event)\">\r\n      <div cdkDrag *ngFor=\"let list of taskLists\" class=\"task-list-wrapper mat-elevation-z8\">\r\n        <div class=\"task-list\">\r\n          <div cdkDragHandle class=\"list-header\">\r\n            <span class=\"mat-h3\">\r\n              {{list.name}}<em>0</em>/4\r\n            </span>\r\n            <mat-icon>more_horiz</mat-icon>\r\n          </div>\r\n          <!-- task card drag zone -->\r\n          <ul cdkDropList class=\"list-content\" id=\"{{list.id}}\" [cdkDropListData]=\"list\"\r\n            [cdkDropListConnectedTo]=\"list.connected\" (cdkDropListDropped)=\"dropTaskCard($event)\">\r\n            <li cdkDrag *ngFor=\"let task of list.tasks; index as i\">\r\n              <kanpm-task-card [task]=task (click)=\"test()\"></kanpm-task-card>\r\n            </li>\r\n          </ul>\r\n          <div class=\"list-footer\">\r\n            <div class=\"task-quick-create-pane\" *ngIf=\"isShowCreatePane;else create_button\">\r\n              <mat-form-field style=\"width: 100%;\">\r\n                <mat-label>任务描述</mat-label>\r\n                <textarea matInput></textarea>\r\n              </mat-form-field>\r\n              <div class=\"task-additional-info\">\r\n                <div>\r\n                  <mat-icon class=\"icon\">calendar_today</mat-icon>\r\n                  <mat-icon class=\"icon\">person_add</mat-icon>\r\n                </div>\r\n                <div>\r\n                  <mat-checkbox></mat-checkbox> 只对参与者可见\r\n                </div>\r\n              </div>\r\n              <button mat-raised-button color=\"primary\">创建任务</button>\r\n              <button mat-button (click)=\"isShowCreatePane=false\">取消</button>\r\n            </div>\r\n            <ng-template #create_button>\r\n              <div class=\"task-quick-create-button\" (click)=\"isShowCreatePane=true\">\r\n                <mat-icon>add</mat-icon>\r\n                <span>新建任务</span>\r\n              </div>\r\n            </ng-template>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </mat-drawer-content>\r\n</mat-drawer-container>\r\n"
        },
        {
            "name": "RegisterComponent",
            "id": "component-RegisterComponent-aeaaf73ee096b70dc633b966c04d8209",
            "file": "src/app/pages/authentication/register/register.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "kanpm-register",
            "styleUrls": [
                "./register.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./register.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "isPasswordHide",
                    "defaultValue": "true",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "registerForm",
                    "defaultValue": "this.fb.group({\r\n    userName: ['', [\r\n      Validators.required,\r\n      Validators.maxLength(64)\r\n    ], [this.userNameUniqueValidator.bind(this)]],\r\n    password: ['', [\r\n      Validators.required,\r\n      Validators.minLength(6),\r\n      Validators.maxLength(64),\r\n      this.valueFormatValidatorFactory(/^(?=.*\\d)(?=.*[a-zA-Z])[\\da-zA-Z]{6,64}$/)\r\n    ]],\r\n    passwordConfirm: ['', [\r\n      Validators.required\r\n    ]]\r\n  }, {\r\n    validators: this.passwordConfirmValidator,\r\n    updateOn: 'blur'\r\n  })",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44
                },
                {
                    "name": "passwordConfirmValidator",
                    "args": [
                        {
                            "name": "group",
                            "type": "FormGroup"
                        }
                    ],
                    "optional": false,
                    "returnType": "ValidationErrors | null",
                    "typeParameters": [],
                    "line": 54,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "group",
                            "type": "FormGroup",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "submitRegisterForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 78
                },
                {
                    "name": "userNameUniqueValidator",
                    "args": [
                        {
                            "name": "control",
                            "type": "AbstractControl"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ValidationErrors | null>",
                    "typeParameters": [],
                    "line": 66,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "control",
                            "type": "AbstractControl",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "valueFormatValidatorFactory",
                    "args": [
                        {
                            "name": "re",
                            "type": "RegExp"
                        }
                    ],
                    "optional": false,
                    "returnType": "ValidatorFn",
                    "typeParameters": [],
                    "line": 47,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "re",
                            "type": "RegExp",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, ChangeDetectionStrategy, ChangeDetectorRef } from '@angular/core';\r\nimport { FormBuilder, Validators, ValidatorFn, AbstractControl, ValidationErrors, FormGroup } from '@angular/forms';\r\nimport { AuthenticationService } from 'core/services/authentication.service';\r\nimport { Observable, of } from 'rxjs';\r\nimport { map, catchError, finalize } from 'rxjs/operators';\r\n\r\n@Component({\r\n  selector: 'kanpm-register',\r\n  templateUrl: './register.component.html',\r\n  styleUrls: ['./register.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class RegisterComponent implements OnInit {\r\n\r\n  isPasswordHide = true;\r\n  registerForm = this.fb.group({\r\n    userName: ['', [\r\n      Validators.required,\r\n      Validators.maxLength(64)\r\n    ], [this.userNameUniqueValidator.bind(this)]],\r\n    password: ['', [\r\n      Validators.required,\r\n      Validators.minLength(6),\r\n      Validators.maxLength(64),\r\n      this.valueFormatValidatorFactory(/^(?=.*\\d)(?=.*[a-zA-Z])[\\da-zA-Z]{6,64}$/)\r\n    ]],\r\n    passwordConfirm: ['', [\r\n      Validators.required\r\n    ]]\r\n  }, {\r\n    validators: this.passwordConfirmValidator,\r\n    updateOn: 'blur'\r\n  });\r\n  get userName() { return this.registerForm.get('userName'); }\r\n  get password() { return this.registerForm.get('password'); }\r\n  get passwordConfirm() { return this.registerForm.get('passwordConfirm'); }\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private authServer: AuthenticationService,\r\n    private CDRef: ChangeDetectorRef\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n  private valueFormatValidatorFactory(re: RegExp): ValidatorFn {\r\n    return (control: AbstractControl): ValidationErrors | null => {\r\n      const forbidden = re.test(control.value);\r\n      return forbidden ? null : { valueFormat: { value: control.value } };\r\n    };\r\n  }\r\n\r\n  private passwordConfirmValidator(group: FormGroup): ValidationErrors | null {\r\n    const password = group.get('password');\r\n    const passwordConfirm = group.get('passwordConfirm');\r\n    const consistent = password && passwordConfirm && password.value === passwordConfirm.value;\r\n    if (consistent) {\r\n      return null;\r\n    } else {\r\n      passwordConfirm.setErrors({ passwordConfirm: true });\r\n      return { passwordConfirm: true };\r\n    }\r\n  }\r\n\r\n  private userNameUniqueValidator(control: AbstractControl): Observable<ValidationErrors | null> {\r\n    return this.authServer.verifyUserNameOrEmail(control.value).pipe(\r\n      map(response => {\r\n        return response ? null : { verifyUserName: true };\r\n      }),\r\n      finalize(() => {\r\n        this.CDRef.markForCheck();\r\n      }),\r\n      catchError(() => of(null))\r\n    );\r\n  }\r\n\r\n  submitRegisterForm() {\r\n    this.authServer.signUp(this.registerForm.value).subscribe(resp => {\r\n      console.log(resp);\r\n    });\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n  display: block;\r\n}\r\n\r\n.register-root {\r\n  width: 550px;\r\n}\r\n\r\n.register-form {\r\n  width: 100%;\r\n}\r\n\r\n\r\n",
                    "styleUrl": "./register.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder"
                    },
                    {
                        "name": "authServer",
                        "type": "AuthenticationService"
                    },
                    {
                        "name": "CDRef",
                        "type": "ChangeDetectorRef"
                    }
                ],
                "line": 36,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authServer",
                        "type": "AuthenticationService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "CDRef",
                        "type": "ChangeDetectorRef",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "userName": {
                    "name": "userName",
                    "getSignature": {
                        "name": "userName",
                        "type": "",
                        "returnType": "",
                        "line": 34
                    }
                },
                "password": {
                    "name": "password",
                    "getSignature": {
                        "name": "password",
                        "type": "",
                        "returnType": "",
                        "line": 35
                    }
                },
                "passwordConfirm": {
                    "name": "passwordConfirm",
                    "getSignature": {
                        "name": "passwordConfirm",
                        "type": "",
                        "returnType": "",
                        "line": 36
                    }
                }
            },
            "templateData": "<div class=\"register-root\">\r\n  <form class=\"register-form\" [formGroup]=\"registerForm\" (submit)=\"submitRegisterForm()\">\r\n    <div class=\"form-field-row\">\r\n      <mat-form-field appearance=\"outline\">\r\n        <mat-label>User Name</mat-label>\r\n        <input matInput formControlName=\"userName\" required>\r\n        <mat-error *ngIf=\"userName.errors?.required\">user name is required</mat-error>\r\n        <mat-error *ngIf=\"userName.errors?.maxlength\">\r\n          user name letters should less than {{userName.errors?.maxlength.requiredLength}}.\r\n        </mat-error>\r\n        <mat-error *ngIf=\"userName.errors?.verifyUserName\">user name has been registed</mat-error>\r\n      </mat-form-field>\r\n      <div class=\"field-feedback\">\r\n        <mat-icon class=\"checked-icon\" *ngIf=\"userName.dirty&&userName.valid\">check_circle_outline</mat-icon>\r\n        <mat-icon color=\"warn\" *ngIf=\"userName.dirty&&userName.invalid\">highlight_off</mat-icon>\r\n        <mat-icon color=\"accent\" *ngIf=\"userName.pending\">hourglass_empty</mat-icon>\r\n      </div>\r\n    </div>\r\n    <div class=\"form-field-row\">\r\n      <mat-form-field appearance=\"outline\">\r\n        <mat-label>Password</mat-label>\r\n        <input matInput formControlName=\"password\" required [type]=\"isPasswordHide ? 'password' : 'text'\">\r\n        <button mat-icon-button matSuffix (click)=\"isPasswordHide = !isPasswordHide\" [attr.aria-label]=\"'Hide password'\"\r\n          [attr.aria-pressed]=\"isPasswordHide\">\r\n          <mat-icon>{{isPasswordHide ? 'visibility_off' : 'visibility'}}</mat-icon>\r\n        </button>\r\n        <mat-error *ngIf=\"password.errors?.valueFormat\">password must has 6 ~ 64 number and letters </mat-error>\r\n      </mat-form-field>\r\n      <div class=\"field-feedback\">\r\n        <mat-icon class=\"checked-icon\" *ngIf=\"password.dirty&&password.valid\">check_circle_outline</mat-icon>\r\n        <mat-icon color=\"warn\" *ngIf=\"password.dirty&&password.invalid\">highlight_off</mat-icon>\r\n      </div>\r\n    </div>\r\n    <div class=\"form-field-row\">\r\n      <mat-form-field appearance=\"outline\">\r\n        <mat-label>Password Confirm</mat-label>\r\n        <input matInput formControlName=\"passwordConfirm\" required [type]=\"isPasswordHide ? 'password' : 'text'\">\r\n        <button mat-icon-button matSuffix (click)=\"isPasswordHide = !isPasswordHide\" [attr.aria-label]=\"'Hide password'\"\r\n          [attr.aria-pressed]=\"isPasswordHide\">\r\n          <mat-icon>{{isPasswordHide ? 'visibility_off' : 'visibility'}}</mat-icon>\r\n        </button>\r\n        <mat-error>inconsistent password confirm entered\r\n        </mat-error>\r\n      </mat-form-field>\r\n      <div class=\"field-feedback\">\r\n        <mat-icon class=\"checked-icon\" *ngIf=\"passwordConfirm.dirty&&passwordConfirm.valid\">check_circle_outline\r\n        </mat-icon>\r\n        <mat-icon color=\"warn\" *ngIf=\"passwordConfirm.dirty&&passwordConfirm.invalid\">highlight_off</mat-icon>\r\n      </div>\r\n    </div>\r\n    <div class=\"form-field-row\">\r\n      <button mat-raised-button type=\"submit\" color=\"primary\">register</button>\r\n      <button mat-button>cancel</button>\r\n    </div>\r\n  </form>\r\n</div>\r\n"
        },
        {
            "name": "TaskCardComponent",
            "id": "component-TaskCardComponent-cf844445f30bd96bd028bb31735fd420",
            "file": "src/app/shared/components/task-card/task-card.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "kanpm-task-card",
            "styleUrls": [
                "./task-card.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./task-card.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "task",
                    "line": 12,
                    "type": "Task"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "completedSubTask",
                    "args": [],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 19
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, ChangeDetectionStrategy, Input } from '@angular/core';\nimport { Task } from 'core/types/task';\n\n@Component({\n  selector: 'kanpm-task-card',\n  templateUrl: './task-card.component.html',\n  styleUrls: ['./task-card.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class TaskCardComponent implements OnInit {\n\n  @Input() task: Task;\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n  completedSubTask(): number {\n    return this.task.subTasks.filter(task => task.isComplete).length;\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".task-card {\n  &.low{\n    border-left: 2px solid green;\n  }\n  &.normal{\n    border-left: 2px solid orange;\n  }\n  &.high{\n    border-left: 2px solid red;\n  }\n}\n\n.card-content-wrapper {\n  display: flex;\n}\n\n.task-checkbox {\n  margin-right: 10px;\n}\n\n.task-content {\n  flex: 1 1 auto;\n  &.is-complete{\n    opacity: 0.5;\n  }\n  .task-title {\n    display: flex;\n    .title-text {\n      flex: 1;\n      margin-right: 8px;\n    }\n  }\n  .task-infos {\n    display: flex;\n    flex-wrap: wrap;\n    .task-info {\n      display: flex;\n      align-items: center;\n      margin-right: 8px;\n      margin-top: 4px;\n      white-space: nowrap;\n    }\n    .task-tag-red {\n      color: red;\n    }\n    .task-tag-blue {\n      color: blue;\n    }\n    .task-tag-green {\n      color: green;\n    }\n  }\n}\n",
                    "styleUrl": "./task-card.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 12
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<mat-card class=\"task-card\" [class.high]=\"task.priority === 'high'\" [class.normal]=\"task.priority === 'normal'\"\n  [class.low]=\"task.priority === 'low'\">\n  <div class=\"card-content-wrapper\">\n    <mat-checkbox [(ngModel)]=\"task.isComplete\" class=\"task-checkbox\"></mat-checkbox>\n    <!-- title + executor -->\n    <div class=\"task-content\" [class.is-complete]=\"task.isComplete\">\n      <section class=\"task-title\">\n        <header class=\"title-text mat-h4\">{{task.description}}</header>\n        <nz-avatar nzIcon=\"user\"></nz-avatar>\n      </section>\n      <!-- task infos -->\n      <section class=\"task-infos\">\n        <div *ngIf=\"task.subTasks&&task.subTasks.length\" class=\"task-info mat-caption\">\n          <mat-icon inline style=\"font-size: 16px; margin-right: 4px;\">list</mat-icon>\n          <span>{{completedSubTask()}} completed / {{task.subTasks.length}} total</span>\n        </div>\n        <div *ngIf=\"task.endTime\" class=\"task-info mat-caption\">\n          <mat-icon inline style=\"font-size: 16px; margin-right: 4px;\">calendar_today</mat-icon>\n          <span>{{task.endTime | date:'yyyy/MM/dd'}}</span>\n        </div>\n        <div *ngIf=\"task.remindTime\" class=\"task-info mat-caption\">\n          <mat-icon inline style=\"font-size: 16px; margin-right: 4px;\">alarm_on</mat-icon>\n          <span>{{task.remindTime | date:'MM/dd, HH:mm'}}</span>\n        </div>\n        <div *ngIf=\"task.repeat\" class=\"task-info mat-caption\">\n          <mat-icon inline style=\"font-size: 16px; margin-right: 4px;\">repeat</mat-icon>\n          <span>{{ task.repeat}}</span>\n        </div>\n        <div *ngIf=\"task.remark\" class=\"task-info mat-caption\">\n          <mat-icon inline style=\"font-size: 16px;\">description</mat-icon>\n        </div>\n        <div *ngIf=\"task.attachments && task.attachments.length\" class=\" task-info mat-caption\">\n          <mat-icon inline style=\"font-size: 16px;\">attachment</mat-icon>\n        </div>\n        <!-- TODO tag component -->\n        <div class=\"task-info mat-caption task-tag-red\">\n          important\n        </div>\n        <div class=\"task-info mat-caption task-tag-blue\">\n          developing\n        </div>\n        <div class=\"task-info mat-caption task-tag-green\">\n          normal\n        </div>\n      </section>\n    </div>\n  </div>\n</mat-card>"
        },
        {
            "name": "TaskDetailComponent",
            "id": "component-TaskDetailComponent-cb9b134982af97b7f0076258abedd8ee",
            "file": "src/app/shared/components/task-detail/task-detail.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "kanpm-task-detail",
            "styleUrls": [
                "./task-detail.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./task-detail.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, ChangeDetectionStrategy } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'kanpm-task-detail',\r\n  templateUrl: './task-detail.component.html',\r\n  styleUrls: ['./task-detail.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class TaskDetailComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n  display: block;\r\n  height: 100%;\r\n  padding: 10px;\r\n}\r\n\r\n.task-detail-root {\r\n  display: flex;\r\n  flex-direction: column;\r\n  height: 100%;\r\n\r\n  .task-header {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n  }\r\n\r\n  .task-info {\r\n    flex: 1;\r\n    display: flex;\r\n    flex-direction: column;\r\n    padding: 10px;\r\n    overflow-y: auto;\r\n  }\r\n}\r\n\r\n.task-directory {\r\n  height: 40px;\r\n\r\n  .directory-divider {\r\n    display: inline;\r\n    margin-left: 16px;\r\n  }\r\n}\r\n\r\n.task-info-wrapper {\r\n  display: flex;\r\n  align-items: flex-start;\r\n  margin-bottom: 10px;\r\n\r\n  .base-info {\r\n    flex: 1;\r\n    padding: 0 10px;\r\n  }\r\n}\r\n\r\n.task-comment-wrapper {\r\n  display: flex;\r\n  width: 100%;\r\n  padding: 20px 30px;\r\n\r\n  .comment-avator {\r\n    height: 32px;\r\n    width: 32px;\r\n    font-size: 32px;\r\n    margin-right: 8px;\r\n  }\r\n\r\n  .comment-items {\r\n    flex: 1;\r\n\r\n    .comment-header {\r\n      display: inline-flex;\r\n      align-items: center;\r\n\r\n      .user {\r\n        font-size: 16px;\r\n        margin-right: 16px;\r\n      }\r\n\r\n      .create-time {\r\n        font-size: 12px;\r\n        color: #ccc;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n\r\n.comment-emitter {\r\n  width: 100%;\r\n  padding: 12px 30px;\r\n\r\n  .comment-editor {\r\n    width: 100%;\r\n    margin-bottom: 10px;\r\n  }\r\n\r\n  .emitter-footer {\r\n    display: flex;\r\n\r\n    .tool-bar {\r\n      flex: 1;\r\n\r\n      li {\r\n        float: left;\r\n        padding: 0 6px;\r\n      }\r\n    }\r\n  }\r\n}\r\n",
                    "styleUrl": "./task-detail.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 9
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"task-detail-root\">\r\n  <div class=\"task-header\">\r\n    <div class=\"task-directory\">\r\n      <span class=\"mat-h3\">测试项目1</span>\r\n      <mat-divider vertical class=\"directory-divider\"></mat-divider>\r\n      <button mat-button><span class=\"mat-h3\">开发任务 - 测试任务列表00</span></button>\r\n    </div>\r\n    <div>\r\n      <mat-icon>sort</mat-icon>\r\n      <mat-icon>attachment</mat-icon>\r\n      <mat-icon>more_vert</mat-icon>\r\n    </div>\r\n  </div>\r\n  <mat-divider></mat-divider>\r\n  <div class=\"task-info\">\r\n    <div class=\"task-info-wrapper\">\r\n      <mat-checkbox class=\"task-checkbox\"></mat-checkbox>\r\n      <div class=\"base-info\">\r\n        <h2>任务0</h2>\r\n        <div>\r\n          <!-- <span>研发调研</span> -->\r\n          <!-- <mat-basic-chip style=\"background: red;\">研发调研</mat-basic-chip> -->\r\n          <nz-tag [nzColor]=\"'magenta'\">研发调研</nz-tag>\r\n          <!-- <mat-basic-chip style=\"background: blue;\">测试开发</mat-basic-chip> -->\r\n          <nz-tag [nzColor]=\"'red'\">测试开发</nz-tag>\r\n          <button mat-icon-button>\r\n            <mat-icon>add</mat-icon>\r\n          </button>\r\n        </div>\r\n        <div>\r\n          <span>暂无备注</span>\r\n          <button mat-icon-button>\r\n            <mat-icon>add</mat-icon>\r\n          </button>\r\n        </div>\r\n        <div>\r\n          <div style=\"display: flex; align-items: center;\">\r\n            <span>参与人 ：</span>\r\n            <nz-avatar nzIcon=\"user\"></nz-avatar>\r\n            <button mat-icon-button>\r\n              <mat-icon>add</mat-icon>\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"assign-info\">\r\n        <div>执行人 ：Anderson</div>\r\n        <div>开始日期 -- 结束时间</div>\r\n      </div>\r\n    </div>\r\n    <mat-divider></mat-divider>\r\n    <section>\r\n      <mat-tab-group>\r\n        <mat-tab label=\"评论\">\r\n          <nz-comment nzAuthor=\"Han Solo\">\r\n            <nz-avatar nz-comment-avatar nzIcon=\"user\"></nz-avatar>\r\n            <nz-comment-content>\r\n              <p>\r\n                We supply a series of design principles, practical patterns and high quality design resources (Sketch\r\n                and Axure), to help people\r\n                create their product prototypes beautifully and efficiently.\r\n              </p>\r\n            </nz-comment-content>\r\n            <nz-comment-action>\r\n              <i nz-tooltip nzTooltipTitle=\"Like\" nz-icon nzType=\"like\"></i>\r\n              <span class=\"count like\">1</span>\r\n            </nz-comment-action>\r\n            <nz-comment-action>\r\n              <i nz-tooltip nzTooltipTitle=\"Dislike\" nz-icon nzType=\"dislike\"></i>\r\n              <span class=\"count dislike\">22</span>\r\n            </nz-comment-action>\r\n            <nz-comment-action>Reply to</nz-comment-action>\r\n          </nz-comment>\r\n        </mat-tab>\r\n        <mat-tab label=\"动态\">暂无动态</mat-tab>\r\n      </mat-tab-group>\r\n    </section>\r\n  </div>\r\n  <mat-divider></mat-divider>\r\n  <div class=\"task-footer\">\r\n    <div class=\"comment-emitter\">\r\n      <mat-form-field class=\"comment-editor\">\r\n        <mat-label>发表评论 ：</mat-label>\r\n        <textarea matInput #commentEditor cdkTextareaAutosize placeholder=\"评论内容，文字上限2000\" cdkAutosizeMinRows=\"2\"\r\n          cdkAutosizeMaxRows=\"5\"></textarea>\r\n        <mat-hint align=\"end\">{{commentEditor.value.length}} / 2000</mat-hint>\r\n      </mat-form-field>\r\n      <div class=\"emitter-footer\">\r\n        <ul class=\"tool-bar\">\r\n          <li>\r\n            <mat-icon>emoji_emotions</mat-icon>\r\n          </li>\r\n          <li>\r\n            <mat-icon>alternate_email</mat-icon>\r\n          </li>\r\n          <li>\r\n            <mat-icon>link</mat-icon>\r\n          </li>\r\n        </ul>\r\n        <div>\r\n          <button mat-button>取消</button>\r\n          <button mat-raised-button color=\"primary\">发送</button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>"
        },
        {
            "name": "TaskListItemComponent",
            "id": "component-TaskListItemComponent-02487aa6efbaf52fdf5db0f6f7166435",
            "file": "src/app/shared/components/task-list-item/task-list-item.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "kanpm-task-list-item",
            "styleUrls": [
                "./task-list-item.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./task-list-item.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, ChangeDetectionStrategy } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'kanpm-task-list-item',\r\n  templateUrl: './task-list-item.component.html',\r\n  styleUrls: ['./task-list-item.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class TaskListItemComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n  display: block;\r\n}\r\n\r\n.root-wrapper {\r\n  display: flex;\r\n  cursor: pointer;\r\n  padding: 12px 12px 6px;\r\n}\r\n\r\n.task-info-wrapper {\r\n  margin: 0 12px;\r\n  flex: 1 1 auto;\r\n\r\n  .task-infos {\r\n    display: flex;\r\n    align-items: center;\r\n    height: 30px;\r\n    margin-top: 6px;\r\n    \r\n    .info-with-icon {\r\n      .icon{\r\n        font-size: 16px;\r\n        height: 16px;\r\n        width: 16px;\r\n        margin-right: 4px;\r\n      }\r\n      display: flex;\r\n      align-items: center;\r\n      margin-right: 16px;\r\n    }\r\n  }\r\n}\r\n\r\n.task-time-label {\r\n  display: inline-block;\r\n  padding: 0 8px;\r\n  line-height: 20px;\r\n  font-size: 12px;\r\n  vertical-align: middle;\r\n}\r\n",
                    "styleUrl": "./task-list-item.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 9
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"root-wrapper\">\r\n  <div>\r\n    <mat-checkbox></mat-checkbox>\r\n  </div>\r\n  <div class=\"task-info-wrapper\">\r\n    <span class=\"task-title\">任务XXX</span>\r\n    <div class=\"task-infos\">\r\n      <!-- task status -->\r\n      <nz-tag [nzColor]=\"'green'\">进行中</nz-tag>\r\n      <div class=\"info-with-icon\">\r\n        <!-- task type -->\r\n        <mat-icon class=\"icon\">library_add_check</mat-icon>\r\n        <span class=\"mat-caption\">任务</span>\r\n      </div>\r\n      <div class=\"info-with-icon\">\r\n        <!-- project -->\r\n        <mat-icon class=\"icon\">layers</mat-icon>\r\n        <span class=\"mat-caption\">项目1</span>\r\n      </div>\r\n      <div class=\"info-with-icon\">\r\n        <!-- parent task -->\r\n        <mat-icon class=\"icon\">account_tree</mat-icon>\r\n        <span class=\"mat-caption\">父级任务</span>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div class=\"task-assgin-wrapper\">\r\n    <span class=\"task-time-label\">开始时间</span>\r\n    <span class=\"task-time-divider\">-</span>\r\n    <span class=\"task-time-label\">结束时间</span>\r\n  </div>\r\n</div>\r\n<mat-divider></mat-divider>"
        },
        {
            "name": "TaskStackComponent",
            "id": "component-TaskStackComponent-3b5590f37da2e0aa21c98fc58f91a1fa",
            "file": "src/app/shared/components/task-stack/task-stack.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "kanpm-task-stack",
            "styleUrls": [
                "./task-stack.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./task-stack.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "list",
                    "line": 12,
                    "type": "TaskList"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "isLoading",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "isShowCreatePane",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "tasks",
                    "defaultValue": "[]",
                    "type": "Task[]",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methodsClass": [
                {
                    "name": "getStackStatus",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 22
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, ChangeDetectionStrategy, Input } from '@angular/core';\nimport { Task, TaskList } from 'core/types/task';\n\n@Component({\n  selector: 'kanpm-task-stack',\n  templateUrl: './task-stack.component.html',\n  styleUrls: ['./task-stack.component.scss'],\n  // changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class TaskStackComponent implements OnInit {\n\n  @Input() list: TaskList;\n  tasks: Task[] = [];\n  isLoading = false;\n  isShowCreatePane = false;\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n  getStackStatus(): string {\n    const completed = this.tasks.filter(task => task.isComplete);\n    return `${completed.length}/${this.tasks.length}`;\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "// @import \"~@angular/material/theming\";\n\n.task-stack-wrapper {\n  height: 100%;\n  border-radius: 5px;\n  border: 1px solid #ccc;\n}\n\n.task-stack {\n  display: flex;\n  flex-direction: column;\n  box-sizing: border-box;\n  position: relative;\n  max-height: 100%;\n  border-radius: 3px;\n}\n\n.stack-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  height: 64px;\n  padding: 0 10px;\n  margin-bottom: 10px;\n\n  .stack-name {\n    font-size: 18px;\n    font-weight: 400;\n    margin-right: 8px;\n  }\n}\n\n.stack-content {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  flex: 1;\n  overflow: hidden;\n\n  .task-list {\n    height: 100%;\n    width: 100%;\n    padding: 0 10px;\n    overflow-y: auto;\n    li {\n      margin-bottom: 10px;\n    }\n  }\n\n  .empty-content-tips {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    height: 100%;\n    min-height: 150px;\n    mat-icon {\n      height: 32px;\n      width: 32px;\n      font-size: 32px;\n    }\n  }\n\n  .list-loading {\n    height: 100%;\n    min-height: 150px;\n    flex-direction: column;\n  }\n}\n\n.stack-footer {\n  border-top: 1px solid #ccc;\n  padding: 16px 10px;\n\n  .task-quick-create-form {\n    mat-form-field {\n      width: 100%;\n    }\n    button {\n      margin-right: 5px;\n    }\n  }\n}\n\n// .cdk-drag-preview {\n//   opacity: 100;\n//   @include mat-elevation(24);\n// }\n\n// .cdk-drag-placeholder {\n//   opacity: 0;\n// }\n",
                    "styleUrl": "./task-stack.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 15
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"task-stack-wrapper\">\n  <div class=\"task-stack\">\n    <!-- stack header -->\n    <header cdkDragHandle class=\"stack-header mat-elevation-z1\">\n      <div>\n        <span class=\"stack-name\">stack name</span>\n        <span *ngIf=\"tasks&&tasks.length\" class=\"stack-status\">{{getStackStatus()}}</span>\n      </div>\n      <div>\n        <button mat-icon-button>\n          <mat-icon>add_task</mat-icon>\n        </button>\n        <button mat-icon-button>\n          <mat-icon>more_horiz</mat-icon>\n        </button>\n      </div>\n    </header>\n    <!-- stack content, task card drag zone -->\n    <div class=\"stack-content\">\n      <div *ngIf=\"isLoading\" class=\"flex-center list-loading\">\n        <mat-spinner [diameter]=\"24\" [strokeWidth]=\"4\"></mat-spinner>\n        <span>列表加载中</span>\n      </div>\n      <ul *ngIf=\"!isLoading && tasks.length != 0\" class=\"task-list\">\n        <li *ngFor=\"let task of tasks; index as i\">\n          <kanpm-task-card [task]=task></kanpm-task-card>\n        </li>\n      </ul>\n      <div *ngIf=\"!isLoading && tasks.length == 0\" class=\"empty-content-tips\">\n        <mat-icon color=\"primary\">check_box</mat-icon>\n        <span>列表无任务</span>\n        <span class=\"mat-caption\">动静有时，张驰有度</span>\n      </div>\n    </div>\n    <!-- stack footer -->\n    <footer *ngIf=\"!isLoading\" class=\"flex-center stack-footer\">\n      <ng-container *ngIf=\"isShowCreatePane;else create_button\">\n        <form class=\"task-quick-create-form\">\n          <mat-form-field appearance=\"outline\">\n            <mat-label>任务描述</mat-label>\n            <textarea matInput></textarea>\n          </mat-form-field>\n          <button mat-stroked-button color=\"primary\">创建</button>\n          <button mat-button (click)=\"isShowCreatePane=false\">取消</button>\n        </form>\n      </ng-container>\n      <ng-template #create_button>\n        <button mat-stroked-button color=\"primary\" (click)=\"isShowCreatePane=true\">快速创建任务</button>\n      </ng-template>\n    </footer>\n  </div>\n</div>"
        },
        {
            "name": "TeamComponent",
            "id": "component-TeamComponent-a0a5442a00ba3463a19e727cd32fff84",
            "file": "src/app/pages/team/team.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "styleUrls": [
                "./team.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./team.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "collaborators",
                    "defaultValue": "[]",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "relevantNavs",
                    "defaultValue": "[\r\n    { name: '首页', icon: 'home' },\r\n    { name: '我执行的', icon: 'how_to_reg' },\r\n    { name: '我参与的', icon: 'person_add' },\r\n    { name: '我创建的', icon: 'post_add' },\r\n  ]",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "teamId",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute, ParamMap } from '@angular/router';\r\nimport { GlobalService } from 'core/services/global.service';\r\nimport { TeamService } from 'core/services/team.service';\r\n\r\n@Component({\r\n  templateUrl: './team.component.html',\r\n  styleUrls: ['./team.component.scss']\r\n})\r\nexport class TeamComponent implements OnInit {\r\n\r\n  private teamId: string;\r\n\r\n  constructor(\r\n    private route: ActivatedRoute,\r\n    private teamService: TeamService,\r\n    private globalService: GlobalService\r\n  ) { }\r\n\r\n  relevantNavs = [\r\n    { name: '首页', icon: 'home' },\r\n    { name: '我执行的', icon: 'how_to_reg' },\r\n    { name: '我参与的', icon: 'person_add' },\r\n    { name: '我创建的', icon: 'post_add' },\r\n  ];\r\n\r\n  collaborators = [];\r\n\r\n  ngOnInit(): void {\r\n    const teamId = this.route.snapshot.paramMap.get('teamId');\r\n    this.globalService.currentTeamId = teamId;\r\n    this.globalService.currentTeam$ = this.teamService.getTeam(teamId);\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n  display: block;\r\n  height: 100%;\r\n}\r\n\r\n.group-side-container {\r\n  height: 100%;\r\n}\r\n\r\n.side-nav-wrapper {\r\n  padding: 0 60px 40px;\r\n}\r\n\r\n.side-nav-section {\r\n  padding-top: 40px;\r\n  width: 176px;\r\n\r\n  li {\r\n    display: block;\r\n    width: 100%;\r\n  }\r\n\r\n  header {\r\n    padding-left: 16px;\r\n  }\r\n\r\n\r\n  .nav-item-wrapper {\r\n    display: flex;\r\n    align-items: center;\r\n    padding: 10px 16px;\r\n    height: 40px;\r\n    box-sizing: border-box;\r\n    cursor: pointer;\r\n    border-radius: 4px;\r\n\r\n    .name {\r\n      flex: 1;\r\n      margin-left: 12px;\r\n    }\r\n  }\r\n\r\n}\r\n\r\n.group-content-container {\r\n  box-sizing: border-box;\r\n  padding: 40px 40px 0;\r\n}\r\n",
                    "styleUrl": "./team.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute"
                    },
                    {
                        "name": "teamService",
                        "type": "TeamService"
                    },
                    {
                        "name": "globalService",
                        "type": "GlobalService"
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "teamService",
                        "type": "TeamService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "globalService",
                        "type": "GlobalService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<mat-sidenav-container class=\"group-side-container\">\r\n  <mat-sidenav mode=\"side\" opened class=\"side-nav-wrapper\">\r\n    <section class=\"side-nav-section\">\r\n      <nav>\r\n        <ul>\r\n          <li *ngFor=\"let relevant of relevantNavs\">\r\n            <div class=\"nav-item-wrapper\">\r\n              <mat-icon>{{relevant.icon}}</mat-icon>\r\n              <span class=\"name mat-body-strong\">{{relevant.name}}</span>\r\n            </div>\r\n          </li>\r\n        </ul>\r\n      </nav>\r\n    </section>\r\n    <!-- <section class=\"side-nav-section\">\r\n      <header>项目</header>\r\n      <nav>\r\n        <ul>\r\n          <li *ngFor=\"let project of projects\">\r\n            <div class=\"nav-item-wrapper\" routerLink=\"/project/{{project.id}}\">\r\n              <mat-icon>folder_open</mat-icon>\r\n              <span class=\"name mat-body-strong\">{{project?.projectName}}</span>\r\n            </div>\r\n          </li>\r\n        </ul>\r\n      </nav>\r\n    </section> -->\r\n    <section class=\"side-nav-section\">\r\n      <header>团队成员</header>\r\n      <nav>\r\n        <ul>\r\n          <li *ngFor=\"let collaborator of collaborators\">\r\n            <div class=\"nav-item-wrapper\">\r\n              <mat-icon>person</mat-icon>\r\n              <span class=\"name mat-body-strong\">{{collaborator.name}}</span>\r\n            </div>\r\n          </li>\r\n        </ul>\r\n      </nav>\r\n    </section>\r\n  </mat-sidenav>\r\n  <mat-sidenav-content class=\"group-content-container\">\r\n    <router-outlet></router-outlet>\r\n  </mat-sidenav-content>\r\n</mat-sidenav-container>\r\n"
        },
        {
            "name": "TeamCreatorComponent",
            "id": "component-TeamCreatorComponent-8772f4cdab0f8b0c1f9413d06b26b744",
            "file": "src/app/shared/components/team-creator/team-creator.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "styleUrls": [
                "./team-creator.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./team-creator.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "createTeamForm",
                    "defaultValue": "this.fb.group({\r\n    teamName: ['', [\r\n      Validators.required,\r\n      Validators.maxLength(64)\r\n    ], [this.teamNameUniqueValidator.bind(this)]],\r\n    description: ['', [\r\n      Validators.maxLength(255),\r\n    ]]\r\n  }, { updateOn: 'blur' })",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [
                {
                    "name": "createTeam",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35
                },
                {
                    "name": "teamNameUniqueValidator",
                    "args": [
                        {
                            "name": "control",
                            "type": "AbstractControl"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ValidationErrors | null>",
                    "typeParameters": [],
                    "line": 38,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "control",
                            "type": "AbstractControl",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, ChangeDetectorRef, ChangeDetectionStrategy } from '@angular/core';\r\nimport { FormBuilder, Validators, AbstractControl, ValidationErrors } from '@angular/forms';\r\n\r\nimport { map, finalize, catchError } from 'rxjs/operators';\r\nimport { of, Observable } from 'rxjs';\r\nimport { MatDialogRef } from '@angular/material/dialog';\r\nimport { TeamService } from 'core/services/team.service';\r\n\r\n@Component({\r\n  templateUrl: './team-creator.component.html',\r\n  styleUrls: ['./team-creator.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class TeamCreatorComponent implements OnInit {\r\n\r\n  createTeamForm = this.fb.group({\r\n    teamName: ['', [\r\n      Validators.required,\r\n      Validators.maxLength(64)\r\n    ], [this.teamNameUniqueValidator.bind(this)]],\r\n    description: ['', [\r\n      Validators.maxLength(255),\r\n    ]]\r\n  }, { updateOn: 'blur' });\r\n  get teamName() { return this.createTeamForm.get('teamName'); }\r\n  get description() { return this.createTeamForm.get('description'); }\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private dialogRef: MatDialogRef<TeamCreatorComponent>,\r\n    private CDRef: ChangeDetectorRef,\r\n    private teamService: TeamService\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n  private teamNameUniqueValidator(control: AbstractControl): Observable<ValidationErrors | null> {\r\n    return this.teamService.verifyTeamName(control.value).pipe(\r\n      map(response => {\r\n        return response ? null : { verifyTeamName: true };\r\n      }),\r\n      finalize(() => {\r\n        this.CDRef.markForCheck();\r\n      }),\r\n      catchError(() => of(null))\r\n    );\r\n  }\r\n\r\n  createTeam() {\r\n    this.teamService.addTeam(this.createTeamForm.value).subscribe((resp: any) => {\r\n      if (resp.success) {\r\n        this.dialogRef.close({ isCreateTeamSuccess: true });\r\n      }\r\n    });\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./team-creator.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder"
                    },
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<TeamCreatorComponent>"
                    },
                    {
                        "name": "CDRef",
                        "type": "ChangeDetectorRef"
                    },
                    {
                        "name": "teamService",
                        "type": "TeamService"
                    }
                ],
                "line": 26,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<TeamCreatorComponent>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "CDRef",
                        "type": "ChangeDetectorRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "teamService",
                        "type": "TeamService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "teamName": {
                    "name": "teamName",
                    "getSignature": {
                        "name": "teamName",
                        "type": "",
                        "returnType": "",
                        "line": 25
                    }
                },
                "description": {
                    "name": "description",
                    "getSignature": {
                        "name": "description",
                        "type": "",
                        "returnType": "",
                        "line": 26
                    }
                }
            },
            "templateData": "<h1 mat-dialog-title>Create your Team</h1>\r\n<mat-dialog-content>\r\n    <form [formGroup]=\"createTeamForm\">\r\n        <div class=\"form-field-row\">\r\n            <mat-form-field appearance=\"outline\">\r\n                <mat-label>team name</mat-label>\r\n                <input matInput formControlName=\"teamName\" required>\r\n                <mat-error *ngIf=\"teamName.errors?.required\">team name is required</mat-error>\r\n                <mat-error *ngIf=\"teamName.errors?.maxlength\">\r\n                    team name letters should less than {{teamName.errors?.maxlength.requiredLength}}.\r\n                </mat-error>\r\n                <mat-error *ngIf=\"teamName.errors?.verifyTeamName\">team name has been registed</mat-error>\r\n            </mat-form-field>\r\n            <div class=\"field-feedback\">\r\n                <mat-icon class=\"checked-icon\" *ngIf=\"teamName.dirty&&teamName.valid\">check_circle_outline</mat-icon>\r\n                <mat-icon color=\"warn\" *ngIf=\"teamName.dirty&&teamName.invalid\">highlight_off</mat-icon>\r\n                <mat-icon color=\"accent\" *ngIf=\"teamName.pending\">hourglass_empty</mat-icon>\r\n            </div>\r\n        </div>\r\n        <div class=\"form-field-row\">\r\n            <mat-form-field appearance=\"outline\">\r\n                <mat-label>description</mat-label>\r\n                <textarea matInput formControlName=\"description\"></textarea>\r\n                <mat-error *ngIf=\"description.errors?.maxlength\">\r\n                    team description letters should less than {{description.errors?.maxlength.requiredLength}}.\r\n                </mat-error>\r\n            </mat-form-field>\r\n            <div class=\"field-feedback\">\r\n                <mat-icon class=\"checked-icon\" *ngIf=\"description.dirty&&description.valid\">check_circle_outline\r\n                </mat-icon>\r\n                <mat-icon color=\"warn\" *ngIf=\"description.dirty&&description.invalid\">highlight_off</mat-icon>\r\n            </div>\r\n        </div>\r\n    </form>\r\n</mat-dialog-content>\r\n<div mat-dialog-actions [align]=\"'end'\">\r\n    <button mat-flat-button mat-dialog-close>cancel</button>\r\n    <button mat-flat-button color=\"primary\" [disabled]=\"!createTeamForm.valid\" (click)=\"createTeam()\">create</button>\r\n</div>"
        },
        {
            "name": "TeamHomeComponent",
            "id": "component-TeamHomeComponent-af580d6a10481a3e0556609b507b334e",
            "file": "src/app/pages/team/team-home/team-home.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "styleUrls": [
                "./team-home.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./team-home.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 11
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  templateUrl: './team-home.component.html',\r\n  styleUrls: ['./team-home.component.scss']\r\n})\r\nexport class TeamHomeComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n  display: block;\r\n}\r\n\r\n.starred-projects {\r\n  margin-top: 16px;\r\n}\r\n\r\n",
                    "styleUrl": "./team-home.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 7
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<!-- <section>\r\n  <mat-tab-group>\r\n    <mat-tab>\r\n      <ng-template mat-tab-label>\r\n        <span class=\"mat-h3\">临近截止</span>\r\n      </ng-template>\r\n      <kanpm-task-list-item *ngFor=\"let task of approachingDeadlineTasks\"></kanpm-task-list-item>\r\n    </mat-tab>\r\n    <mat-tab>\r\n      <ng-template mat-tab-label>\r\n        <span class=\"mat-h3\">最近浏览</span>\r\n      </ng-template>\r\n      Content 2\r\n    </mat-tab>\r\n  </mat-tab-group>\r\n</section> -->"
        },
        {
            "name": "TeamProjectsComponent",
            "id": "component-TeamProjectsComponent-06b01e66c046fff444d6e3899d0514cc",
            "file": "src/app/pages/team/team-projects/team-projects.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "styleUrls": [
                "./team-projects.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./team-projects.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "projectList",
                    "defaultValue": "[]",
                    "type": "Project[]",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "teamId",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "getProjectListByTeamId",
                    "args": [
                        {
                            "name": "teamId",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "jsdoctags": [
                        {
                            "name": "teamId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26
                },
                {
                    "name": "openProjectCreatorDialog",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31
                },
                {
                    "name": "routeToProjectDetail",
                    "args": [
                        {
                            "name": "e",
                            "type": "Project"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "Project",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { Router } from '@angular/router';\r\nimport { ProjectCreatorComponent } from 'shared/components/project-creator/project-creator.component';\r\nimport { GlobalService } from 'core/services/global.service';\r\nimport { ProjectService } from 'core/services/project.service';\r\nimport { Project } from 'core/types/project';\r\n\r\n@Component({\r\n  templateUrl: './team-projects.component.html',\r\n  styleUrls: ['./team-projects.component.scss']\r\n})\r\nexport class TeamProjectsComponent implements OnInit {\r\n\r\n  projectList: Project[] = [];\r\n\r\n  private teamId = '';\r\n\r\n  constructor(\r\n    private dialog: MatDialog,\r\n    private projectService: ProjectService,\r\n    private globalService: GlobalService,\r\n    private router: Router\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.teamId = this.globalService.currentTeamId;\r\n    this.getProjectListByTeamId(this.teamId);\r\n  }\r\n\r\n  openProjectCreatorDialog() {\r\n    const dialogRef = this.dialog.open(ProjectCreatorComponent, {\r\n      autoFocus: false,\r\n      width: '650px'\r\n    });\r\n    dialogRef.afterClosed().subscribe(result => {\r\n      if (result && result.isCreateProjectSuccess) {\r\n        this.getProjectListByTeamId(this.teamId);\r\n      }\r\n    });\r\n  }\r\n\r\n  getProjectListByTeamId(teamId: string) {\r\n    this.projectService.getProjectListByTeamId(teamId).subscribe(\r\n      (response: any) => {\r\n        this.projectList = response.data;\r\n      });\r\n  }\r\n\r\n  routeToProjectDetail(e: Project) {\r\n    this.router.navigate([`project/${e.id}`]);\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n  display: block;\r\n}\r\n\r\n.project-add-button {\r\n  margin: 15px;\r\n}\r\n",
                    "styleUrl": "./team-projects.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "dialog",
                        "type": "MatDialog"
                    },
                    {
                        "name": "projectService",
                        "type": "ProjectService"
                    },
                    {
                        "name": "globalService",
                        "type": "GlobalService"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "projectService",
                        "type": "ProjectService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "globalService",
                        "type": "GlobalService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<section class=\"project-list\">\n    <h3 class=\"mat-h3\">项目列表</h3>\n    <ng-container *ngFor=\"let project of projectList\">\n        <kanpm-project-list-item [project]=\"project\" (projectClick)=\"routeToProjectDetail($event)\">\n        </kanpm-project-list-item>\n    </ng-container>\n    <button class=\"project-add-button\" (click)=\"openProjectCreatorDialog()\" mat-raised-button\n        color=\"primary\">新建项目</button>\n</section>"
        },
        {
            "name": "TeamSelectComponent",
            "id": "component-TeamSelectComponent-236bc8cfc46600f0d164b64d539b0668",
            "file": "src/app/pages/team/team-select/team-select.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "styleUrls": [
                "./team-select.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./team-select.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "teams",
                    "defaultValue": "[]",
                    "type": "Team[]",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methodsClass": [
                {
                    "name": "getTeamList",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22
                },
                {
                    "name": "openTeamCreatorDialog",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, ChangeDetectionStrategy } from '@angular/core';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { GlobalService } from 'core/services/global.service';\r\nimport { TeamService } from 'core/services/team.service';\r\nimport { Team } from 'core/types/team';\r\nimport { TeamCreatorComponent } from 'shared/components/team-creator/team-creator.component';\r\n\r\n@Component({\r\n  templateUrl: './team-select.component.html',\r\n  styleUrls: ['./team-select.component.scss']\r\n})\r\nexport class TeamSelectComponent implements OnInit {\r\n\r\n  teams: Team[] = [];\r\n\r\n  constructor(\r\n    private dialog: MatDialog,\r\n    private globalService: GlobalService,\r\n    private teamService: TeamService\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.getTeamList();\r\n  }\r\n\r\n  getTeamList() {\r\n    const currentUserId = this.globalService.currentUser.id;\r\n    this.teamService.getTeamListByMemberId(currentUserId).subscribe((resp: any) => {\r\n      this.teams = resp.data;\r\n    });\r\n  }\r\n\r\n  openTeamCreatorDialog() {\r\n    const dialogRef = this.dialog.open(TeamCreatorComponent, {\r\n      autoFocus: false,\r\n      width: '650px'\r\n    });\r\n    dialogRef.afterClosed().subscribe(result => {\r\n      if (result && result.isCreateTeamSuccess) {\r\n        this.getTeamList();\r\n      }\r\n    });\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n  display: block;\r\n  height: 100%;\r\n}\r\n\r\n.select-layout-wrapper {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  height: 100%;\r\n  padding-bottom: 65px;\r\n}\r\n\r\n.team-select-wrapper {\r\n  width: 650px;\r\n\r\n  .create-team-button {\r\n    width: 100%;\r\n    margin: 20px 0;\r\n  }\r\n}\r\n",
                    "styleUrl": "./team-select.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "dialog",
                        "type": "MatDialog"
                    },
                    {
                        "name": "globalService",
                        "type": "GlobalService"
                    },
                    {
                        "name": "teamService",
                        "type": "TeamService"
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "globalService",
                        "type": "GlobalService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "teamService",
                        "type": "TeamService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"select-layout-wrapper\">\r\n    <div class=\"team-select-wrapper\">\r\n        <h1>select a team to enter workspace</h1>\r\n        <mat-divider></mat-divider>\r\n        <mat-nav-list>\r\n            <mat-list-item *ngFor=\"let team of teams\">\r\n                <img matListAvatar src=\"http://placekitten.com/50/50\">\r\n                <a matLine [routerLink]=\"'/team/'+team.id\"> {{team.teamName }}</a>\r\n                <mat-icon>input</mat-icon>\r\n            </mat-list-item>\r\n        </mat-nav-list>\r\n        <button class=\"create-team-button\" mat-raised-button color=\"primary\" (click)=\"openTeamCreatorDialog()\">create a\r\n            team</button>\r\n    </div>\r\n</div>"
        },
        {
            "name": "ThemePickerComponent",
            "id": "component-ThemePickerComponent-b4c02b3dfe494b67bff34d40f7a61a48",
            "file": "src/app/shared/components/theme-picker/theme-picker.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "kanpm-theme-picker",
            "styleUrls": [
                "./theme-picker.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./theme-picker.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "currentTheme",
                    "type": "DocsSiteTheme",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "darkModeThemeKey",
                    "defaultValue": "'kanpm-storage-is-dark-mode'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "isDarkMode",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "storageThemeKey",
                    "defaultValue": "'kanpm-storage-current-theme-name'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "styleManager",
                    "type": "StyleManagerService",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "themes",
                    "defaultValue": "[\r\n    {\r\n      primary: '#3F51B5',\r\n      accent: '#E91E63',\r\n      displayName: 'Indigo & Pink',\r\n      name: 'indigo-pink',\r\n      isDark: false,\r\n      isDefault: true,\r\n    },\r\n    {\r\n      primary: '#8BC34A',\r\n      accent: '#FFC107',\r\n      displayName: 'Light-green & Amber',\r\n      name: 'light-green-orange',\r\n      isDark: true,\r\n    }\r\n  ]",
                    "type": "DocsSiteTheme[]",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "methodsClass": [
                {
                    "name": "darkModeSwitch",
                    "args": [
                        {
                            "name": "isDarkMode",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "jsdoctags": [
                        {
                            "name": "isDarkMode",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42
                },
                {
                    "name": "selectTheme",
                    "args": [
                        {
                            "name": "themeName",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 64,
                    "jsdoctags": [
                        {
                            "name": "themeName",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, ChangeDetectionStrategy } from '@angular/core';\r\nimport { DocsSiteTheme, LocalStorageService } from 'core/services/localstorage.service';\r\nimport { StyleManagerService } from 'core/services/style-manager/style-manager.service';\r\nimport { MatSlideToggleChange } from '@angular/material/slide-toggle';\r\n\r\n@Component({\r\n  selector: 'kanpm-theme-picker',\r\n  templateUrl: './theme-picker.component.html',\r\n  styleUrls: ['./theme-picker.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class ThemePickerComponent implements OnInit {\r\n\r\n  private storageThemeKey = 'kanpm-storage-current-theme-name';\r\n  private darkModeThemeKey = 'kanpm-storage-is-dark-mode';\r\n\r\n  currentTheme: DocsSiteTheme;\r\n  isDarkMode = false;\r\n  themes: DocsSiteTheme[] = [\r\n    {\r\n      primary: '#3F51B5',\r\n      accent: '#E91E63',\r\n      displayName: 'Indigo & Pink',\r\n      name: 'indigo-pink',\r\n      isDark: false,\r\n      isDefault: true,\r\n    },\r\n    {\r\n      primary: '#8BC34A',\r\n      accent: '#FFC107',\r\n      displayName: 'Light-green & Amber',\r\n      name: 'light-green-orange',\r\n      isDark: true,\r\n    }\r\n  ];\r\n\r\n  constructor(\r\n    public styleManager: StyleManagerService,\r\n    private themeStorage: LocalStorageService\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    const currentThemeName = this.themeStorage.getValue(this.storageThemeKey);\r\n    const isDarkMode = this.themeStorage.getValue(this.darkModeThemeKey);\r\n    if (currentThemeName) {\r\n      this.selectTheme(currentThemeName);\r\n    }\r\n    if (isDarkMode) {\r\n      this.darkModeSwitch(isDarkMode);\r\n    }\r\n  }\r\n\r\n  darkModeSwitch(isDarkMode: boolean): void {\r\n    this.isDarkMode = isDarkMode;\r\n    const body = document.getElementsByTagName('body')[0];\r\n    if (this.isDarkMode) {\r\n      body.classList.add('dark-theme');\r\n    } else {\r\n      body.classList.remove('dark-theme');\r\n    }\r\n    this.themeStorage.storeValue(this.darkModeThemeKey, isDarkMode);\r\n  }\r\n\r\n  selectTheme(themeName: string) {\r\n    const theme = this.themes.find(currentTheme => currentTheme.name === themeName);\r\n\r\n    if (!theme) {\r\n      return;\r\n    }\r\n\r\n    this.currentTheme = theme;\r\n\r\n    if (theme.isDefault) {\r\n      this.styleManager.removeStyle('theme');\r\n    } else {\r\n      this.styleManager.setStyle('theme', `themes/${theme.name}.css`);\r\n    }\r\n\r\n    this.themeStorage.storeValue(this.storageThemeKey, themeName);\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n  display: block;\r\n}\r\n\r\n.theme-picker-container {\r\n  display: flex;\r\n  align-items: center;\r\n  margin: 0 5px;\r\n}\r\n\r\n.theme-picker-button {\r\n  cursor: pointer;\r\n  height: 18px;\r\n  width: 18px;\r\n  font-size: 18px;\r\n}\r\n\r\n.dark-mode-toggle{\r\n  margin: 5px 15px;\r\n}\r\n",
                    "styleUrl": "./theme-picker.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "styleManager",
                        "type": "StyleManagerService"
                    },
                    {
                        "name": "themeStorage",
                        "type": "LocalStorageService"
                    }
                ],
                "line": 35,
                "jsdoctags": [
                    {
                        "name": "styleManager",
                        "type": "StyleManagerService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "themeStorage",
                        "type": "LocalStorageService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"theme-picker-container \">\r\n  <mat-icon class=\"theme-picker-button\" [mat-menu-trigger-for]=\"themeMenu\">format_color_fill</mat-icon>\r\n</div>\r\n\r\n<mat-menu #themeMenu>\r\n  <mat-slide-toggle [(ngModel)]=\"isDarkMode\" class=\"dark-mode-toggle\" (change)=\"darkModeSwitch($event.checked)\">Slide me!\r\n  </mat-slide-toggle>\r\n  <mat-divider></mat-divider>\r\n  <button mat-menu-item *ngFor=\"let theme of themes\" (click)=\"selectTheme(theme.name)\">\r\n    <span>{{theme.displayName}}</span>\r\n  </button>\r\n</mat-menu>"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        },
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AuthenticationModule"
                        },
                        {
                            "name": "TeamModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AuthenticationModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AuthenticationRootComponent"
                        },
                        {
                            "name": "LoginComponent"
                        },
                        {
                            "name": "RegisterComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AuthenticationRoutingModule"
                        },
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "AuthenticationRootComponent"
                        },
                        {
                            "name": "RegisterComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AuthenticationRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ComponentsModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AvatarComponent"
                        },
                        {
                            "name": "ProjectCreatorComponent"
                        },
                        {
                            "name": "ProjectListItemComponent"
                        },
                        {
                            "name": "TaskCardComponent"
                        },
                        {
                            "name": "TaskDetailComponent"
                        },
                        {
                            "name": "TaskListItemComponent"
                        },
                        {
                            "name": "TaskStackComponent"
                        },
                        {
                            "name": "TeamCreatorComponent"
                        },
                        {
                            "name": "ThemePickerComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "MaterialModule"
                        },
                        {
                            "name": "ZorroModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "AvatarComponent"
                        },
                        {
                            "name": "ProjectCreatorComponent"
                        },
                        {
                            "name": "ProjectListItemComponent"
                        },
                        {
                            "name": "TaskCardComponent"
                        },
                        {
                            "name": "TaskDetailComponent"
                        },
                        {
                            "name": "TaskListItemComponent"
                        },
                        {
                            "name": "TaskStackComponent"
                        },
                        {
                            "name": "TeamCreatorComponent"
                        },
                        {
                            "name": "ThemePickerComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "GroupRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "MaterialModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ProjectModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ProjectComponent"
                        },
                        {
                            "name": "ProjectTasksComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ProjectRoutingModule"
                        },
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ProjectRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SharedModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "MaterialModule"
                        },
                        {
                            "name": "ZorroModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "MaterialModule"
                        },
                        {
                            "name": "ZorroModule"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TeamModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "TeamComponent"
                        },
                        {
                            "name": "TeamHomeComponent"
                        },
                        {
                            "name": "TeamProjectsComponent"
                        },
                        {
                            "name": "TeamSelectComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "GroupRoutingModule"
                        },
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ZorroModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "CODEMESSAGE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/interceptors/respond.interceptor.ts",
                "type": "literal type",
                "defaultValue": "{\r\n    200: '服务器成功返回请求的数据。',\r\n    201: '新建或修改数据成功。',\r\n    202: '请求已经进入后台排队（异步任务）。',\r\n    204: '删除数据成功。',\r\n    400: '发出的请求有错误，服务器没有进行新建或修改数据的操作。',\r\n    401: '用户没有权限（令牌、用户名、密码错误）。',\r\n    403: '用户得到授权，但是访问是被禁止的。',\r\n    404: '发出的请求针对的是不存在的记录，服务器没有进行操作。',\r\n    406: '请求的格式不可得。',\r\n    410: '请求的资源被永久删除，且不会再得到的。',\r\n    422: '当创建对象时，发生一个验证错误。',\r\n    500: '服务器发生错误，请检查服务器。',\r\n    502: '网关错误。',\r\n    503: '服务不可用，服务器暂时过载或维护。',\r\n    504: '网关超时。',\r\n}"
            },
            {
                "name": "completeTask",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/task-card/task-card.component.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "defaultStatus",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/task-stack/task-stack.component.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "defaultTasksData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/task-card/task-card.component.stories.ts",
                "type": "object",
                "defaultValue": "{\n    description: `task test: Some description about this task`,\n    endTime: new Date().getTime(),\n}"
            },
            {
                "name": "defaultTasksListData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/task-stack/task-stack.component.stories.ts",
                "type": "[]",
                "defaultValue": "[\n    { ...defaultTasksData, isComplete: true, id: '1', title: 'Task 1' },\n    { ...defaultTasksData, id: '2', title: 'Task 2' },\n]"
            },
            {
                "name": "empty",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/task-stack/task-stack.component.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "type": "object",
                "defaultValue": "{\r\n  SERVER_URL: '/',\r\n  production: false\r\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "type": "object",
                "defaultValue": "{\r\n  SERVER_URL: '/',\r\n  production: true\r\n}"
            },
            {
                "name": "fullInfo",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/task-card/task-card.component.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "fullInfo",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/task-detail/task-detail.component.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "httpInterceptorProviders",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/interceptors/index.ts",
                "type": "[]",
                "defaultValue": "[\r\n    { provide: HTTP_INTERCEPTORS, useClass: JwtInterceptor, multi: true },\r\n]",
                "description": "<p>Http interceptor providers in outside-in order </p>\n"
            },
            {
                "name": "httpOptions",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/services/authentication.service.ts",
                "type": "object",
                "defaultValue": "{\r\n  headers: new HttpHeaders({\r\n    'Content-Type': 'application/json'\r\n  })\r\n}"
            },
            {
                "name": "isLoading",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/task-stack/task-stack.component.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Large",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "MaterialModules",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/third-parties/material.module.ts",
                "type": "[]",
                "defaultValue": "[\n  MatSidenavModule,\n  MatButtonModule,\n  MatIconModule,\n  MatMenuModule,\n  MatCheckboxModule,\n  MatTabsModule,\n  MatDividerModule,\n  MatChipsModule,\n  MatToolbarModule,\n  MatCardModule,\n  DragDropModule,\n  MatInputModule,\n  MatDialogModule,\n  MatListModule,\n  MatPaginatorModule,\n  MatSlideToggleModule,\n  MatProgressSpinnerModule\n]"
            },
            {
                "name": "overflowStatus",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/task-stack/task-stack.component.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "type": "literal type"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "SharedComponents",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/components.modules.ts",
                "type": "[]",
                "defaultValue": "[\n    ThemePickerComponent,\n    TaskListItemComponent,\n    ProjectListItemComponent,\n    TaskCardComponent,\n    TaskDetailComponent,\n    AvatarComponent,\n    TeamCreatorComponent,\n    ProjectCreatorComponent,\n    TaskStackComponent\n]"
            },
            {
                "name": "Small",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "Story<Button>",
                "defaultValue": "(args: Button) => ({\n  component: Button,\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "type": "Story<Header>",
                "defaultValue": "(args: Header) => ({\n  component: Header,\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "type": "Story<Page>",
                "defaultValue": "(args: Page) => ({\n  component: Page,\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/task-card/task-card.component.stories.ts",
                "type": "",
                "defaultValue": "(args: TaskCardComponent) => ({\n    props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/task-detail/task-detail.component.stories.ts",
                "type": "",
                "defaultValue": "(args: TaskDetailComponent) => ({\r\n    component: TaskDetailComponent,\r\n    props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/task-stack/task-stack.component.stories.ts",
                "type": "",
                "defaultValue": "(args: TaskStackComponent) => ({\n    props: args\n})"
            },
            {
                "name": "ZorroModules",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/third-parties/zorro.module.ts",
                "type": "[]",
                "defaultValue": "[\n    NzAvatarModule,\n    NzIconModule,\n    NzDividerModule,\n    NzTagModule,\n    NzCommentModule\n]"
            }
        ],
        "functions": [
            {
                "name": "createLinkElementWithKey",
                "file": "src/app/core/services/style-manager/style-manager.service.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "key"
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "key",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getExistingLinkElementByKey",
                "file": "src/app/core/services/style-manager/style-manager.service.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "key"
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "key",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getLinkElementForKey",
                "file": "src/app/core/services/style-manager/style-manager.service.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "key"
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "key",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        ],
        "typealiases": [],
        "enumerations": [
            {
                "name": "TaskRepeat",
                "childs": [],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "description": "",
                "file": "src/app/core/types/task.ts"
            }
        ],
        "groupedVariables": {
            "src/app/core/interceptors/respond.interceptor.ts": [
                {
                    "name": "CODEMESSAGE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/interceptors/respond.interceptor.ts",
                    "type": "literal type",
                    "defaultValue": "{\r\n    200: '服务器成功返回请求的数据。',\r\n    201: '新建或修改数据成功。',\r\n    202: '请求已经进入后台排队（异步任务）。',\r\n    204: '删除数据成功。',\r\n    400: '发出的请求有错误，服务器没有进行新建或修改数据的操作。',\r\n    401: '用户没有权限（令牌、用户名、密码错误）。',\r\n    403: '用户得到授权，但是访问是被禁止的。',\r\n    404: '发出的请求针对的是不存在的记录，服务器没有进行操作。',\r\n    406: '请求的格式不可得。',\r\n    410: '请求的资源被永久删除，且不会再得到的。',\r\n    422: '当创建对象时，发生一个验证错误。',\r\n    500: '服务器发生错误，请检查服务器。',\r\n    502: '网关错误。',\r\n    503: '服务不可用，服务器暂时过载或维护。',\r\n    504: '网关超时。',\r\n}"
                }
            ],
            "src/app/shared/components/task-card/task-card.component.stories.ts": [
                {
                    "name": "completeTask",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/task-card/task-card.component.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "defaultTasksData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/task-card/task-card.component.stories.ts",
                    "type": "object",
                    "defaultValue": "{\n    description: `task test: Some description about this task`,\n    endTime: new Date().getTime(),\n}"
                },
                {
                    "name": "fullInfo",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/task-card/task-card.component.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/task-card/task-card.component.stories.ts",
                    "type": "",
                    "defaultValue": "(args: TaskCardComponent) => ({\n    props: args,\n})"
                }
            ],
            "src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "type": "literal type"
                }
            ],
            "src/app/shared/components/task-stack/task-stack.component.stories.ts": [
                {
                    "name": "defaultStatus",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/task-stack/task-stack.component.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "defaultTasksListData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/task-stack/task-stack.component.stories.ts",
                    "type": "[]",
                    "defaultValue": "[\n    { ...defaultTasksData, isComplete: true, id: '1', title: 'Task 1' },\n    { ...defaultTasksData, id: '2', title: 'Task 2' },\n]"
                },
                {
                    "name": "empty",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/task-stack/task-stack.component.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "isLoading",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/task-stack/task-stack.component.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "overflowStatus",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/task-stack/task-stack.component.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/task-stack/task-stack.component.stories.ts",
                    "type": "",
                    "defaultValue": "(args: TaskStackComponent) => ({\n    props: args\n})"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "type": "object",
                    "defaultValue": "{\r\n  SERVER_URL: '/',\r\n  production: false\r\n}"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "type": "object",
                    "defaultValue": "{\r\n  SERVER_URL: '/',\r\n  production: true\r\n}"
                }
            ],
            "src/app/shared/components/task-detail/task-detail.component.stories.ts": [
                {
                    "name": "fullInfo",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/task-detail/task-detail.component.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/task-detail/task-detail.component.stories.ts",
                    "type": "",
                    "defaultValue": "(args: TaskDetailComponent) => ({\r\n    component: TaskDetailComponent,\r\n    props: args,\r\n})"
                }
            ],
            "src/app/core/interceptors/index.ts": [
                {
                    "name": "httpInterceptorProviders",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/interceptors/index.ts",
                    "type": "[]",
                    "defaultValue": "[\r\n    { provide: HTTP_INTERCEPTORS, useClass: JwtInterceptor, multi: true },\r\n]",
                    "description": "<p>Http interceptor providers in outside-in order </p>\n"
                }
            ],
            "src/app/core/services/authentication.service.ts": [
                {
                    "name": "httpOptions",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/services/authentication.service.ts",
                    "type": "object",
                    "defaultValue": "{\r\n  headers: new HttpHeaders({\r\n    'Content-Type': 'application/json'\r\n  })\r\n}"
                }
            ],
            "src/stories/Button.stories.ts": [
                {
                    "name": "Large",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Small",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "Story<Button>",
                    "defaultValue": "(args: Button) => ({\n  component: Button,\n  props: args,\n})"
                }
            ],
            "src/stories/Header.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "type": "Story<Header>",
                    "defaultValue": "(args: Header) => ({\n  component: Header,\n  props: args,\n})"
                }
            ],
            "src/stories/Page.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "type": "Story<Page>",
                    "defaultValue": "(args: Page) => ({\n  component: Page,\n  props: args,\n})"
                }
            ],
            "src/app/shared/third-parties/material.module.ts": [
                {
                    "name": "MaterialModules",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/third-parties/material.module.ts",
                    "type": "[]",
                    "defaultValue": "[\n  MatSidenavModule,\n  MatButtonModule,\n  MatIconModule,\n  MatMenuModule,\n  MatCheckboxModule,\n  MatTabsModule,\n  MatDividerModule,\n  MatChipsModule,\n  MatToolbarModule,\n  MatCardModule,\n  DragDropModule,\n  MatInputModule,\n  MatDialogModule,\n  MatListModule,\n  MatPaginatorModule,\n  MatSlideToggleModule,\n  MatProgressSpinnerModule\n]"
                }
            ],
            "src/app/shared/components/components.modules.ts": [
                {
                    "name": "SharedComponents",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/components.modules.ts",
                    "type": "[]",
                    "defaultValue": "[\n    ThemePickerComponent,\n    TaskListItemComponent,\n    ProjectListItemComponent,\n    TaskCardComponent,\n    TaskDetailComponent,\n    AvatarComponent,\n    TeamCreatorComponent,\n    ProjectCreatorComponent,\n    TaskStackComponent\n]"
                }
            ],
            "src/app/shared/third-parties/zorro.module.ts": [
                {
                    "name": "ZorroModules",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/third-parties/zorro.module.ts",
                    "type": "[]",
                    "defaultValue": "[\n    NzAvatarModule,\n    NzIconModule,\n    NzDividerModule,\n    NzTagModule,\n    NzCommentModule\n]"
                }
            ]
        },
        "groupedFunctions": {
            "src/app/core/services/style-manager/style-manager.service.ts": [
                {
                    "name": "createLinkElementWithKey",
                    "file": "src/app/core/services/style-manager/style-manager.service.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "key"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "key",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getExistingLinkElementByKey",
                    "file": "src/app/core/services/style-manager/style-manager.service.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "key"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "key",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getLinkElementForKey",
                    "file": "src/app/core/services/style-manager/style-manager.service.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "key"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "key",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {
            "src/app/core/types/task.ts": [
                {
                    "name": "TaskRepeat",
                    "childs": [],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "description": "",
                    "file": "src/app/core/types/task.ts"
                }
            ]
        },
        "groupedTypeAliases": {}
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/pages/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": [
                    {
                        "path": "",
                        "redirectTo": "authentication",
                        "pathMatch": "full"
                    },
                    {
                        "path": "project/:id",
                        "loadChildren": "./project/project.module#ProjectModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [
                                    {
                                        "name": "routes",
                                        "filename": "src/app/pages/project/project-routing.module.ts",
                                        "module": "ProjectRoutingModule",
                                        "children": [
                                            {
                                                "path": "",
                                                "component": "ProjectComponent",
                                                "children": [
                                                    {
                                                        "path": "",
                                                        "redirectTo": "task/1",
                                                        "pathMatch": "full"
                                                    },
                                                    {
                                                        "path": "task/:taskId",
                                                        "component": "ProjectTasksComponent"
                                                    }
                                                ]
                                            }
                                        ],
                                        "kind": "module"
                                    }
                                ],
                                "module": "ProjectModule"
                            }
                        ]
                    }
                ],
                "kind": "module"
            },
            {
                "name": "routes",
                "filename": "src/app/pages/authentication/authentication-routing.module.ts",
                "module": "AuthenticationRoutingModule",
                "children": [
                    {
                        "path": "authentication",
                        "component": "AuthenticationRootComponent"
                    }
                ],
                "kind": "module"
            },
            {
                "name": "routes",
                "filename": "src/app/pages/team/team-routing.module.ts",
                "module": "GroupRoutingModule",
                "children": [
                    {
                        "path": "team/:teamId",
                        "component": "TeamComponent",
                        "children": [
                            {
                                "path": "",
                                "redirectTo": "project",
                                "pathMatch": "full"
                            },
                            {
                                "path": "home",
                                "component": "TeamHomeComponent"
                            },
                            {
                                "path": "project",
                                "component": "TeamProjectsComponent"
                            }
                        ]
                    },
                    {
                        "path": "teamSelect",
                        "component": "TeamSelectComponent"
                    }
                ],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 2,
        "status": "low",
        "files": [
            {
                "filePath": "e2e/src/app.po.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AppPage",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/guards/auth-guard.service.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "AuthGuardService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/core/interceptors/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "httpInterceptorProviders",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "src/app/core/interceptors/jwt.interceptor.ts",
                "type": "interceptor",
                "linktype": "interceptor",
                "name": "JwtInterceptor",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/interceptors/respond.interceptor.ts",
                "type": "interceptor",
                "linktype": "interceptor",
                "name": "RespondInterceptor",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/core/interceptors/respond.interceptor.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CODEMESSAGE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/authentication.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AuthenticationService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/authentication.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "httpOptions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/global.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "GlobalService",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/localstorage.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "LocalStorageService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/localstorage.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DocsSiteTheme",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/project.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ProjectService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/style-manager/style-manager.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "StyleManagerService",
                "coveragePercent": 33,
                "coverageCount": "1/3",
                "status": "medium"
            },
            {
                "filePath": "src/app/core/services/style-manager/style-manager.service.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "createLinkElementWithKey",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/style-manager/style-manager.service.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "getExistingLinkElementByKey",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/style-manager/style-manager.service.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "getLinkElementForKey",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/team.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TeamService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/core/types/project.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Project",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/core/types/response.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ServerResponse",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/types/signUpRequest.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SignUpRequest",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/core/types/task.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Comment",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/core/types/task.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MentionedFlag",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/types/task.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Tag",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/types/task.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Task",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/app/core/types/task.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TaskGroup",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/types/task.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TaskList",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/core/types/team.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Team",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/core/types/user.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/authentication/authentication-root/authentication-root.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AuthenticationRootComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/authentication/login/login.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoginComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/authentication/register/register.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RegisterComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/project/project-tasks/project-tasks.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ProjectTasksComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/project/project.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ProjectComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/team/team-home/team-home.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TeamHomeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/team/team-projects/team-projects.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TeamProjectsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/team/team-select/team-select.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TeamSelectComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/team/team.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TeamComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/avatar/avatar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AvatarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/components.modules.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SharedComponents",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/project-creator/project-creator.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ProjectCreatorComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/project-list-item/project-list-item.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ProjectListItemComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/task-card/task-card.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "completeTask",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/task-card/task-card.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "defaultTasksData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/task-card/task-card.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "fullInfo",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/task-card/task-card.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/task-card/task-card.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TaskCardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/task-detail/task-detail.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "fullInfo",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/task-detail/task-detail.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/task-detail/task-detail.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TaskDetailComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/task-list-item/task-list-item.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TaskListItemComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/task-stack/task-stack.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "defaultStatus",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/task-stack/task-stack.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "defaultTasksListData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/task-stack/task-stack.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "empty",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/task-stack/task-stack.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "isLoading",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/task-stack/task-stack.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "overflowStatus",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/task-stack/task-stack.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/task-stack/task-stack.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TaskStackComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/team-creator/team-creator.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TeamCreatorComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/theme-picker/theme-picker.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ThemePickerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/third-parties/material.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MaterialModules",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/third-parties/zorro.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ZorroModules",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Large",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Small",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "src/stories/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}